# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_mapping_entry_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile_mapping_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/tc-id-2-queue-id-mapping-profile/mapping-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A traffic-class-id to queue-id mapping profile. One profile
maps each of the traffic-class-ids to a queue-id.
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class_id','__local_queue_id',)

  _yang_name = 'mapping-entry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__local_queue_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)
    self.__traffic_class_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="traffic-class-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-qos-t:traffic-class-id', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'tc-id-2-queue-id-mapping-profile', u'mapping-entry']

  def _get_traffic_class_id(self):
    """
    Getter method for traffic_class_id, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/mapping_entry/traffic_class_id (bbf-qos-t:traffic-class-id)

    YANG Description: A traffic-class-id.
    """
    return self.__traffic_class_id
      
  def _set_traffic_class_id(self, v, load=False):
    """
    Setter method for traffic_class_id, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/mapping_entry/traffic_class_id (bbf-qos-t:traffic-class-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class_id() directly.

    YANG Description: A traffic-class-id.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="traffic-class-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-qos-t:traffic-class-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class_id must be of a type compatible with bbf-qos-t:traffic-class-id""",
          'defined-type': "bbf-qos-t:traffic-class-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="traffic-class-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-qos-t:traffic-class-id', is_config=True)""",
        })

    self.__traffic_class_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class_id(self):
    self.__traffic_class_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="traffic-class-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-qos-t:traffic-class-id', is_config=True)


  def _get_local_queue_id(self):
    """
    Getter method for local_queue_id, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/mapping_entry/local_queue_id (queue-id)

    YANG Description: The identification of a queue locally within a parent
node context.
    """
    return self.__local_queue_id
      
  def _set_local_queue_id(self, v, load=False):
    """
    Setter method for local_queue_id, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/mapping_entry/local_queue_id (queue-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_queue_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_queue_id() directly.

    YANG Description: The identification of a queue locally within a parent
node context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_queue_id must be of a type compatible with queue-id""",
          'defined-type': "bbf-qos-traffic-mngt:queue-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)""",
        })

    self.__local_queue_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_queue_id(self):
    self.__local_queue_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)

  traffic_class_id = __builtin__.property(_get_traffic_class_id, _set_traffic_class_id)
  local_queue_id = __builtin__.property(_get_local_queue_id, _set_local_queue_id)


  _pyangbind_elements = OrderedDict([('traffic_class_id', traffic_class_id), ('local_queue_id', local_queue_id), ])


class yc_tc_id_2_queue_id_mapping_profile_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/tc-id-2-queue-id-mapping-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of traffic-class-id to queue-id mapping profiles.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__mapping_entry',)

  _yang_name = 'tc-id-2-queue-id-mapping-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mapping_entry = YANGDynClass(base=YANGListType("traffic_class_id",yc_mapping_entry_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile_mapping_entry, yang_name="mapping-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class-id', extensions=None), is_container='list', yang_name="mapping-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'tc-id-2-queue-id-mapping-profile']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/name (bbf-yang:string-ascii64)

    YANG Description: The name of a traffic-class-id to queue-id mapping
profile.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/name (bbf-yang:string-ascii64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of a traffic-class-id to queue-id mapping
profile.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with bbf-yang:string-ascii64""",
          'defined-type': "bbf-yang:string-ascii64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)


  def _get_mapping_entry(self):
    """
    Getter method for mapping_entry, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/mapping_entry (list)

    YANG Description: A traffic-class-id to queue-id mapping profile. One profile
maps each of the traffic-class-ids to a queue-id.
    """
    return self.__mapping_entry
      
  def _set_mapping_entry(self, v, load=False):
    """
    Setter method for mapping_entry, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile/mapping_entry (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapping_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapping_entry() directly.

    YANG Description: A traffic-class-id to queue-id mapping profile. One profile
maps each of the traffic-class-ids to a queue-id.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("traffic_class_id",yc_mapping_entry_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile_mapping_entry, yang_name="mapping-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class-id', extensions=None), is_container='list', yang_name="mapping-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapping_entry must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("traffic_class_id",yc_mapping_entry_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile_mapping_entry, yang_name="mapping-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class-id', extensions=None), is_container='list', yang_name="mapping-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)""",
        })

    self.__mapping_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapping_entry(self):
    self.__mapping_entry = YANGDynClass(base=YANGListType("traffic_class_id",yc_mapping_entry_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile_mapping_entry, yang_name="mapping-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class-id', extensions=None), is_container='list', yang_name="mapping-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  mapping_entry = __builtin__.property(_get_mapping_entry, _set_mapping_entry)


  _pyangbind_elements = OrderedDict([('name', name), ('mapping_entry', mapping_entry), ])


class yc_taildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_taildrop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/taildrop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with taildrop.
  """
  __slots__ = ('_path_helper', '_extmethods', '__max_threshold',)

  _yang_name = 'taildrop'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'taildrop']

  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/taildrop/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/taildrop/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)

  __choices__ = {u'bac-type': {u'taildrop': [u'max_threshold']}}
  _pyangbind_elements = OrderedDict([('max_threshold', max_threshold), ])


class yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with Random Early
Detection (RED).
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__max_probability',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'red']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/red/min_threshold (bbf-yang:percent)

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/red/min_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/red/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/red/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_probability(self):
    """
    Getter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/red/max_probability (bbf-yang:percent)

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    return self.__max_probability
      
  def _set_max_probability(self, v, load=False):
    """
    Setter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/red/max_probability (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_probability is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_probability() directly.

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_probability must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_probability = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_probability(self):
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  min_threshold = __builtin__.property(_get_min_threshold, _set_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)
  max_probability = __builtin__.property(_get_max_probability, _set_max_probability)

  __choices__ = {u'bac-type': {u'red': [u'min_threshold', u'max_threshold', u'max_probability']}}
  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('max_probability', max_probability), ])


class yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_green(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wtaildrop/color/green. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Green packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__max_threshold',)

  _yang_name = 'green'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wtaildrop', u'color', u'green']

  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/green/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/green/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)

  __choices__ = {u'bac-type': {u'wtaildrop': [u'max_threshold']}}
  _pyangbind_elements = OrderedDict([('max_threshold', max_threshold), ])


class yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_yellow(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wtaildrop/color/yellow. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Yellow packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__max_threshold',)

  _yang_name = 'yellow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wtaildrop', u'color', u'yellow']

  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/yellow/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/yellow/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)

  __choices__ = {u'bac-type': {u'wtaildrop': [u'max_threshold']}}
  _pyangbind_elements = OrderedDict([('max_threshold', max_threshold), ])


class yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wtaildrop/color/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Red packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__max_threshold',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wtaildrop', u'color', u'red']

  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/red/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/red/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)

  __choices__ = {u'bac-type': {u'wtaildrop': [u'max_threshold']}}
  _pyangbind_elements = OrderedDict([('max_threshold', max_threshold), ])


class yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wtaildrop/color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with the marked color
of the packet.
  """
  __slots__ = ('_path_helper', '_extmethods', '__green','__yellow','__red',)

  _yang_name = 'color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__green = YANGDynClass(base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__red = YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__yellow = YANGDynClass(base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wtaildrop', u'color']

  def _get_green(self):
    """
    Getter method for green, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/green (container)

    YANG Description: Green packets.
    """
    return self.__green
      
  def _set_green(self, v, load=False):
    """
    Setter method for green, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/green (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_green is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_green() directly.

    YANG Description: Green packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """green must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__green = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_green(self):
    self.__green = YANGDynClass(base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_yellow(self):
    """
    Getter method for yellow, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/yellow (container)

    YANG Description: Yellow packets.
    """
    return self.__yellow
      
  def _set_yellow(self, v, load=False):
    """
    Setter method for yellow, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/yellow (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_yellow is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_yellow() directly.

    YANG Description: Yellow packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """yellow must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__yellow = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_yellow(self):
    self.__yellow = YANGDynClass(base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/red (container)

    YANG Description: Red packets.
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Red packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

  green = __builtin__.property(_get_green, _set_green)
  yellow = __builtin__.property(_get_yellow, _set_yellow)
  red = __builtin__.property(_get_red, _set_red)

  __choices__ = {u'bac-type': {u'wtaildrop': [u'green', u'yellow', u'red']}}
  _pyangbind_elements = OrderedDict([('green', green), ('yellow', yellow), ('red', red), ])


class yc_wtaildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wtaildrop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with weighted taildrop.
  """
  __slots__ = ('_path_helper', '_extmethods', '__color',)

  _yang_name = 'wtaildrop'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__color = YANGDynClass(base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wtaildrop']

  def _get_color(self):
    """
    Getter method for color, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color (container)

    YANG Description: Management objects associated with the marked color
of the packet.
    """
    return self.__color
      
  def _set_color(self, v, load=False):
    """
    Setter method for color, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop/color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_color() directly.

    YANG Description: Management objects associated with the marked color
of the packet.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_color(self):
    self.__color = YANGDynClass(base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

  color = __builtin__.property(_get_color, _set_color)

  __choices__ = {u'bac-type': {u'wtaildrop': [u'color']}}
  _pyangbind_elements = OrderedDict([('color', color), ])


class yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_green(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wred/color/green. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Green packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__max_probability',)

  _yang_name = 'green'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wred', u'color', u'green']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green/min_threshold (bbf-yang:percent)

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green/min_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_probability(self):
    """
    Getter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green/max_probability (bbf-yang:percent)

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    return self.__max_probability
      
  def _set_max_probability(self, v, load=False):
    """
    Setter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green/max_probability (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_probability is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_probability() directly.

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_probability must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_probability = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_probability(self):
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  min_threshold = __builtin__.property(_get_min_threshold, _set_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)
  max_probability = __builtin__.property(_get_max_probability, _set_max_probability)

  __choices__ = {u'bac-type': {u'wred': [u'min_threshold', u'max_threshold', u'max_probability']}}
  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('max_probability', max_probability), ])


class yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_yellow(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wred/color/yellow. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Yellow packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__max_probability',)

  _yang_name = 'yellow'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wred', u'color', u'yellow']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow/min_threshold (bbf-yang:percent)

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow/min_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_probability(self):
    """
    Getter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow/max_probability (bbf-yang:percent)

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    return self.__max_probability
      
  def _set_max_probability(self, v, load=False):
    """
    Setter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow/max_probability (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_probability is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_probability() directly.

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_probability must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_probability = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_probability(self):
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  min_threshold = __builtin__.property(_get_min_threshold, _set_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)
  max_probability = __builtin__.property(_get_max_probability, _set_max_probability)

  __choices__ = {u'bac-type': {u'wred': [u'min_threshold', u'max_threshold', u'max_probability']}}
  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('max_probability', max_probability), ])


class yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wred/color/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Red packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__min_threshold','__max_threshold','__max_probability',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wred', u'color', u'red']

  def _get_min_threshold(self):
    """
    Getter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red/min_threshold (bbf-yang:percent)

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    return self.__min_threshold
      
  def _set_min_threshold(self, v, load=False):
    """
    Setter method for min_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red/min_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_threshold() directly.

    YANG Description: The threshold from which the system begins to discard
incoming packets in a random way.

The value is a percentage to be calculated on the value of
the leaf max-queue-size of the queue on which the BAC is
applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__min_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_threshold(self):
    self.__min_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="min-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_threshold(self):
    """
    Getter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red/max_threshold (bbf-yang:percent)

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    return self.__max_threshold
      
  def _set_max_threshold(self, v, load=False):
    """
    Setter method for max_threshold, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red/max_threshold (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_threshold() directly.

    YANG Description: The threshold to discard all incoming packets.

The value is a percentage to be calculated on the value of
the leaf max-queue-size.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_threshold must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_threshold(self):
    self.__max_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-threshold", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)


  def _get_max_probability(self):
    """
    Getter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red/max_probability (bbf-yang:percent)

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    return self.__max_probability
      
  def _set_max_probability(self, v, load=False):
    """
    Setter method for max_probability, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red/max_probability (bbf-yang:percent)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_probability is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_probability() directly.

    YANG Description: The maximum discard probability of packets before the
maximum threshold is reached.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_probability must be of a type compatible with bbf-yang:percent""",
          'defined-type': "bbf-yang:percent",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)""",
        })

    self.__max_probability = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_probability(self):
    self.__max_probability = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-probability", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:percent', is_config=True)

  min_threshold = __builtin__.property(_get_min_threshold, _set_min_threshold)
  max_threshold = __builtin__.property(_get_max_threshold, _set_max_threshold)
  max_probability = __builtin__.property(_get_max_probability, _set_max_probability)

  __choices__ = {u'bac-type': {u'wred': [u'min_threshold', u'max_threshold', u'max_probability']}}
  _pyangbind_elements = OrderedDict([('min_threshold', min_threshold), ('max_threshold', max_threshold), ('max_probability', max_probability), ])


class yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wred/color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with the marked color
of the packet.
  """
  __slots__ = ('_path_helper', '_extmethods', '__green','__yellow','__red',)

  _yang_name = 'color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__green = YANGDynClass(base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__red = YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__yellow = YANGDynClass(base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wred', u'color']

  def _get_green(self):
    """
    Getter method for green, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green (container)

    YANG Description: Green packets.
    """
    return self.__green
      
  def _set_green(self, v, load=False):
    """
    Setter method for green, mapped from YANG variable /tm_profiles/bac_entry/wred/color/green (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_green is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_green() directly.

    YANG Description: Green packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """green must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__green = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_green(self):
    self.__green = YANGDynClass(base=yc_green_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_green, is_container='container', yang_name="green", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_yellow(self):
    """
    Getter method for yellow, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow (container)

    YANG Description: Yellow packets.
    """
    return self.__yellow
      
  def _set_yellow(self, v, load=False):
    """
    Setter method for yellow, mapped from YANG variable /tm_profiles/bac_entry/wred/color/yellow (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_yellow is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_yellow() directly.

    YANG Description: Yellow packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """yellow must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__yellow = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_yellow(self):
    self.__yellow = YANGDynClass(base=yc_yellow_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_yellow, is_container='container', yang_name="yellow", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red (container)

    YANG Description: Red packets.
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /tm_profiles/bac_entry/wred/color/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Red packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

  green = __builtin__.property(_get_green, _set_green)
  yellow = __builtin__.property(_get_yellow, _set_yellow)
  red = __builtin__.property(_get_red, _set_red)

  __choices__ = {u'bac-type': {u'wred': [u'green', u'yellow', u'red']}}
  _pyangbind_elements = OrderedDict([('green', green), ('yellow', yellow), ('red', red), ])


class yc_wred_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with Weighted
Random Early Detection.
  """
  __slots__ = ('_path_helper', '_extmethods', '__color',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__color = YANGDynClass(base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry', u'wred']

  def _get_color(self):
    """
    Getter method for color, mapped from YANG variable /tm_profiles/bac_entry/wred/color (container)

    YANG Description: Management objects associated with the marked color
of the packet.
    """
    return self.__color
      
  def _set_color(self, v, load=False):
    """
    Setter method for color, mapped from YANG variable /tm_profiles/bac_entry/wred/color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_color() directly.

    YANG Description: Management objects associated with the marked color
of the packet.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_color(self):
    self.__color = YANGDynClass(base=yc_color_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred_color, is_container='container', yang_name="color", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

  color = __builtin__.property(_get_color, _set_color)

  __choices__ = {u'bac-type': {u'wred': [u'color']}}
  _pyangbind_elements = OrderedDict([('color', color), ])


class yc_bac_entry_bbf_qos_traffic_mngt__tm_profiles_bac_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/bac-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of BAC entries.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__max_queue_size','__taildrop','__red','__wtaildrop','__wred',)

  _yang_name = 'bac-entry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred, is_container='container', yang_name="wred", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)
    self.__wtaildrop = YANGDynClass(base=yc_wtaildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop, is_container='container', yang_name="wtaildrop", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__max_queue_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='uint32', is_config=True)
    self.__taildrop = YANGDynClass(base=yc_taildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_taildrop, is_container='container', yang_name="taildrop", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__red = YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'bac-entry']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /tm_profiles/bac_entry/name (bbf-yang:string-ascii64)

    YANG Description: The name of a BAC entry.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /tm_profiles/bac_entry/name (bbf-yang:string-ascii64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of a BAC entry.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with bbf-yang:string-ascii64""",
          'defined-type': "bbf-yang:string-ascii64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='bbf-yang:string-ascii64', is_config=True)


  def _get_max_queue_size(self):
    """
    Getter method for max_queue_size, mapped from YANG variable /tm_profiles/bac_entry/max_queue_size (uint32)

    YANG Description: The maximum queue length.
    """
    return self.__max_queue_size
      
  def _set_max_queue_size(self, v, load=False):
    """
    Setter method for max_queue_size, mapped from YANG variable /tm_profiles/bac_entry/max_queue_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_size() directly.

    YANG Description: The maximum queue length.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_size(self):
    self.__max_queue_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='uint32', is_config=True)


  def _get_taildrop(self):
    """
    Getter method for taildrop, mapped from YANG variable /tm_profiles/bac_entry/taildrop (container)

    YANG Description: Management objects associated with taildrop.
    """
    return self.__taildrop
      
  def _set_taildrop(self, v, load=False):
    """
    Setter method for taildrop, mapped from YANG variable /tm_profiles/bac_entry/taildrop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_taildrop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_taildrop() directly.

    YANG Description: Management objects associated with taildrop.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_taildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_taildrop, is_container='container', yang_name="taildrop", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """taildrop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_taildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_taildrop, is_container='container', yang_name="taildrop", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__taildrop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_taildrop(self):
    self.__taildrop = YANGDynClass(base=yc_taildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_taildrop, is_container='container', yang_name="taildrop", parent=self, choice=(u'bac-type', u'taildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /tm_profiles/bac_entry/red (container)

    YANG Description: Management objects associated with Random Early
Detection (RED).
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /tm_profiles/bac_entry/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Management objects associated with Random Early
Detection (RED).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_bbf_qos_traffic_mngt__tm_profiles_bac_entry_red, is_container='container', yang_name="red", parent=self, choice=(u'bac-type', u'red'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_wtaildrop(self):
    """
    Getter method for wtaildrop, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop (container)

    YANG Description: Management objects associated with weighted taildrop.
    """
    return self.__wtaildrop
      
  def _set_wtaildrop(self, v, load=False):
    """
    Setter method for wtaildrop, mapped from YANG variable /tm_profiles/bac_entry/wtaildrop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wtaildrop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wtaildrop() directly.

    YANG Description: Management objects associated with weighted taildrop.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wtaildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop, is_container='container', yang_name="wtaildrop", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wtaildrop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wtaildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop, is_container='container', yang_name="wtaildrop", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__wtaildrop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wtaildrop(self):
    self.__wtaildrop = YANGDynClass(base=yc_wtaildrop_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wtaildrop, is_container='container', yang_name="wtaildrop", parent=self, choice=(u'bac-type', u'wtaildrop'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /tm_profiles/bac_entry/wred (container)

    YANG Description: Management objects associated with Weighted
Random Early Detection.
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /tm_profiles/bac_entry/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Management objects associated with Weighted
Random Early Detection.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred, is_container='container', yang_name="wred", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred, is_container='container', yang_name="wred", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_bbf_qos_traffic_mngt__tm_profiles_bac_entry_wred, is_container='container', yang_name="wred", parent=self, choice=(u'bac-type', u'wred'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  max_queue_size = __builtin__.property(_get_max_queue_size, _set_max_queue_size)
  taildrop = __builtin__.property(_get_taildrop, _set_taildrop)
  red = __builtin__.property(_get_red, _set_red)
  wtaildrop = __builtin__.property(_get_wtaildrop, _set_wtaildrop)
  wred = __builtin__.property(_get_wred, _set_wred)

  __choices__ = {u'bac-type': {u'wred': [u'wred'], u'taildrop': [u'taildrop'], u'red': [u'red'], u'wtaildrop': [u'wtaildrop']}}
  _pyangbind_elements = OrderedDict([('name', name), ('max_queue_size', max_queue_size), ('taildrop', taildrop), ('red', red), ('wtaildrop', wtaildrop), ('wred', wred), ])


class yc_single_token_bucket_bbf_qos_traffic_mngt__tm_profiles_shaper_profile_single_token_bucket(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/shaper-profile/single-token-bucket. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Management objects associated with single token.
  """
  __slots__ = ('_path_helper', '_extmethods', '__pir','__pbs',)

  _yang_name = 'single-token-bucket'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pir", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)
    self.__pbs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pbs", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'shaper-profile', u'single-token-bucket']

  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /tm_profiles/shaper_profile/single_token_bucket/pir (uint32)

    YANG Description: The Peak Information Rate, in kilobits per
second.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /tm_profiles/shaper_profile/single_token_bucket/pir (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: The Peak Information Rate, in kilobits per
second.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pir", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pir", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pir", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)


  def _get_pbs(self):
    """
    Getter method for pbs, mapped from YANG variable /tm_profiles/shaper_profile/single_token_bucket/pbs (uint32)

    YANG Description: The Peak Burst Size, in bytes.
    """
    return self.__pbs
      
  def _set_pbs(self, v, load=False):
    """
    Setter method for pbs, mapped from YANG variable /tm_profiles/shaper_profile/single_token_bucket/pbs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pbs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pbs() directly.

    YANG Description: The Peak Burst Size, in bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pbs", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pbs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pbs", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)""",
        })

    self.__pbs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pbs(self):
    self.__pbs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pbs", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='uint32', is_config=True)

  pir = __builtin__.property(_get_pir, _set_pir)
  pbs = __builtin__.property(_get_pbs, _set_pbs)

  __choices__ = {u'shaper-type': {u'single-token-bucket': [u'pir', u'pbs']}}
  _pyangbind_elements = OrderedDict([('pir', pir), ('pbs', pbs), ])


class yc_shaper_profile_bbf_qos_traffic_mngt__tm_profiles_shaper_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles/shaper-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of shaper profiles.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__single_token_bucket',)

  _yang_name = 'shaper-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__single_token_bucket = YANGDynClass(base=yc_single_token_bucket_bbf_qos_traffic_mngt__tm_profiles_shaper_profile_single_token_bucket, is_container='container', yang_name="single-token-bucket", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='bbf-yang:string-ascii64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles', u'shaper-profile']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /tm_profiles/shaper_profile/name (bbf-yang:string-ascii64)

    YANG Description: The name of a shaper profile.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /tm_profiles/shaper_profile/name (bbf-yang:string-ascii64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of a shaper profile.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='bbf-yang:string-ascii64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with bbf-yang:string-ascii64""",
          'defined-type': "bbf-yang:string-ascii64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='bbf-yang:string-ascii64', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='bbf-yang:string-ascii64', is_config=True)


  def _get_single_token_bucket(self):
    """
    Getter method for single_token_bucket, mapped from YANG variable /tm_profiles/shaper_profile/single_token_bucket (container)

    YANG Description: Management objects associated with single token.
    """
    return self.__single_token_bucket
      
  def _set_single_token_bucket(self, v, load=False):
    """
    Setter method for single_token_bucket, mapped from YANG variable /tm_profiles/shaper_profile/single_token_bucket (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_single_token_bucket is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_single_token_bucket() directly.

    YANG Description: Management objects associated with single token.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_single_token_bucket_bbf_qos_traffic_mngt__tm_profiles_shaper_profile_single_token_bucket, is_container='container', yang_name="single-token-bucket", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """single_token_bucket must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_single_token_bucket_bbf_qos_traffic_mngt__tm_profiles_shaper_profile_single_token_bucket, is_container='container', yang_name="single-token-bucket", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='container', is_config=True)""",
        })

    self.__single_token_bucket = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_single_token_bucket(self):
    self.__single_token_bucket = YANGDynClass(base=yc_single_token_bucket_bbf_qos_traffic_mngt__tm_profiles_shaper_profile_single_token_bucket, is_container='container', yang_name="single-token-bucket", parent=self, choice=(u'shaper-type', u'single-token-bucket'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  single_token_bucket = __builtin__.property(_get_single_token_bucket, _set_single_token_bucket)

  __choices__ = {u'shaper-type': {u'single-token-bucket': [u'single_token_bucket']}}
  _pyangbind_elements = OrderedDict([('name', name), ('single_token_bucket', single_token_bucket), ])


class yc_tm_profiles_bbf_qos_traffic_mngt__tm_profiles(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /tm-profiles. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A set of types of profiles for traffic management
configuration.
  """
  __slots__ = ('_path_helper', '_extmethods', '__tc_id_2_queue_id_mapping_profile','__bac_entry','__shaper_profile',)

  _yang_name = 'tm-profiles'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__bac_entry = YANGDynClass(base=YANGListType("name",yc_bac_entry_bbf_qos_traffic_mngt__tm_profiles_bac_entry, yang_name="bac-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="bac-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    self.__shaper_profile = YANGDynClass(base=YANGListType("name",yc_shaper_profile_bbf_qos_traffic_mngt__tm_profiles_shaper_profile, yang_name="shaper-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="shaper-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='list', is_config=True)
    self.__tc_id_2_queue_id_mapping_profile = YANGDynClass(base=YANGListType("name",yc_tc_id_2_queue_id_mapping_profile_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile, yang_name="tc-id-2-queue-id-mapping-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tc-id-2-queue-id-mapping-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-profiles']

  def _get_tc_id_2_queue_id_mapping_profile(self):
    """
    Getter method for tc_id_2_queue_id_mapping_profile, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile (list)

    YANG Description: A list of traffic-class-id to queue-id mapping profiles.
    """
    return self.__tc_id_2_queue_id_mapping_profile
      
  def _set_tc_id_2_queue_id_mapping_profile(self, v, load=False):
    """
    Setter method for tc_id_2_queue_id_mapping_profile, mapped from YANG variable /tm_profiles/tc_id_2_queue_id_mapping_profile (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tc_id_2_queue_id_mapping_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tc_id_2_queue_id_mapping_profile() directly.

    YANG Description: A list of traffic-class-id to queue-id mapping profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_tc_id_2_queue_id_mapping_profile_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile, yang_name="tc-id-2-queue-id-mapping-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tc-id-2-queue-id-mapping-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tc_id_2_queue_id_mapping_profile must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_tc_id_2_queue_id_mapping_profile_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile, yang_name="tc-id-2-queue-id-mapping-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tc-id-2-queue-id-mapping-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)""",
        })

    self.__tc_id_2_queue_id_mapping_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tc_id_2_queue_id_mapping_profile(self):
    self.__tc_id_2_queue_id_mapping_profile = YANGDynClass(base=YANGListType("name",yc_tc_id_2_queue_id_mapping_profile_bbf_qos_traffic_mngt__tm_profiles_tc_id_2_queue_id_mapping_profile, yang_name="tc-id-2-queue-id-mapping-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tc-id-2-queue-id-mapping-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)


  def _get_bac_entry(self):
    """
    Getter method for bac_entry, mapped from YANG variable /tm_profiles/bac_entry (list)

    YANG Description: A list of BAC entries.
    """
    return self.__bac_entry
      
  def _set_bac_entry(self, v, load=False):
    """
    Setter method for bac_entry, mapped from YANG variable /tm_profiles/bac_entry (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bac_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bac_entry() directly.

    YANG Description: A list of BAC entries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_bac_entry_bbf_qos_traffic_mngt__tm_profiles_bac_entry, yang_name="bac-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="bac-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bac_entry must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_bac_entry_bbf_qos_traffic_mngt__tm_profiles_bac_entry, yang_name="bac-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="bac-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)""",
        })

    self.__bac_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bac_entry(self):
    self.__bac_entry = YANGDynClass(base=YANGListType("name",yc_bac_entry_bbf_qos_traffic_mngt__tm_profiles_bac_entry, yang_name="bac-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="bac-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)


  def _get_shaper_profile(self):
    """
    Getter method for shaper_profile, mapped from YANG variable /tm_profiles/shaper_profile (list)

    YANG Description: A list of shaper profiles.
    """
    return self.__shaper_profile
      
  def _set_shaper_profile(self, v, load=False):
    """
    Setter method for shaper_profile, mapped from YANG variable /tm_profiles/shaper_profile (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shaper_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shaper_profile() directly.

    YANG Description: A list of shaper profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_shaper_profile_bbf_qos_traffic_mngt__tm_profiles_shaper_profile, yang_name="shaper-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="shaper-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shaper_profile must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_shaper_profile_bbf_qos_traffic_mngt__tm_profiles_shaper_profile, yang_name="shaper-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="shaper-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='list', is_config=True)""",
        })

    self.__shaper_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shaper_profile(self):
    self.__shaper_profile = YANGDynClass(base=YANGListType("name",yc_shaper_profile_bbf_qos_traffic_mngt__tm_profiles_shaper_profile, yang_name="shaper-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="shaper-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='list', is_config=True)

  tc_id_2_queue_id_mapping_profile = __builtin__.property(_get_tc_id_2_queue_id_mapping_profile, _set_tc_id_2_queue_id_mapping_profile)
  bac_entry = __builtin__.property(_get_bac_entry, _set_bac_entry)
  shaper_profile = __builtin__.property(_get_shaper_profile, _set_shaper_profile)


  _pyangbind_elements = OrderedDict([('tc_id_2_queue_id_mapping_profile', tc_id_2_queue_id_mapping_profile), ('bac_entry', bac_entry), ('shaper_profile', shaper_profile), ])


class bbf_qos_traffic_mngt(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-traffic-mngt - based on the path /bbf-qos-traffic-mngt. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This module contains a collection of YANG definitions for
supporting the Broadband Forum requirements on the management of
Quality of Service (QoS) as applicable to access network
equipment. As such, this module is specific to access network
equipment (e.g., BBF-specified Access Nodes and FTTdp DPUs).

Specifically, this module contains a collection of functions for
QoS traffic management (TM).

Copyright (c) 2017-2018, Broadband Forum

Redistribution and use in source and binary forms, with or
without modification, are permitted provided that the following
conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following
   disclaimer in the documentation and/or other materials
   provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products
   derived from this software without specific prior written
   permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The above license is used as a license under copyright only.
Please reference the Forum IPR Policy for patent licensing terms
<https://www.broadband-forum.org/ipr-policy>.

Any moral rights which are necessary to exercise under the above
license grant are also deemed granted under this license.

This version of this YANG module is part of TR-383; see
the TR itself for full legal notices.
  """
  __slots__ = ('_path_helper', '_extmethods', '__tm_profiles',)

  _yang_name = 'bbf-qos-traffic-mngt'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__tm_profiles = YANGDynClass(base=yc_tm_profiles_bbf_qos_traffic_mngt__tm_profiles, is_container='container', yang_name="tm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_tm_profiles(self):
    """
    Getter method for tm_profiles, mapped from YANG variable /tm_profiles (container)

    YANG Description: A set of types of profiles for traffic management
configuration.
    """
    return self.__tm_profiles
      
  def _set_tm_profiles(self, v, load=False):
    """
    Setter method for tm_profiles, mapped from YANG variable /tm_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tm_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tm_profiles() directly.

    YANG Description: A set of types of profiles for traffic management
configuration.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_tm_profiles_bbf_qos_traffic_mngt__tm_profiles, is_container='container', yang_name="tm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tm_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_tm_profiles_bbf_qos_traffic_mngt__tm_profiles, is_container='container', yang_name="tm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__tm_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tm_profiles(self):
    self.__tm_profiles = YANGDynClass(base=yc_tm_profiles_bbf_qos_traffic_mngt__tm_profiles, is_container='container', yang_name="tm-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)

  tm_profiles = __builtin__.property(_get_tm_profiles, _set_tm_profiles)


  _pyangbind_elements = OrderedDict([('tm_profiles', tm_profiles), ])


class yc_statistics_ietf_interfaces__interfaces_interface_statistics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/statistics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of interface-related statistics objects.
  """
  __slots__ = ('_path_helper', '_extmethods', '__discontinuity_time','__in_octets','__in_unicast_pkts','__in_broadcast_pkts','__in_multicast_pkts','__in_discards','__in_errors','__in_unknown_protos','__out_octets','__out_unicast_pkts','__out_broadcast_pkts','__out_multicast_pkts','__out_discards','__out_errors',)

  _yang_name = 'statistics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__discontinuity_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    self.__in_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_unknown_protos = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__out_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'statistics']

  def _get_discontinuity_time(self):
    """
    Getter method for discontinuity_time, mapped from YANG variable /interfaces/interface/statistics/discontinuity_time (yang:date-and-time)

    YANG Description: The time on the most recent occasion at which any one or
more of this interface's counters suffered a
discontinuity.  If no such discontinuities have occurred
since the last re-initialization of the local management
subsystem, then this node contains the time the local
management subsystem re-initialized itself.
    """
    return self.__discontinuity_time
      
  def _set_discontinuity_time(self, v, load=False):
    """
    Setter method for discontinuity_time, mapped from YANG variable /interfaces/interface/statistics/discontinuity_time (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discontinuity_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discontinuity_time() directly.

    YANG Description: The time on the most recent occasion at which any one or
more of this interface's counters suffered a
discontinuity.  If no such discontinuities have occurred
since the last re-initialization of the local management
subsystem, then this node contains the time the local
management subsystem re-initialized itself.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discontinuity_time must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__discontinuity_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discontinuity_time(self):
    self.__discontinuity_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)


  def _get_in_octets(self):
    """
    Getter method for in_octets, mapped from YANG variable /interfaces/interface/statistics/in_octets (yang:counter64)

    YANG Description: The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_octets
      
  def _set_in_octets(self, v, load=False):
    """
    Setter method for in_octets, mapped from YANG variable /interfaces/interface/statistics/in_octets (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_octets() directly.

    YANG Description: The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_octets must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_octets(self):
    self.__in_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_unicast_pkts(self):
    """
    Getter method for in_unicast_pkts, mapped from YANG variable /interfaces/interface/statistics/in_unicast_pkts (yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_unicast_pkts
      
  def _set_in_unicast_pkts(self, v, load=False):
    """
    Setter method for in_unicast_pkts, mapped from YANG variable /interfaces/interface/statistics/in_unicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_unicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_unicast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_unicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_unicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_unicast_pkts(self):
    self.__in_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_broadcast_pkts(self):
    """
    Getter method for in_broadcast_pkts, mapped from YANG variable /interfaces/interface/statistics/in_broadcast_pkts (yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a broadcast
address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_broadcast_pkts
      
  def _set_in_broadcast_pkts(self, v, load=False):
    """
    Setter method for in_broadcast_pkts, mapped from YANG variable /interfaces/interface/statistics/in_broadcast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_broadcast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_broadcast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a broadcast
address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_broadcast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_broadcast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_broadcast_pkts(self):
    self.__in_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_multicast_pkts(self):
    """
    Getter method for in_multicast_pkts, mapped from YANG variable /interfaces/interface/statistics/in_multicast_pkts (yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_multicast_pkts
      
  def _set_in_multicast_pkts(self, v, load=False):
    """
    Setter method for in_multicast_pkts, mapped from YANG variable /interfaces/interface/statistics/in_multicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_multicast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_multicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_multicast_pkts(self):
    self.__in_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_discards(self):
    """
    Getter method for in_discards, mapped from YANG variable /interfaces/interface/statistics/in_discards (yang:counter32)

    YANG Description: The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_discards
      
  def _set_in_discards(self, v, load=False):
    """
    Setter method for in_discards, mapped from YANG variable /interfaces/interface/statistics/in_discards (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_discards is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_discards() directly.

    YANG Description: The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_discards must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__in_discards = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_discards(self):
    self.__in_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_in_errors(self):
    """
    Getter method for in_errors, mapped from YANG variable /interfaces/interface/statistics/in_errors (yang:counter32)

    YANG Description: For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_errors
      
  def _set_in_errors(self, v, load=False):
    """
    Setter method for in_errors, mapped from YANG variable /interfaces/interface/statistics/in_errors (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_errors() directly.

    YANG Description: For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_errors must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__in_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_errors(self):
    self.__in_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_in_unknown_protos(self):
    """
    Getter method for in_unknown_protos, mapped from YANG variable /interfaces/interface/statistics/in_unknown_protos (yang:counter32)

    YANG Description: For packet-oriented interfaces, the number of packets
received via the interface that were discarded because
of an unknown or unsupported protocol.  For
character-oriented or fixed-length interfaces that
support protocol multiplexing, the number of
transmission units received via the interface that were
discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol
multiplexing, this counter is not present.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_unknown_protos
      
  def _set_in_unknown_protos(self, v, load=False):
    """
    Setter method for in_unknown_protos, mapped from YANG variable /interfaces/interface/statistics/in_unknown_protos (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_unknown_protos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_unknown_protos() directly.

    YANG Description: For packet-oriented interfaces, the number of packets
received via the interface that were discarded because
of an unknown or unsupported protocol.  For
character-oriented or fixed-length interfaces that
support protocol multiplexing, the number of
transmission units received via the interface that were
discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol
multiplexing, this counter is not present.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_unknown_protos must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__in_unknown_protos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_unknown_protos(self):
    self.__in_unknown_protos = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_out_octets(self):
    """
    Getter method for out_octets, mapped from YANG variable /interfaces/interface/statistics/out_octets (yang:counter64)

    YANG Description: The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_octets
      
  def _set_out_octets(self, v, load=False):
    """
    Setter method for out_octets, mapped from YANG variable /interfaces/interface/statistics/out_octets (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_octets() directly.

    YANG Description: The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_octets must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_octets(self):
    self.__out_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_unicast_pkts(self):
    """
    Getter method for out_unicast_pkts, mapped from YANG variable /interfaces/interface/statistics/out_unicast_pkts (yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_unicast_pkts
      
  def _set_out_unicast_pkts(self, v, load=False):
    """
    Setter method for out_unicast_pkts, mapped from YANG variable /interfaces/interface/statistics/out_unicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_unicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_unicast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_unicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_unicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_unicast_pkts(self):
    self.__out_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_broadcast_pkts(self):
    """
    Getter method for out_broadcast_pkts, mapped from YANG variable /interfaces/interface/statistics/out_broadcast_pkts (yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
broadcast address at this sub-layer, including those
that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_broadcast_pkts
      
  def _set_out_broadcast_pkts(self, v, load=False):
    """
    Setter method for out_broadcast_pkts, mapped from YANG variable /interfaces/interface/statistics/out_broadcast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_broadcast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_broadcast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
broadcast address at this sub-layer, including those
that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_broadcast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_broadcast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_broadcast_pkts(self):
    self.__out_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_multicast_pkts(self):
    """
    Getter method for out_multicast_pkts, mapped from YANG variable /interfaces/interface/statistics/out_multicast_pkts (yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_multicast_pkts
      
  def _set_out_multicast_pkts(self, v, load=False):
    """
    Setter method for out_multicast_pkts, mapped from YANG variable /interfaces/interface/statistics/out_multicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_multicast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_multicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_multicast_pkts(self):
    self.__out_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_discards(self):
    """
    Getter method for out_discards, mapped from YANG variable /interfaces/interface/statistics/out_discards (yang:counter32)

    YANG Description: The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_discards
      
  def _set_out_discards(self, v, load=False):
    """
    Setter method for out_discards, mapped from YANG variable /interfaces/interface/statistics/out_discards (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_discards is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_discards() directly.

    YANG Description: The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_discards must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__out_discards = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_discards(self):
    self.__out_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_out_errors(self):
    """
    Getter method for out_errors, mapped from YANG variable /interfaces/interface/statistics/out_errors (yang:counter32)

    YANG Description: For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_errors
      
  def _set_out_errors(self, v, load=False):
    """
    Setter method for out_errors, mapped from YANG variable /interfaces/interface/statistics/out_errors (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_errors() directly.

    YANG Description: For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_errors must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__out_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_errors(self):
    self.__out_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)

  discontinuity_time = __builtin__.property(_get_discontinuity_time)
  in_octets = __builtin__.property(_get_in_octets)
  in_unicast_pkts = __builtin__.property(_get_in_unicast_pkts)
  in_broadcast_pkts = __builtin__.property(_get_in_broadcast_pkts)
  in_multicast_pkts = __builtin__.property(_get_in_multicast_pkts)
  in_discards = __builtin__.property(_get_in_discards)
  in_errors = __builtin__.property(_get_in_errors)
  in_unknown_protos = __builtin__.property(_get_in_unknown_protos)
  out_octets = __builtin__.property(_get_out_octets)
  out_unicast_pkts = __builtin__.property(_get_out_unicast_pkts)
  out_broadcast_pkts = __builtin__.property(_get_out_broadcast_pkts)
  out_multicast_pkts = __builtin__.property(_get_out_multicast_pkts)
  out_discards = __builtin__.property(_get_out_discards)
  out_errors = __builtin__.property(_get_out_errors)


  _pyangbind_elements = OrderedDict([('discontinuity_time', discontinuity_time), ('in_octets', in_octets), ('in_unicast_pkts', in_unicast_pkts), ('in_broadcast_pkts', in_broadcast_pkts), ('in_multicast_pkts', in_multicast_pkts), ('in_discards', in_discards), ('in_errors', in_errors), ('in_unknown_protos', in_unknown_protos), ('out_octets', out_octets), ('out_unicast_pkts', out_unicast_pkts), ('out_broadcast_pkts', out_broadcast_pkts), ('out_multicast_pkts', out_multicast_pkts), ('out_discards', out_discards), ('out_errors', out_errors), ])


class yc_queue_ietf_interfaces__interfaces_interface_tm_root_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/tm-root/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of queues.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_queue_id','__bac_name','__priority','__weight','__shaper_name','__pre_emption',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-weight', is_config=True)
    self.__pre_emption = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='boolean', is_config=True)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-priority', is_config=True)
    self.__bac_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)
    self.__local_queue_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'tm-root', u'queue']

  def _get_local_queue_id(self):
    """
    Getter method for local_queue_id, mapped from YANG variable /interfaces/interface/tm_root/queue/local_queue_id (queue-id)

    YANG Description: The identification of a queue within the context of this
list.
    """
    return self.__local_queue_id
      
  def _set_local_queue_id(self, v, load=False):
    """
    Setter method for local_queue_id, mapped from YANG variable /interfaces/interface/tm_root/queue/local_queue_id (queue-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_queue_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_queue_id() directly.

    YANG Description: The identification of a queue within the context of this
list.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_queue_id must be of a type compatible with queue-id""",
          'defined-type': "bbf-qos-traffic-mngt:queue-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)""",
        })

    self.__local_queue_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_queue_id(self):
    self.__local_queue_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='queue-id', is_config=True)


  def _get_bac_name(self):
    """
    Getter method for bac_name, mapped from YANG variable /interfaces/interface/tm_root/queue/bac_name (leafref)

    YANG Description: The name of a referenced BAC entry.
    """
    return self.__bac_name
      
  def _set_bac_name(self, v, load=False):
    """
    Setter method for bac_name, mapped from YANG variable /interfaces/interface/tm_root/queue/bac_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bac_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bac_name() directly.

    YANG Description: The name of a referenced BAC entry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bac_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)""",
        })

    self.__bac_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bac_name(self):
    self.__bac_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /interfaces/interface/tm_root/queue/priority (scheduling-priority)

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /interfaces/interface/tm_root/queue/priority (scheduling-priority)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-priority', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with scheduling-priority""",
          'defined-type': "bbf-qos-traffic-mngt:scheduling-priority",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-priority', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-priority', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /interfaces/interface/tm_root/queue/weight (scheduling-weight)

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /interfaces/interface/tm_root/queue/weight (scheduling-weight)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-weight', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with scheduling-weight""",
          'defined-type': "bbf-qos-traffic-mngt:scheduling-weight",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-weight', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='scheduling-weight', is_config=True)


  def _get_shaper_name(self):
    """
    Getter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/queue/shaper_name (leafref)

    YANG Description: An absolute reference to a shaper profile.
    """
    return self.__shaper_name
      
  def _set_shaper_name(self, v, load=False):
    """
    Setter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/queue/shaper_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shaper_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shaper_name() directly.

    YANG Description: An absolute reference to a shaper profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shaper_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)""",
        })

    self.__shaper_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shaper_name(self):
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)


  def _get_pre_emption(self):
    """
    Getter method for pre_emption, mapped from YANG variable /interfaces/interface/tm_root/queue/pre_emption (boolean)

    YANG Description: Indicates whether the transmission of a packets from this
queue can be interrupted in favor of packets from a higher
priority queue.
    """
    return self.__pre_emption
      
  def _set_pre_emption(self, v, load=False):
    """
    Setter method for pre_emption, mapped from YANG variable /interfaces/interface/tm_root/queue/pre_emption (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pre_emption is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pre_emption() directly.

    YANG Description: Indicates whether the transmission of a packets from this
queue can be interrupted in favor of packets from a higher
priority queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pre_emption must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='boolean', is_config=True)""",
        })

    self.__pre_emption = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pre_emption(self):
    self.__pre_emption = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='boolean', is_config=True)

  local_queue_id = __builtin__.property(_get_local_queue_id, _set_local_queue_id)
  bac_name = __builtin__.property(_get_bac_name, _set_bac_name)
  priority = __builtin__.property(_get_priority, _set_priority)
  weight = __builtin__.property(_get_weight, _set_weight)
  shaper_name = __builtin__.property(_get_shaper_name, _set_shaper_name)
  pre_emption = __builtin__.property(_get_pre_emption, _set_pre_emption)

  __choices__ = {u'queue-scheduling-cfg-type': {u'inline': [u'priority', u'weight', u'shaper_name']}, u'children-type': {u'queues': [u'local_queue_id', u'bac_name', u'pre_emption']}}
  _pyangbind_elements = OrderedDict([('local_queue_id', local_queue_id), ('bac_name', bac_name), ('priority', priority), ('weight', weight), ('shaper_name', shaper_name), ('pre_emption', pre_emption), ])


class yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_child_scheduler_nodes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/tm-root/scheduler-node/child-scheduler-nodes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Provides a child scheduler nodes list and related
scheduling data.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__priority','__weight',)

  _yang_name = 'child-scheduler-nodes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'tm-root', u'scheduler-node', u'child-scheduler-nodes']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes/name (leafref)

    YANG Description: The name of the referenced scheduling-nodes entry.
The child scheduler nodes must locate on the same
Traffic Management (TM) root with the parent
scheduler node.

The scheduling level of the child scheduler node
must be higher than the scheduling level of the
parent scheduler node.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the referenced scheduling-nodes entry.
The child scheduler nodes must locate on the same
Traffic Management (TM) root with the parent
scheduler node.

The scheduling level of the child scheduler node
must be higher than the scheduling level of the
parent scheduler node.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes/priority (scheduling-priority)

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes/priority (scheduling-priority)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with scheduling-priority""",
          'defined-type': "bbf-qos-enhanced-scheduling:scheduling-priority",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes/weight (scheduling-weight)

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes/weight (scheduling-weight)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with scheduling-weight""",
          'defined-type': "bbf-qos-enhanced-scheduling:scheduling-weight",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  priority = __builtin__.property(_get_priority, _set_priority)
  weight = __builtin__.property(_get_weight, _set_weight)

  __choices__ = {u'scheduling-type': {u'inline': [u'priority', u'weight']}, u'children-type': {u'scheduler-node': [u'name']}}
  _pyangbind_elements = OrderedDict([('name', name), ('priority', priority), ('weight', weight), ])


class yc_queue_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/tm-root/scheduler-node/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of queues.
  """
  __slots__ = ('_path_helper', '_extmethods', '__local_queue_id','__bac_name','__priority','__weight','__shaper_name','__pre_emption',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)
    self.__pre_emption = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)
    self.__bac_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    self.__local_queue_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='queue-id', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'tm-root', u'scheduler-node', u'queue']

  def _get_local_queue_id(self):
    """
    Getter method for local_queue_id, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/local_queue_id (queue-id)

    YANG Description: The identification of a queue within the context of this
list.
    """
    return self.__local_queue_id
      
  def _set_local_queue_id(self, v, load=False):
    """
    Setter method for local_queue_id, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/local_queue_id (queue-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_queue_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_queue_id() directly.

    YANG Description: The identification of a queue within the context of this
list.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='queue-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_queue_id must be of a type compatible with queue-id""",
          'defined-type': "bbf-qos-enhanced-scheduling:queue-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='queue-id', is_config=True)""",
        })

    self.__local_queue_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_queue_id(self):
    self.__local_queue_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="local-queue-id", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='queue-id', is_config=True)


  def _get_bac_name(self):
    """
    Getter method for bac_name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/bac_name (leafref)

    YANG Description: The name of a referenced BAC entry.
    """
    return self.__bac_name
      
  def _set_bac_name(self, v, load=False):
    """
    Setter method for bac_name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/bac_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bac_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bac_name() directly.

    YANG Description: The name of a referenced BAC entry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bac_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__bac_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bac_name(self):
    self.__bac_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="bac-name", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/priority (scheduling-priority)

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/priority (scheduling-priority)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with scheduling-priority""",
          'defined-type': "bbf-qos-enhanced-scheduling:scheduling-priority",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/weight (scheduling-weight)

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/weight (scheduling-weight)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with scheduling-weight""",
          'defined-type': "bbf-qos-enhanced-scheduling:scheduling-weight",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)


  def _get_shaper_name(self):
    """
    Getter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/shaper_name (leafref)

    YANG Description: An absolute reference to a shaper profile.
    """
    return self.__shaper_name
      
  def _set_shaper_name(self, v, load=False):
    """
    Setter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/shaper_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shaper_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shaper_name() directly.

    YANG Description: An absolute reference to a shaper profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shaper_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__shaper_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shaper_name(self):
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'queue-scheduling-cfg-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)


  def _get_pre_emption(self):
    """
    Getter method for pre_emption, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/pre_emption (boolean)

    YANG Description: Indicates whether the transmission of a packets from this
queue can be interrupted in favor of packets from a higher
priority queue.
    """
    return self.__pre_emption
      
  def _set_pre_emption(self, v, load=False):
    """
    Setter method for pre_emption, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue/pre_emption (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pre_emption is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pre_emption() directly.

    YANG Description: Indicates whether the transmission of a packets from this
queue can be interrupted in favor of packets from a higher
priority queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pre_emption must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)""",
        })

    self.__pre_emption = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pre_emption(self):
    self.__pre_emption = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pre-emption", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)

  local_queue_id = __builtin__.property(_get_local_queue_id, _set_local_queue_id)
  bac_name = __builtin__.property(_get_bac_name, _set_bac_name)
  priority = __builtin__.property(_get_priority, _set_priority)
  weight = __builtin__.property(_get_weight, _set_weight)
  shaper_name = __builtin__.property(_get_shaper_name, _set_shaper_name)
  pre_emption = __builtin__.property(_get_pre_emption, _set_pre_emption)

  __choices__ = {u'queue-scheduling-cfg-type': {u'inline': [u'priority', u'weight', u'shaper_name']}, u'children-type': {u'queue': [u'local_queue_id', u'bac_name', u'pre_emption']}}
  _pyangbind_elements = OrderedDict([('local_queue_id', local_queue_id), ('bac_name', bac_name), ('priority', priority), ('weight', weight), ('shaper_name', shaper_name), ('pre_emption', pre_emption), ])


class yc_scheduler_node_ietf_interfaces__interfaces_interface_tm_root_scheduler_node(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/tm-root/scheduler-node. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of schedulers. A scheduler will be at a position in
a hierarchy as specified through references. A particular
scheduler will get its input from its childs from which it
merges the traffic into a single output stream. This output
can be shaped if a reference to a shaper-profile is
configured.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__description','__scheduling_level','__shaper_name','__child_scheduler_nodes','__contains_queues','__queue',)

  _yang_name = 'scheduler-node'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)
    self.__scheduling_level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scheduling-level", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='uint8', is_config=True)
    self.__queue = YANGDynClass(base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    self.__child_scheduler_nodes = YANGDynClass(base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    self.__contains_queues = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="contains-queues", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)
    self.__description = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="description", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'tm-root', u'scheduler-node']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/name (bbf-yang:string-ascii64)

    YANG Description: A name of scheduler-node.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/name (bbf-yang:string-ascii64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: A name of scheduler-node.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with bbf-yang:string-ascii64""",
          'defined-type': "bbf-yang:string-ascii64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/description (bbf-yang:string-ascii64)

    YANG Description: A free format description assigned to this scheduler.
It can be used to identify the purpose of the
scheduler instance in the hierarchy. For example, the
description could be the name of an interface in the
hierarchy of an interface stack.
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/description (bbf-yang:string-ascii64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A free format description assigned to this scheduler.
It can be used to identify the purpose of the
scheduler instance in the hierarchy. For example, the
description could be the name of an interface in the
hierarchy of an interface stack.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="description", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with bbf-yang:string-ascii64""",
          'defined-type': "bbf-yang:string-ascii64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="description", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'[ -~]*', u'length': [u'1..64']}), is_leaf=True, yang_name="description", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='bbf-yang:string-ascii64', is_config=True)


  def _get_scheduling_level(self):
    """
    Getter method for scheduling_level, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/scheduling_level (uint8)

    YANG Description: The level of a scheduler helps in organizing a hierarchy.
The requirement is that the scheduling level of a parent
must be lower than the scheduling-level of its referenced
children.
    """
    return self.__scheduling_level
      
  def _set_scheduling_level(self, v, load=False):
    """
    Setter method for scheduling_level, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/scheduling_level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduling_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduling_level() directly.

    YANG Description: The level of a scheduler helps in organizing a hierarchy.
The requirement is that the scheduling level of a parent
must be lower than the scheduling-level of its referenced
children.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scheduling-level", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduling_level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scheduling-level", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='uint8', is_config=True)""",
        })

    self.__scheduling_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduling_level(self):
    self.__scheduling_level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="scheduling-level", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='uint8', is_config=True)


  def _get_shaper_name(self):
    """
    Getter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/shaper_name (leafref)

    YANG Description: An absolute reference to a shaper profile.
    """
    return self.__shaper_name
      
  def _set_shaper_name(self, v, load=False):
    """
    Setter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/shaper_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shaper_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shaper_name() directly.

    YANG Description: An absolute reference to a shaper profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shaper_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__shaper_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shaper_name(self):
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)


  def _get_child_scheduler_nodes(self):
    """
    Getter method for child_scheduler_nodes, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes (list)

    YANG Description: Provides a child scheduler nodes list and related
scheduling data.
    """
    return self.__child_scheduler_nodes
      
  def _set_child_scheduler_nodes(self, v, load=False):
    """
    Setter method for child_scheduler_nodes, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/child_scheduler_nodes (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler_nodes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler_nodes() directly.

    YANG Description: Provides a child scheduler nodes list and related
scheduling data.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler_nodes must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)""",
        })

    self.__child_scheduler_nodes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler_nodes(self):
    self.__child_scheduler_nodes = YANGDynClass(base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)


  def _get_contains_queues(self):
    """
    Getter method for contains_queues, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/contains_queues (boolean)

    YANG Description: Indicates the scheduler contains queues.
    """
    return self.__contains_queues
      
  def _set_contains_queues(self, v, load=False):
    """
    Setter method for contains_queues, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/contains_queues (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_contains_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_contains_queues() directly.

    YANG Description: Indicates the scheduler contains queues.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="contains-queues", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """contains_queues must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="contains-queues", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)""",
        })

    self.__contains_queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_contains_queues(self):
    self.__contains_queues = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="contains-queues", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='boolean', is_config=True)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue (list)

    YANG Description: A list of queues.
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: A list of queues.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_scheduler_node_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=(u'children-type', u'scheduler-node')), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queue'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  scheduling_level = __builtin__.property(_get_scheduling_level, _set_scheduling_level)
  shaper_name = __builtin__.property(_get_shaper_name, _set_shaper_name)
  child_scheduler_nodes = __builtin__.property(_get_child_scheduler_nodes, _set_child_scheduler_nodes)
  contains_queues = __builtin__.property(_get_contains_queues, _set_contains_queues)
  queue = __builtin__.property(_get_queue, _set_queue)

  __choices__ = {u'children-type': {u'queue': [u'contains_queues', u'queue'], u'scheduler-node': [u'name', u'description', u'scheduling_level', u'shaper_name', u'child_scheduler_nodes']}}
  _pyangbind_elements = OrderedDict([('name', name), ('description', description), ('scheduling_level', scheduling_level), ('shaper_name', shaper_name), ('child_scheduler_nodes', child_scheduler_nodes), ('contains_queues', contains_queues), ('queue', queue), ])


class yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_child_scheduler_nodes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/tm-root/child-scheduler-nodes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Provides the list of direct child scheduler nodes of the
traffic management root.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__priority','__weight',)

  _yang_name = 'child-scheduler-nodes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'tm-root', u'child-scheduler-nodes']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes/name (leafref)

    YANG Description: The first set of schedulers that are scheduled from the
traffic management root.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The first set of schedulers that are scheduled from the
traffic management root.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes/priority (scheduling-priority)

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes/priority (scheduling-priority)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: The priority used to schedule packets from a queue or
scheduler, relative to the priority assigned to other queues
or schedulers that are defined in the same traffic scheduling
context. For example the set of queues defined for a
particular interface form the context for scheduling outgoing
traffic to this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with scheduling-priority""",
          'defined-type': "bbf-qos-enhanced-scheduling:scheduling-priority",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..7']}), is_leaf=True, yang_name="priority", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-priority', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes/weight (scheduling-weight)

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes/weight (scheduling-weight)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: Queues or schedulers that are defined in a particular
context, e.g. queues defined to schedule outgoing traffic to
an interface, can have the same priority. The weight defines
the the portion of traffic that will be taken from this queue
or scheduler by comparing the weight of this queue or
scheduler against the sum of the weights of all queues or
schedulers with the same scope and the same priority.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with scheduling-weight""",
          'defined-type': "bbf-qos-enhanced-scheduling:scheduling-weight",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="weight", parent=self, choice=(u'scheduling-type', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='scheduling-weight', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  priority = __builtin__.property(_get_priority, _set_priority)
  weight = __builtin__.property(_get_weight, _set_weight)

  __choices__ = {u'scheduling-type': {u'inline': [u'priority', u'weight']}, u'children-type': {u'scheduler-node': [u'name']}}
  _pyangbind_elements = OrderedDict([('name', name), ('priority', priority), ('weight', weight), ])


class yc_tm_root_ietf_interfaces__interfaces_interface_tm_root(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/tm-root. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The attributes of the root in the scheduling tree.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue','__scheduler_node','__child_scheduler_nodes','__tc_id_2_queue_id_mapping_profile_name','__shaper_name',)

  _yang_name = 'tm-root'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=False), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    self.__scheduler_node = YANGDynClass(base=YANGListType("name",yc_scheduler_node_ietf_interfaces__interfaces_interface_tm_root_scheduler_node, yang_name="scheduler-node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="scheduler-node", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    self.__tc_id_2_queue_id_mapping_profile_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="tc-id-2-queue-id-mapping-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)
    self.__child_scheduler_nodes = YANGDynClass(base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'tm-root']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /interfaces/interface/tm_root/queue (list)

    YANG Description: A list of queues.
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /interfaces/interface/tm_root/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: A list of queues.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=False), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=False), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("local_queue_id",yc_queue_ietf_interfaces__interfaces_interface_tm_root_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='local-queue-id', extensions=None, choice=False), is_container='list', yang_name="queue", parent=self, choice=(u'children-type', u'queues'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='list', is_config=True)


  def _get_scheduler_node(self):
    """
    Getter method for scheduler_node, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node (list)

    YANG Description: A list of schedulers. A scheduler will be at a position in
a hierarchy as specified through references. A particular
scheduler will get its input from its childs from which it
merges the traffic into a single output stream. This output
can be shaped if a reference to a shaper-profile is
configured.
    """
    return self.__scheduler_node
      
  def _set_scheduler_node(self, v, load=False):
    """
    Setter method for scheduler_node, mapped from YANG variable /interfaces/interface/tm_root/scheduler_node (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_node is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_node() directly.

    YANG Description: A list of schedulers. A scheduler will be at a position in
a hierarchy as specified through references. A particular
scheduler will get its input from its childs from which it
merges the traffic into a single output stream. This output
can be shaped if a reference to a shaper-profile is
configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_scheduler_node_ietf_interfaces__interfaces_interface_tm_root_scheduler_node, yang_name="scheduler-node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="scheduler-node", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_node must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_scheduler_node_ietf_interfaces__interfaces_interface_tm_root_scheduler_node, yang_name="scheduler-node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="scheduler-node", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)""",
        })

    self.__scheduler_node = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_node(self):
    self.__scheduler_node = YANGDynClass(base=YANGListType("name",yc_scheduler_node_ietf_interfaces__interfaces_interface_tm_root_scheduler_node, yang_name="scheduler-node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="scheduler-node", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)


  def _get_child_scheduler_nodes(self):
    """
    Getter method for child_scheduler_nodes, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes (list)

    YANG Description: Provides the list of direct child scheduler nodes of the
traffic management root.
    """
    return self.__child_scheduler_nodes
      
  def _set_child_scheduler_nodes(self, v, load=False):
    """
    Setter method for child_scheduler_nodes, mapped from YANG variable /interfaces/interface/tm_root/child_scheduler_nodes (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler_nodes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler_nodes() directly.

    YANG Description: Provides the list of direct child scheduler nodes of the
traffic management root.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler_nodes must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)""",
        })

    self.__child_scheduler_nodes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler_nodes(self):
    self.__child_scheduler_nodes = YANGDynClass(base=YANGListType("name",yc_child_scheduler_nodes_ietf_interfaces__interfaces_interface_tm_root_child_scheduler_nodes, yang_name="child-scheduler-nodes", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None, choice=False), is_container='list', yang_name="child-scheduler-nodes", parent=self, choice=(u'children-type', u'scheduler-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='list', is_config=True)


  def _get_tc_id_2_queue_id_mapping_profile_name(self):
    """
    Getter method for tc_id_2_queue_id_mapping_profile_name, mapped from YANG variable /interfaces/interface/tm_root/tc_id_2_queue_id_mapping_profile_name (leafref)

    YANG Description: The name of a referenced traffic-class-id to queue-id mapping
profile.
    """
    return self.__tc_id_2_queue_id_mapping_profile_name
      
  def _set_tc_id_2_queue_id_mapping_profile_name(self, v, load=False):
    """
    Setter method for tc_id_2_queue_id_mapping_profile_name, mapped from YANG variable /interfaces/interface/tm_root/tc_id_2_queue_id_mapping_profile_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tc_id_2_queue_id_mapping_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tc_id_2_queue_id_mapping_profile_name() directly.

    YANG Description: The name of a referenced traffic-class-id to queue-id mapping
profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="tc-id-2-queue-id-mapping-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tc_id_2_queue_id_mapping_profile_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="tc-id-2-queue-id-mapping-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)""",
        })

    self.__tc_id_2_queue_id_mapping_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tc_id_2_queue_id_mapping_profile_name(self):
    self.__tc_id_2_queue_id_mapping_profile_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="tc-id-2-queue-id-mapping-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='leafref', is_config=True)


  def _get_shaper_name(self):
    """
    Getter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/shaper_name (leafref)

    YANG Description: An absolute reference to a shaper profile.
    """
    return self.__shaper_name
      
  def _set_shaper_name(self, v, load=False):
    """
    Setter method for shaper_name, mapped from YANG variable /interfaces/interface/tm_root/shaper_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shaper_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shaper_name() directly.

    YANG Description: An absolute reference to a shaper profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shaper_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)""",
        })

    self.__shaper_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shaper_name(self):
    self.__shaper_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="shaper-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-shaping', defining_module='bbf-qos-shaping', yang_type='leafref', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)
  scheduler_node = __builtin__.property(_get_scheduler_node, _set_scheduler_node)
  child_scheduler_nodes = __builtin__.property(_get_child_scheduler_nodes, _set_child_scheduler_nodes)
  tc_id_2_queue_id_mapping_profile_name = __builtin__.property(_get_tc_id_2_queue_id_mapping_profile_name, _set_tc_id_2_queue_id_mapping_profile_name)
  shaper_name = __builtin__.property(_get_shaper_name, _set_shaper_name)

  __choices__ = {u'children-type': {u'queues': [u'queue'], u'scheduler-node': [u'scheduler_node', u'child_scheduler_nodes']}}
  _pyangbind_elements = OrderedDict([('queue', queue), ('scheduler_node', scheduler_node), ('child_scheduler_nodes', child_scheduler_nodes), ('tc_id_2_queue_id_mapping_profile_name', tc_id_2_queue_id_mapping_profile_name), ('shaper_name', shaper_name), ])


class yc_egress_tm_objects_ietf_interfaces__interfaces_interface_egress_tm_objects(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface/egress-tm-objects. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Defines the traffic management node(s), to which the
egress traffic of the interface shall be directed to.
  """
  __slots__ = ('_path_helper', '_extmethods', '__root_if_name','__scheduler_node_name',)

  _yang_name = 'egress-tm-objects'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__root_if_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-if-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    self.__scheduler_node_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="scheduler-node-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface', u'egress-tm-objects']

  def _get_root_if_name(self):
    """
    Getter method for root_if_name, mapped from YANG variable /interfaces/interface/egress_tm_objects/root_if_name (leafref)

    YANG Description: The name of the referenced interface that is the traffic
management root of a scheduling hierarchy. This interface
must be a lower layer interface of the interface that
contains the reference to it. However, due to interface
stacking it is not necessarily the adjacent lower layer
interface.
    """
    return self.__root_if_name
      
  def _set_root_if_name(self, v, load=False):
    """
    Setter method for root_if_name, mapped from YANG variable /interfaces/interface/egress_tm_objects/root_if_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_root_if_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_root_if_name() directly.

    YANG Description: The name of the referenced interface that is the traffic
management root of a scheduling hierarchy. This interface
must be a lower layer interface of the interface that
contains the reference to it. However, due to interface
stacking it is not necessarily the adjacent lower layer
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="root-if-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """root_if_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-if-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__root_if_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_root_if_name(self):
    self.__root_if_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-if-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)


  def _get_scheduler_node_name(self):
    """
    Getter method for scheduler_node_name, mapped from YANG variable /interfaces/interface/egress_tm_objects/scheduler_node_name (leafref)

    YANG Description: The name of the referenced scheduling-nodes entry.
    """
    return self.__scheduler_node_name
      
  def _set_scheduler_node_name(self, v, load=False):
    """
    Setter method for scheduler_node_name, mapped from YANG variable /interfaces/interface/egress_tm_objects/scheduler_node_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_node_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_node_name() directly.

    YANG Description: The name of the referenced scheduling-nodes entry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="scheduler-node-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_node_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="scheduler-node-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)""",
        })

    self.__scheduler_node_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_node_name(self):
    self.__scheduler_node_name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="scheduler-node-name", parent=self, choice=(u'select-tm-objects-method', u'scheduler'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='leafref', is_config=True)

  root_if_name = __builtin__.property(_get_root_if_name, _set_root_if_name)
  scheduler_node_name = __builtin__.property(_get_scheduler_node_name, _set_scheduler_node_name)

  __choices__ = {u'select-tm-objects-method': {u'scheduler': [u'root_if_name', u'scheduler_node_name']}}
  _pyangbind_elements = OrderedDict([('root_if_name', root_if_name), ('scheduler_node_name', scheduler_node_name), ])


class yc_interface_ietf_interfaces__interfaces_interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of interfaces on the device.

The status of an interface is available in this list in the
operational state.  If the configuration of a
system-controlled interface cannot be used by the system
(e.g., the interface hardware present does not match the
interface type), then the configuration is not applied to
the system-controlled interface shown in the operational
state.  If the configuration of a user-controlled interface
cannot be used by the system, the configured interface is
not instantiated in the operational state.

System-controlled interfaces created by the system are
always present in this list in the operational state,
whether or not they are configured.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__description','__type','__enabled','__link_up_down_trap_enable','__admin_status','__oper_status','__last_change','__if_index','__phys_address','__higher_layer_if','__lower_layer_if','__speed','__statistics','__tm_root','__egress_tm_objects',)

  _yang_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__egress_tm_objects = YANGDynClass(base=yc_egress_tm_objects_ietf_interfaces__interfaces_interface_egress_tm_objects, is_container='container', yang_name="egress-tm-objects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='container', is_config=True)
    self.__statistics = YANGDynClass(base=yc_statistics_ietf_interfaces__interfaces_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)
    self.__higher_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)
    self.__last_change = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    self.__tm_root = YANGDynClass(base=yc_tm_root_ietf_interfaces__interfaces_interface_tm_root, is_container='container', yang_name="tm-root", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='boolean', is_config=True)
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    self.__link_up_down_trap_enable = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {u'value': 2}, u'enabled': {u'value': 1}},), is_leaf=True, yang_name="link-up-down-trap-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=True)
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    self.__phys_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)
    self.__lower_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=True)
    self.__speed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces', u'interface']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces/interface/name (string)

    YANG Description: The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.

If a client tries to create configuration for a
system-controlled interface that is not present in the
operational state, the server MAY reject the request if
the implementation does not support pre-provisioning of
interfaces or if the name refers to an interface that can
never exist in the system.  A Network Configuration
Protocol (NETCONF) server MUST reply with an rpc-error
with the error-tag 'invalid-value' in this case.

If the device supports pre-provisioning of interface
configuration, the 'pre-provisioning' feature is
advertised.

If the device allows arbitrarily named user-controlled
interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
operational state.

A server implementation MAY map this leaf to the ifName
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifName.  The definition of
such a mechanism is outside the scope of this document.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces/interface/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.

If a client tries to create configuration for a
system-controlled interface that is not present in the
operational state, the server MAY reject the request if
the implementation does not support pre-provisioning of
interfaces or if the name refers to an interface that can
never exist in the system.  A Network Configuration
Protocol (NETCONF) server MUST reply with an rpc-error
with the error-tag 'invalid-value' in this case.

If the device supports pre-provisioning of interface
configuration, the 'pre-provisioning' feature is
advertised.

If the device allows arbitrarily named user-controlled
interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
operational state.

A server implementation MAY map this leaf to the ifName
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifName.  The definition of
such a mechanism is outside the scope of this document.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /interfaces/interface/description (string)

    YANG Description: A textual description of the interface.

A server implementation MAY map this leaf to the ifAlias
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifAlias.  The definition of
such a mechanism is outside the scope of this document.

Since ifAlias is defined to be stored in non-volatile
storage, the MIB implementation MUST map ifAlias to the
value of 'description' in the persistently stored
configuration.
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /interfaces/interface/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: A textual description of the interface.

A server implementation MAY map this leaf to the ifAlias
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifAlias.  The definition of
such a mechanism is outside the scope of this document.

Since ifAlias is defined to be stored in non-volatile
storage, the MIB implementation MUST map ifAlias to the
value of 'description' in the persistently stored
configuration.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /interfaces/interface/type (identityref)

    YANG Description: The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /interfaces/interface/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "ietf-interfaces:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=True)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /interfaces/interface/enabled (boolean)

    YANG Description: This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the intended configuration to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.

Changes in this leaf in the intended configuration are
reflected in ifAdminStatus.
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /interfaces/interface/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the intended configuration to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.

Changes in this leaf in the intended configuration are
reflected in ifAdminStatus.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='boolean', is_config=True)


  def _get_link_up_down_trap_enable(self):
    """
    Getter method for link_up_down_trap_enable, mapped from YANG variable /interfaces/interface/link_up_down_trap_enable (enumeration)

    YANG Description: Controls whether linkUp/linkDown SNMP notifications
should be generated for this interface.

If this node is not configured, the value 'enabled' is
operationally used by the server for interfaces that do
not operate on top of any other interface (i.e., there are
no 'lower-layer-if' entries), and 'disabled' otherwise.
    """
    return self.__link_up_down_trap_enable
      
  def _set_link_up_down_trap_enable(self, v, load=False):
    """
    Setter method for link_up_down_trap_enable, mapped from YANG variable /interfaces/interface/link_up_down_trap_enable (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_up_down_trap_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_up_down_trap_enable() directly.

    YANG Description: Controls whether linkUp/linkDown SNMP notifications
should be generated for this interface.

If this node is not configured, the value 'enabled' is
operationally used by the server for interfaces that do
not operate on top of any other interface (i.e., there are
no 'lower-layer-if' entries), and 'disabled' otherwise.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {u'value': 2}, u'enabled': {u'value': 1}},), is_leaf=True, yang_name="link-up-down-trap-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_up_down_trap_enable must be of a type compatible with enumeration""",
          'defined-type': "ietf-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {u'value': 2}, u'enabled': {u'value': 1}},), is_leaf=True, yang_name="link-up-down-trap-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=True)""",
        })

    self.__link_up_down_trap_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_up_down_trap_enable(self):
    self.__link_up_down_trap_enable = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {u'value': 2}, u'enabled': {u'value': 1}},), is_leaf=True, yang_name="link-up-down-trap-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=True)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /interfaces/interface/admin_status (enumeration)

    YANG Description: The desired state of the interface.

This leaf has the same read semantics as ifAdminStatus.
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /interfaces/interface/admin_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.

    YANG Description: The desired state of the interface.

This leaf has the same read semantics as ifAdminStatus.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with enumeration""",
          'defined-type': "ietf-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)


  def _get_oper_status(self):
    """
    Getter method for oper_status, mapped from YANG variable /interfaces/interface/oper_status (enumeration)

    YANG Description: The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
    """
    return self.__oper_status
      
  def _set_oper_status(self, v, load=False):
    """
    Setter method for oper_status, mapped from YANG variable /interfaces/interface/oper_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_status() directly.

    YANG Description: The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_status must be of a type compatible with enumeration""",
          'defined-type': "ietf-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)""",
        })

    self.__oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_status(self):
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)


  def _get_last_change(self):
    """
    Getter method for last_change, mapped from YANG variable /interfaces/interface/last_change (yang:date-and-time)

    YANG Description: The time the interface entered its current operational
state.  If the current state was entered prior to the
last re-initialization of the local network management
subsystem, then this node is not present.
    """
    return self.__last_change
      
  def _set_last_change(self, v, load=False):
    """
    Setter method for last_change, mapped from YANG variable /interfaces/interface/last_change (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_change() directly.

    YANG Description: The time the interface entered its current operational
state.  If the current state was entered prior to the
last re-initialization of the local network management
subsystem, then this node is not present.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_change must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__last_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_change(self):
    self.__last_change = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)


  def _get_if_index(self):
    """
    Getter method for if_index, mapped from YANG variable /interfaces/interface/if_index (int32)

    YANG Description: The ifIndex value for the ifEntry represented by this
interface.
    """
    return self.__if_index
      
  def _set_if_index(self, v, load=False):
    """
    Setter method for if_index, mapped from YANG variable /interfaces/interface/if_index (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_index() directly.

    YANG Description: The ifIndex value for the ifEntry represented by this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_index must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)""",
        })

    self.__if_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_index(self):
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)


  def _get_phys_address(self):
    """
    Getter method for phys_address, mapped from YANG variable /interfaces/interface/phys_address (yang:phys-address)

    YANG Description: The interface's address at its protocol sub-layer.  For
example, for an 802.x interface, this object normally
contains a Media Access Control (MAC) address.  The
interface's media-specific modules must define the bit
and byte ordering and the format of the value of this
object.  For interfaces that do not have such an address
(e.g., a serial line), this node is not present.
    """
    return self.__phys_address
      
  def _set_phys_address(self, v, load=False):
    """
    Setter method for phys_address, mapped from YANG variable /interfaces/interface/phys_address (yang:phys-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_phys_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_phys_address() directly.

    YANG Description: The interface's address at its protocol sub-layer.  For
example, for an 802.x interface, this object normally
contains a Media Access Control (MAC) address.  The
interface's media-specific modules must define the bit
and byte ordering and the format of the value of this
object.  For interfaces that do not have such an address
(e.g., a serial line), this node is not present.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """phys_address must be of a type compatible with yang:phys-address""",
          'defined-type': "yang:phys-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)""",
        })

    self.__phys_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_phys_address(self):
    self.__phys_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)


  def _get_higher_layer_if(self):
    """
    Getter method for higher_layer_if, mapped from YANG variable /interfaces/interface/higher_layer_if (interface-ref)

    YANG Description: A list of references to interfaces layered on top of this
interface.
    """
    return self.__higher_layer_if
      
  def _set_higher_layer_if(self, v, load=False):
    """
    Setter method for higher_layer_if, mapped from YANG variable /interfaces/interface/higher_layer_if (interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_higher_layer_if is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_higher_layer_if() directly.

    YANG Description: A list of references to interfaces layered on top of this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """higher_layer_if must be of a type compatible with interface-ref""",
          'defined-type': "ietf-interfaces:interface-ref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)""",
        })

    self.__higher_layer_if = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_higher_layer_if(self):
    self.__higher_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)


  def _get_lower_layer_if(self):
    """
    Getter method for lower_layer_if, mapped from YANG variable /interfaces/interface/lower_layer_if (interface-ref)

    YANG Description: A list of references to interfaces layered underneath this
interface.
    """
    return self.__lower_layer_if
      
  def _set_lower_layer_if(self, v, load=False):
    """
    Setter method for lower_layer_if, mapped from YANG variable /interfaces/interface/lower_layer_if (interface-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lower_layer_if is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lower_layer_if() directly.

    YANG Description: A list of references to interfaces layered underneath this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lower_layer_if must be of a type compatible with interface-ref""",
          'defined-type': "ietf-interfaces:interface-ref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)""",
        })

    self.__lower_layer_if = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lower_layer_if(self):
    self.__lower_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-ref', is_config=False)


  def _get_speed(self):
    """
    Getter method for speed, mapped from YANG variable /interfaces/interface/speed (yang:gauge64)

    YANG Description: An estimate of the interface's current bandwidth in bits
per second.  For interfaces that do not vary in
bandwidth or for those where no accurate estimation can
be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.
    """
    return self.__speed
      
  def _set_speed(self, v, load=False):
    """
    Setter method for speed, mapped from YANG variable /interfaces/interface/speed (yang:gauge64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_speed() directly.

    YANG Description: An estimate of the interface's current bandwidth in bits
per second.  For interfaces that do not vary in
bandwidth or for those where no accurate estimation can
be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """speed must be of a type compatible with yang:gauge64""",
          'defined-type': "yang:gauge64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)""",
        })

    self.__speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_speed(self):
    self.__speed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)


  def _get_statistics(self):
    """
    Getter method for statistics, mapped from YANG variable /interfaces/interface/statistics (container)

    YANG Description: A collection of interface-related statistics objects.
    """
    return self.__statistics
      
  def _set_statistics(self, v, load=False):
    """
    Setter method for statistics, mapped from YANG variable /interfaces/interface/statistics (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics() directly.

    YANG Description: A collection of interface-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_statistics_ietf_interfaces__interfaces_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_statistics_ietf_interfaces__interfaces_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)""",
        })

    self.__statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics(self):
    self.__statistics = YANGDynClass(base=yc_statistics_ietf_interfaces__interfaces_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)


  def _get_tm_root(self):
    """
    Getter method for tm_root, mapped from YANG variable /interfaces/interface/tm_root (container)

    YANG Description: The attributes of the root in the scheduling tree.
    """
    return self.__tm_root
      
  def _set_tm_root(self, v, load=False):
    """
    Setter method for tm_root, mapped from YANG variable /interfaces/interface/tm_root (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tm_root is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tm_root() directly.

    YANG Description: The attributes of the root in the scheduling tree.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_tm_root_ietf_interfaces__interfaces_interface_tm_root, is_container='container', yang_name="tm-root", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tm_root must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_tm_root_ietf_interfaces__interfaces_interface_tm_root, is_container='container', yang_name="tm-root", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)""",
        })

    self.__tm_root = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tm_root(self):
    self.__tm_root = YANGDynClass(base=yc_tm_root_ietf_interfaces__interfaces_interface_tm_root, is_container='container', yang_name="tm-root", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-traffic-mngt', defining_module='bbf-qos-traffic-mngt', yang_type='container', is_config=True)


  def _get_egress_tm_objects(self):
    """
    Getter method for egress_tm_objects, mapped from YANG variable /interfaces/interface/egress_tm_objects (container)

    YANG Description: Defines the traffic management node(s), to which the
egress traffic of the interface shall be directed to.
    """
    return self.__egress_tm_objects
      
  def _set_egress_tm_objects(self, v, load=False):
    """
    Setter method for egress_tm_objects, mapped from YANG variable /interfaces/interface/egress_tm_objects (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress_tm_objects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress_tm_objects() directly.

    YANG Description: Defines the traffic management node(s), to which the
egress traffic of the interface shall be directed to.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_egress_tm_objects_ietf_interfaces__interfaces_interface_egress_tm_objects, is_container='container', yang_name="egress-tm-objects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress_tm_objects must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_egress_tm_objects_ietf_interfaces__interfaces_interface_egress_tm_objects, is_container='container', yang_name="egress-tm-objects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='container', is_config=True)""",
        })

    self.__egress_tm_objects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress_tm_objects(self):
    self.__egress_tm_objects = YANGDynClass(base=yc_egress_tm_objects_ietf_interfaces__interfaces_interface_egress_tm_objects, is_container='container', yang_name="egress-tm-objects", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:bbf:yang:bbf-qos-enhanced-scheduling', defining_module='bbf-qos-enhanced-scheduling', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  type = __builtin__.property(_get_type, _set_type)
  enabled = __builtin__.property(_get_enabled, _set_enabled)
  link_up_down_trap_enable = __builtin__.property(_get_link_up_down_trap_enable, _set_link_up_down_trap_enable)
  admin_status = __builtin__.property(_get_admin_status)
  oper_status = __builtin__.property(_get_oper_status)
  last_change = __builtin__.property(_get_last_change)
  if_index = __builtin__.property(_get_if_index)
  phys_address = __builtin__.property(_get_phys_address)
  higher_layer_if = __builtin__.property(_get_higher_layer_if)
  lower_layer_if = __builtin__.property(_get_lower_layer_if)
  speed = __builtin__.property(_get_speed)
  statistics = __builtin__.property(_get_statistics, _set_statistics)
  tm_root = __builtin__.property(_get_tm_root, _set_tm_root)
  egress_tm_objects = __builtin__.property(_get_egress_tm_objects, _set_egress_tm_objects)


  _pyangbind_elements = OrderedDict([('name', name), ('description', description), ('type', type), ('enabled', enabled), ('link_up_down_trap_enable', link_up_down_trap_enable), ('admin_status', admin_status), ('oper_status', oper_status), ('last_change', last_change), ('if_index', if_index), ('phys_address', phys_address), ('higher_layer_if', higher_layer_if), ('lower_layer_if', lower_layer_if), ('speed', speed), ('statistics', statistics), ('tm_root', tm_root), ('egress_tm_objects', egress_tm_objects), ])


class yc_interfaces_ietf_interfaces__interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Interface parameters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface',)

  _yang_name = 'interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /interfaces/interface (list)

    YANG Description: The list of interfaces on the device.

The status of an interface is available in this list in the
operational state.  If the configuration of a
system-controlled interface cannot be used by the system
(e.g., the interface hardware present does not match the
interface type), then the configuration is not applied to
the system-controlled interface shown in the operational
state.  If the configuration of a user-controlled interface
cannot be used by the system, the configured interface is
not instantiated in the operational state.

System-controlled interfaces created by the system are
always present in this list in the operational state,
whether or not they are configured.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /interfaces/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: The list of interfaces on the device.

The status of an interface is available in this list in the
operational state.  If the configuration of a
system-controlled interface cannot be used by the system
(e.g., the interface hardware present does not match the
interface type), then the configuration is not applied to
the system-controlled interface shown in the operational
state.  If the configuration of a user-controlled interface
cannot be used by the system, the configured interface is
not instantiated in the operational state.

System-controlled interfaces created by the system are
always present in this list in the operational state,
whether or not they are configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)


  _pyangbind_elements = OrderedDict([('interface', interface), ])


class yc_statistics_ietf_interfaces__interfaces_state_interface_statistics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces-state/interface/statistics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A collection of interface-related statistics objects.
  """
  __slots__ = ('_path_helper', '_extmethods', '__discontinuity_time','__in_octets','__in_unicast_pkts','__in_broadcast_pkts','__in_multicast_pkts','__in_discards','__in_errors','__in_unknown_protos','__out_octets','__out_unicast_pkts','__out_broadcast_pkts','__out_multicast_pkts','__out_discards','__out_errors',)

  _yang_name = 'statistics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__discontinuity_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    self.__in_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__in_unknown_protos = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    self.__out_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    self.__out_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces-state', u'interface', u'statistics']

  def _get_discontinuity_time(self):
    """
    Getter method for discontinuity_time, mapped from YANG variable /interfaces_state/interface/statistics/discontinuity_time (yang:date-and-time)

    YANG Description: The time on the most recent occasion at which any one or
more of this interface's counters suffered a
discontinuity.  If no such discontinuities have occurred
since the last re-initialization of the local management
subsystem, then this node contains the time the local
management subsystem re-initialized itself.
    """
    return self.__discontinuity_time
      
  def _set_discontinuity_time(self, v, load=False):
    """
    Setter method for discontinuity_time, mapped from YANG variable /interfaces_state/interface/statistics/discontinuity_time (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discontinuity_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discontinuity_time() directly.

    YANG Description: The time on the most recent occasion at which any one or
more of this interface's counters suffered a
discontinuity.  If no such discontinuities have occurred
since the last re-initialization of the local management
subsystem, then this node contains the time the local
management subsystem re-initialized itself.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discontinuity_time must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__discontinuity_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discontinuity_time(self):
    self.__discontinuity_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="discontinuity-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)


  def _get_in_octets(self):
    """
    Getter method for in_octets, mapped from YANG variable /interfaces_state/interface/statistics/in_octets (yang:counter64)

    YANG Description: The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_octets
      
  def _set_in_octets(self, v, load=False):
    """
    Setter method for in_octets, mapped from YANG variable /interfaces_state/interface/statistics/in_octets (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_octets() directly.

    YANG Description: The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_octets must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_octets(self):
    self.__in_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_unicast_pkts(self):
    """
    Getter method for in_unicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/in_unicast_pkts (yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.
Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_unicast_pkts
      
  def _set_in_unicast_pkts(self, v, load=False):
    """
    Setter method for in_unicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/in_unicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_unicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_unicast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.
Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_unicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_unicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_unicast_pkts(self):
    self.__in_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_broadcast_pkts(self):
    """
    Getter method for in_broadcast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/in_broadcast_pkts (yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a broadcast
address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_broadcast_pkts
      
  def _set_in_broadcast_pkts(self, v, load=False):
    """
    Setter method for in_broadcast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/in_broadcast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_broadcast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_broadcast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a broadcast
address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_broadcast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_broadcast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_broadcast_pkts(self):
    self.__in_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_multicast_pkts(self):
    """
    Getter method for in_multicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/in_multicast_pkts (yang:counter64)

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_multicast_pkts
      
  def _set_in_multicast_pkts(self, v, load=False):
    """
    Setter method for in_multicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/in_multicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_multicast_pkts() directly.

    YANG Description: The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_multicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__in_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_multicast_pkts(self):
    self.__in_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="in-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_in_discards(self):
    """
    Getter method for in_discards, mapped from YANG variable /interfaces_state/interface/statistics/in_discards (yang:counter32)

    YANG Description: The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_discards
      
  def _set_in_discards(self, v, load=False):
    """
    Setter method for in_discards, mapped from YANG variable /interfaces_state/interface/statistics/in_discards (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_discards is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_discards() directly.

    YANG Description: The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_discards must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__in_discards = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_discards(self):
    self.__in_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_in_errors(self):
    """
    Getter method for in_errors, mapped from YANG variable /interfaces_state/interface/statistics/in_errors (yang:counter32)

    YANG Description: For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_errors
      
  def _set_in_errors(self, v, load=False):
    """
    Setter method for in_errors, mapped from YANG variable /interfaces_state/interface/statistics/in_errors (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_errors() directly.

    YANG Description: For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_errors must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__in_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_errors(self):
    self.__in_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_in_unknown_protos(self):
    """
    Getter method for in_unknown_protos, mapped from YANG variable /interfaces_state/interface/statistics/in_unknown_protos (yang:counter32)

    YANG Description: For packet-oriented interfaces, the number of packets
received via the interface that were discarded because
of an unknown or unsupported protocol.  For
character-oriented or fixed-length interfaces that
support protocol multiplexing, the number of
transmission units received via the interface that were
discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol
multiplexing, this counter is not present.
Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__in_unknown_protos
      
  def _set_in_unknown_protos(self, v, load=False):
    """
    Setter method for in_unknown_protos, mapped from YANG variable /interfaces_state/interface/statistics/in_unknown_protos (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_unknown_protos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_unknown_protos() directly.

    YANG Description: For packet-oriented interfaces, the number of packets
received via the interface that were discarded because
of an unknown or unsupported protocol.  For
character-oriented or fixed-length interfaces that
support protocol multiplexing, the number of
transmission units received via the interface that were
discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol
multiplexing, this counter is not present.
Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_unknown_protos must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__in_unknown_protos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_unknown_protos(self):
    self.__in_unknown_protos = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="in-unknown-protos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_out_octets(self):
    """
    Getter method for out_octets, mapped from YANG variable /interfaces_state/interface/statistics/out_octets (yang:counter64)

    YANG Description: The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_octets
      
  def _set_out_octets(self, v, load=False):
    """
    Setter method for out_octets, mapped from YANG variable /interfaces_state/interface/statistics/out_octets (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_octets() directly.

    YANG Description: The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_octets must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_octets(self):
    self.__out_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_unicast_pkts(self):
    """
    Getter method for out_unicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/out_unicast_pkts (yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_unicast_pkts
      
  def _set_out_unicast_pkts(self, v, load=False):
    """
    Setter method for out_unicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/out_unicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_unicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_unicast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_unicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_unicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_unicast_pkts(self):
    self.__out_unicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-unicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_broadcast_pkts(self):
    """
    Getter method for out_broadcast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/out_broadcast_pkts (yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
broadcast address at this sub-layer, including those
that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_broadcast_pkts
      
  def _set_out_broadcast_pkts(self, v, load=False):
    """
    Setter method for out_broadcast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/out_broadcast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_broadcast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_broadcast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
broadcast address at this sub-layer, including those
that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_broadcast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_broadcast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_broadcast_pkts(self):
    self.__out_broadcast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-broadcast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_multicast_pkts(self):
    """
    Getter method for out_multicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/out_multicast_pkts (yang:counter64)

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_multicast_pkts
      
  def _set_out_multicast_pkts(self, v, load=False):
    """
    Setter method for out_multicast_pkts, mapped from YANG variable /interfaces_state/interface/statistics/out_multicast_pkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_multicast_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_multicast_pkts() directly.

    YANG Description: The total number of packets that higher-level protocols
requested be transmitted and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_multicast_pkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_multicast_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_multicast_pkts(self):
    self.__out_multicast_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-multicast-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter64', is_config=False)


  def _get_out_discards(self):
    """
    Getter method for out_discards, mapped from YANG variable /interfaces_state/interface/statistics/out_discards (yang:counter32)

    YANG Description: The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_discards
      
  def _set_out_discards(self, v, load=False):
    """
    Setter method for out_discards, mapped from YANG variable /interfaces_state/interface/statistics/out_discards (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_discards is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_discards() directly.

    YANG Description: The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_discards must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__out_discards = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_discards(self):
    self.__out_discards = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-discards", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)


  def _get_out_errors(self):
    """
    Getter method for out_errors, mapped from YANG variable /interfaces_state/interface/statistics/out_errors (yang:counter32)

    YANG Description: For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    return self.__out_errors
      
  def _set_out_errors(self, v, load=False):
    """
    Setter method for out_errors, mapped from YANG variable /interfaces_state/interface/statistics/out_errors (yang:counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_errors() directly.

    YANG Description: For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.

Discontinuities in the value of this counter can occur
at re-initialization of the management system and at
other times as indicated by the value of
'discontinuity-time'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_errors must be of a type compatible with yang:counter32""",
          'defined-type': "yang:counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)""",
        })

    self.__out_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_errors(self):
    self.__out_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:counter32', is_config=False)

  discontinuity_time = __builtin__.property(_get_discontinuity_time)
  in_octets = __builtin__.property(_get_in_octets)
  in_unicast_pkts = __builtin__.property(_get_in_unicast_pkts)
  in_broadcast_pkts = __builtin__.property(_get_in_broadcast_pkts)
  in_multicast_pkts = __builtin__.property(_get_in_multicast_pkts)
  in_discards = __builtin__.property(_get_in_discards)
  in_errors = __builtin__.property(_get_in_errors)
  in_unknown_protos = __builtin__.property(_get_in_unknown_protos)
  out_octets = __builtin__.property(_get_out_octets)
  out_unicast_pkts = __builtin__.property(_get_out_unicast_pkts)
  out_broadcast_pkts = __builtin__.property(_get_out_broadcast_pkts)
  out_multicast_pkts = __builtin__.property(_get_out_multicast_pkts)
  out_discards = __builtin__.property(_get_out_discards)
  out_errors = __builtin__.property(_get_out_errors)


  _pyangbind_elements = OrderedDict([('discontinuity_time', discontinuity_time), ('in_octets', in_octets), ('in_unicast_pkts', in_unicast_pkts), ('in_broadcast_pkts', in_broadcast_pkts), ('in_multicast_pkts', in_multicast_pkts), ('in_discards', in_discards), ('in_errors', in_errors), ('in_unknown_protos', in_unknown_protos), ('out_octets', out_octets), ('out_unicast_pkts', out_unicast_pkts), ('out_broadcast_pkts', out_broadcast_pkts), ('out_multicast_pkts', out_multicast_pkts), ('out_discards', out_discards), ('out_errors', out_errors), ])


class yc_interface_ietf_interfaces__interfaces_state_interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces-state/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of interfaces on the device.

System-controlled interfaces created by the system are
always present in this list, whether or not they are
configured.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__type','__admin_status','__oper_status','__last_change','__if_index','__phys_address','__higher_layer_if','__lower_layer_if','__speed','__statistics',)

  _yang_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__statistics = YANGDynClass(base=yc_statistics_ietf_interfaces__interfaces_state_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=False)
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=False)
    self.__higher_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=False)
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    self.__lower_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)
    self.__last_change = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    self.__speed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)
    self.__phys_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces-state', u'interface']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /interfaces_state/interface/name (string)

    YANG Description: The name of the interface.

A server implementation MAY map this leaf to the ifName
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifName.  The definition of
such a mechanism is outside the scope of this document.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /interfaces_state/interface/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The name of the interface.

A server implementation MAY map this leaf to the ifName
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifName.  The definition of
such a mechanism is outside the scope of this document.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='string', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /interfaces_state/interface/type (identityref)

    YANG Description: The type of the interface.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /interfaces_state/interface/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The type of the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "ietf-interfaces:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ibm370parChan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aal5': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareVirtualNic': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qllc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmbond': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dlsw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'usb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88024TokenBus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:teLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88022llc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mfSigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fcipLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdh1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fastEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nsip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ss7SigLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ces': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:cableDownstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ptm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gfp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iana-interface-type': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayMPI': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rs232': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sixToFour': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableUpstreamRfPort': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vmwareNicTeam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:miox25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cblVectaStar': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon622': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ds0Bundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:isdns': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1FDL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8025': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapWtpVirtualRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableUpstreamChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:localTalk': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'lapf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aflane8023': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ciscoISLvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gigabitEthernet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl2plus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025CRFPInt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:eplrs': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025Dtr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee1394': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frf16MfrBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEMFGD': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdf': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:proteon80Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXO': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableNdr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceFXS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:regular1822': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'homepna': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v11': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:channel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:softwareLoopback': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:e1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'idsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOduc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ddnX25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc877x25': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'proteon10Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'linegroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'gr303IDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet-like': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:termPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpegTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1FwdOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propBWAp2Mp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'radioMAC': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:lmp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:coffee': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:microwaveRadioLinkTerminal': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:econet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frDlciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableMCmtsDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:iso88025TokenRing': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtuc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEM': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25huntGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mvl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:basicISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hssi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:nfas': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmLogical': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdci': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sipTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fastEtherFX': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'rpr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:opticalTransport': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bridge': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualTg': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pos': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propWirelessP2P': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'macSecUncontrolledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds0': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ds3': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pppMultilinkBundle': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:g9982': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hyperchannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tr008': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:para': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l3ipxvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:imt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:otnOtsig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propPointToPointSerial': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88026Man': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'wwanPP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'frameRelayService': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mpls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'escon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ultra': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hostPad': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x213': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbAsiIn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gtp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'actelisMetaLOOP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'otnOdu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverCdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gr303RDT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:starLan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:q2931': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEncap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'qam': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Bss': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cctEmul': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsCableScte55d2DsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsMacLayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDEANA': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'vlan-sub-interface': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'arcnet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:mplsTunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'shdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRccUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:tunnel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80216WMAN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee802154': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbTdm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:wwanPP2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:l3ipvlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'infiniband': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'opticalChannelGroup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80212': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee80211': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceFGDOS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:if-gsn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'l2vlan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x86Laps': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluELP': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propCnls': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmIma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'arap': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gfast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmVciEndPt': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetVT': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmSubInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rsrb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isup': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'async': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'docsOfdmaUpstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:compositeLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:frameRelayInterconnect': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ieee8023adLag': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ilan': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sipSig': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:dvbRccDownstream': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'x25ple': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:vdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponOnu': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bgppolicyaccounting': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dcn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:x25mlp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverFrameRelay': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernet3Mbit': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ipOverClaw': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'plc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Proxy': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pon155': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d2UsOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceOverCable': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:slip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'reachDSL': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'srp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbRcsTdma': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipForward': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:radsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'propDocsWirelessMaclayer': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'microwaveCarrierTermination': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetPath': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:primaryISDN': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ppp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88023Csmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:digitalWrapperOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'atmFuni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fast': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'digitalPowerline': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'capwapDot11Profile': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sonetOverheadChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bsc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'dvbAsiOut': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:voiceDID': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:fddi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:docsCableScte55d1RetOob': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:sdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mediaMailOverIp': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:modem': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propAtm': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:interleave': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:smdsIcip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:stackToStack': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'mocaVersion1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ethernetCsmacd': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'fibreChannel': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'bbfift:bbf-interface-type': {u'@namespace': u'urn:bbf:yang:bbf-if-type', u'@module': u'bbf-if-type'}, u'ianaift:xboxWireless': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v35': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v36': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'v37': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at64k': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9983': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g9981': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:g703at2mb': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'pip': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'adsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:gpon': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'isdn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmRadio': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propVirtual': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:myrinet': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluEponLogicalLink': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'voiceEBS': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:arcnetPlus': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:atmDxi': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ghn': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'other': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:propMultiplexor': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'iso88025Fiber': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'a12MppSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hdsl2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:bits': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:pdnEtherLoop1': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifVfiType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'hiperlan2': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:macSecControlledIF': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'cnr': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:virtualIpAddress': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:aluGponPhysicalUni': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ifPwType': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:ipSwitch': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:hippiInterface': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:transpHdlc': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:rfc1483': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'h323Gatekeeper': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'ianaift:msdsl': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}, u'aviciOpticalEther': {u'@namespace': u'urn:ietf:params:xml:ns:yang:iana-if-type', u'@module': u'iana-if-type'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='identityref', is_config=False)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /interfaces_state/interface/admin_status (enumeration)

    YANG Description: The desired state of the interface.

This leaf has the same read semantics as ifAdminStatus.
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /interfaces_state/interface/admin_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.

    YANG Description: The desired state of the interface.

This leaf has the same read semantics as ifAdminStatus.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with enumeration""",
          'defined-type': "ietf-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {u'value': 2}, u'testing': {u'value': 3}, u'up': {u'value': 1}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)


  def _get_oper_status(self):
    """
    Getter method for oper_status, mapped from YANG variable /interfaces_state/interface/oper_status (enumeration)

    YANG Description: The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
    """
    return self.__oper_status
      
  def _set_oper_status(self, v, load=False):
    """
    Setter method for oper_status, mapped from YANG variable /interfaces_state/interface/oper_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_status() directly.

    YANG Description: The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_status must be of a type compatible with enumeration""",
          'defined-type': "ietf-interfaces:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)""",
        })

    self.__oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_status(self):
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'dormant': {u'value': 5}, u'lower-layer-down': {u'value': 7}, u'unknown': {u'value': 4}, u'testing': {u'value': 3}, u'up': {u'value': 1}, u'down': {u'value': 2}, u'not-present': {u'value': 6}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='enumeration', is_config=False)


  def _get_last_change(self):
    """
    Getter method for last_change, mapped from YANG variable /interfaces_state/interface/last_change (yang:date-and-time)

    YANG Description: The time the interface entered its current operational
state.  If the current state was entered prior to the
last re-initialization of the local network management
subsystem, then this node is not present.
    """
    return self.__last_change
      
  def _set_last_change(self, v, load=False):
    """
    Setter method for last_change, mapped from YANG variable /interfaces_state/interface/last_change (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_change() directly.

    YANG Description: The time the interface entered its current operational
state.  If the current state was entered prior to the
last re-initialization of the local network management
subsystem, then this node is not present.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_change must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__last_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_change(self):
    self.__last_change = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:date-and-time', is_config=False)


  def _get_if_index(self):
    """
    Getter method for if_index, mapped from YANG variable /interfaces_state/interface/if_index (int32)

    YANG Description: The ifIndex value for the ifEntry represented by this
interface.
    """
    return self.__if_index
      
  def _set_if_index(self, v, load=False):
    """
    Setter method for if_index, mapped from YANG variable /interfaces_state/interface/if_index (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_index() directly.

    YANG Description: The ifIndex value for the ifEntry represented by this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_index must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)""",
        })

    self.__if_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_index(self):
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={u'range': [u'1..2147483647']}), is_leaf=True, yang_name="if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='int32', is_config=False)


  def _get_phys_address(self):
    """
    Getter method for phys_address, mapped from YANG variable /interfaces_state/interface/phys_address (yang:phys-address)

    YANG Description: The interface's address at its protocol sub-layer.  For
example, for an 802.x interface, this object normally
contains a Media Access Control (MAC) address.  The
interface's media-specific modules must define the bit
and byte ordering and the format of the value of this
object.  For interfaces that do not have such an address
(e.g., a serial line), this node is not present.
    """
    return self.__phys_address
      
  def _set_phys_address(self, v, load=False):
    """
    Setter method for phys_address, mapped from YANG variable /interfaces_state/interface/phys_address (yang:phys-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_phys_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_phys_address() directly.

    YANG Description: The interface's address at its protocol sub-layer.  For
example, for an 802.x interface, this object normally
contains a Media Access Control (MAC) address.  The
interface's media-specific modules must define the bit
and byte ordering and the format of the value of this
object.  For interfaces that do not have such an address
(e.g., a serial line), this node is not present.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """phys_address must be of a type compatible with yang:phys-address""",
          'defined-type': "yang:phys-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)""",
        })

    self.__phys_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_phys_address(self):
    self.__phys_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'}), is_leaf=True, yang_name="phys-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:phys-address', is_config=False)


  def _get_higher_layer_if(self):
    """
    Getter method for higher_layer_if, mapped from YANG variable /interfaces_state/interface/higher_layer_if (interface-state-ref)

    YANG Description: A list of references to interfaces layered on top of this
interface.
    """
    return self.__higher_layer_if
      
  def _set_higher_layer_if(self, v, load=False):
    """
    Setter method for higher_layer_if, mapped from YANG variable /interfaces_state/interface/higher_layer_if (interface-state-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_higher_layer_if is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_higher_layer_if() directly.

    YANG Description: A list of references to interfaces layered on top of this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """higher_layer_if must be of a type compatible with interface-state-ref""",
          'defined-type': "ietf-interfaces:interface-state-ref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)""",
        })

    self.__higher_layer_if = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_higher_layer_if(self):
    self.__higher_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="higher-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)


  def _get_lower_layer_if(self):
    """
    Getter method for lower_layer_if, mapped from YANG variable /interfaces_state/interface/lower_layer_if (interface-state-ref)

    YANG Description: A list of references to interfaces layered underneath this
interface.
    """
    return self.__lower_layer_if
      
  def _set_lower_layer_if(self, v, load=False):
    """
    Setter method for lower_layer_if, mapped from YANG variable /interfaces_state/interface/lower_layer_if (interface-state-ref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lower_layer_if is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lower_layer_if() directly.

    YANG Description: A list of references to interfaces layered underneath this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lower_layer_if must be of a type compatible with interface-state-ref""",
          'defined-type': "ietf-interfaces:interface-state-ref",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)""",
        })

    self.__lower_layer_if = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lower_layer_if(self):
    self.__lower_layer_if = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="lower-layer-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='interface-state-ref', is_config=False)


  def _get_speed(self):
    """
    Getter method for speed, mapped from YANG variable /interfaces_state/interface/speed (yang:gauge64)

    YANG Description: An estimate of the interface's current bandwidth in bits
per second.  For interfaces that do not vary in
bandwidth or for those where no accurate estimation can

be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.
    """
    return self.__speed
      
  def _set_speed(self, v, load=False):
    """
    Setter method for speed, mapped from YANG variable /interfaces_state/interface/speed (yang:gauge64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_speed() directly.

    YANG Description: An estimate of the interface's current bandwidth in bits
per second.  For interfaces that do not vary in
bandwidth or for those where no accurate estimation can

be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """speed must be of a type compatible with yang:gauge64""",
          'defined-type': "yang:gauge64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)""",
        })

    self.__speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_speed(self):
    self.__speed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='yang:gauge64', is_config=False)


  def _get_statistics(self):
    """
    Getter method for statistics, mapped from YANG variable /interfaces_state/interface/statistics (container)

    YANG Description: A collection of interface-related statistics objects.
    """
    return self.__statistics
      
  def _set_statistics(self, v, load=False):
    """
    Setter method for statistics, mapped from YANG variable /interfaces_state/interface/statistics (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics() directly.

    YANG Description: A collection of interface-related statistics objects.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_statistics_ietf_interfaces__interfaces_state_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_statistics_ietf_interfaces__interfaces_state_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=False)""",
        })

    self.__statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics(self):
    self.__statistics = YANGDynClass(base=yc_statistics_ietf_interfaces__interfaces_state_interface_statistics, is_container='container', yang_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=False)

  name = __builtin__.property(_get_name)
  type = __builtin__.property(_get_type)
  admin_status = __builtin__.property(_get_admin_status)
  oper_status = __builtin__.property(_get_oper_status)
  last_change = __builtin__.property(_get_last_change)
  if_index = __builtin__.property(_get_if_index)
  phys_address = __builtin__.property(_get_phys_address)
  higher_layer_if = __builtin__.property(_get_higher_layer_if)
  lower_layer_if = __builtin__.property(_get_lower_layer_if)
  speed = __builtin__.property(_get_speed)
  statistics = __builtin__.property(_get_statistics)


  _pyangbind_elements = OrderedDict([('name', name), ('type', type), ('admin_status', admin_status), ('oper_status', oper_status), ('last_change', last_change), ('if_index', if_index), ('phys_address', phys_address), ('higher_layer_if', higher_layer_if), ('lower_layer_if', lower_layer_if), ('speed', speed), ('statistics', statistics), ])


class yc_interfaces_state_ietf_interfaces__interfaces_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /interfaces-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Data nodes for the operational state of interfaces.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface',)

  _yang_name = 'interfaces-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_state_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interfaces-state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /interfaces_state/interface (list)

    YANG Description: The list of interfaces on the device.

System-controlled interfaces created by the system are
always present in this list, whether or not they are
configured.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /interfaces_state/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: The list of interfaces on the device.

System-controlled interfaces created by the system are
always present in this list, whether or not they are
configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_state_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_state_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("name",yc_interface_ietf_interfaces__interfaces_state_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='list', is_config=False)

  interface = __builtin__.property(_get_interface)


  _pyangbind_elements = OrderedDict([('interface', interface), ])


class ietf_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ietf-interfaces - based on the path /ietf-interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This module contains a collection of YANG definitions for
managing network interfaces.

Copyright (c) 2018 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(https://trustee.ietf.org/license-info).

This version of this YANG module is part of RFC 8343; see
the RFC itself for full legal notices.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__interfaces_state',)

  _yang_name = 'ietf-interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=yc_interfaces_ietf_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)
    self.__interfaces_state = YANGDynClass(base=yc_interfaces_state_ietf_interfaces__interfaces_state, is_container='container', yang_name="interfaces-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /interfaces (container)

    YANG Description: Interface parameters.
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Interface parameters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interfaces_ietf_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interfaces_ietf_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=yc_interfaces_ietf_interfaces__interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)


  def _get_interfaces_state(self):
    """
    Getter method for interfaces_state, mapped from YANG variable /interfaces_state (container)

    YANG Description: Data nodes for the operational state of interfaces.
    """
    return self.__interfaces_state
      
  def _set_interfaces_state(self, v, load=False):
    """
    Setter method for interfaces_state, mapped from YANG variable /interfaces_state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces_state() directly.

    YANG Description: Data nodes for the operational state of interfaces.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interfaces_state_ietf_interfaces__interfaces_state, is_container='container', yang_name="interfaces-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces_state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interfaces_state_ietf_interfaces__interfaces_state, is_container='container', yang_name="interfaces-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)""",
        })

    self.__interfaces_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces_state(self):
    self.__interfaces_state = YANGDynClass(base=yc_interfaces_state_ietf_interfaces__interfaces_state, is_container='container', yang_name="interfaces-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:ietf-interfaces', defining_module='ietf-interfaces', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  interfaces_state = __builtin__.property(_get_interfaces_state, _set_interfaces_state)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('interfaces_state', interfaces_state), ])


class bbf_qos_enhanced_scheduling(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bbf-qos-enhanced-scheduling - based on the path /bbf-qos-enhanced-scheduling. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This module contains a collection of YANG definitions for
supporting the Broadband Forum requirements on the management of
Quality of Service (QoS) as applicable to access network
equipment. As such, this module is specific to access network
equipment (e.g., BBF-specified Access Nodes and FTTdp DPUs).

Specifically, this module contains a collection of enhanced
traffic scheduling configuration.

Copyright (c) 2017-2018, Broadband Forum

Redistribution and use in source and binary forms, with or
without modification, are permitted provided that the following
conditions are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above
   copyright notice, this list of conditions and the following
   disclaimer in the documentation and/or other materials
   provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products
   derived from this software without specific prior written
   permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The above license is used as a license under copyright only.
Please reference the Forum IPR Policy for patent licensing terms
<https://www.broadband-forum.org/ipr-policy>.

Any moral rights which are necessary to exercise under the above
license grant are also deemed granted under this license.

This version of this YANG module is part of TR-383; see
the TR itself for full legal notices.
  """
  _pyangbind_elements = {}

  

