# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_config_openconfig_qos__qos_interfaces_interface_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'config']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/config/interface_id (string)

    YANG Description: Identifier for the interface.
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/config/interface_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Identifier for the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ])


class yc_state_openconfig_qos__qos_interfaces_interface_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/state/interface_id (string)

    YANG Description: Identifier for the interface.
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/state/interface_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Identifier for the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ])


class yc_config_openconfig_qos__qos_interfaces_interface_interface_ref_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/interface-ref/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configured reference to interface / subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref', u'config']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_state_openconfig_qos__qos_interfaces_interface_interface_ref_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/interface-ref/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for interface-ref
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref', u'state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  interface = __builtin__.property(_get_interface)
  subinterface = __builtin__.property(_get_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_interface_ref_openconfig_qos__qos_interfaces_interface_interface_ref(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/interface-ref. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Reference to an interface or subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'interface-ref'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/interface_ref/config (container)

    YANG Description: Configured reference to interface / subinterface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/interface_ref/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configured reference to interface / subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/interface_ref/state (container)

    YANG Description: Operational state for interface-ref
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/interface_ref/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for interface-ref
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_interfaces_interface_output_interface_ref_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/interface-ref/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configured reference to interface / subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref', u'config']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_state_openconfig_qos__qos_interfaces_interface_output_interface_ref_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/interface-ref/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for interface-ref
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref', u'state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  interface = __builtin__.property(_get_interface)
  subinterface = __builtin__.property(_get_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_interface_ref_openconfig_qos__qos_interfaces_interface_output_interface_ref(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/interface-ref. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Reference to an interface or subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'interface-ref'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config (container)

    YANG Description: Configured reference to interface / subinterface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configured reference to interface / subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state (container)

    YANG Description: Operational state for interface-ref
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for interface-ref
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_interfaces_interface_output_queues_queue_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos__qos_interfaces_interface_output_queues_queue_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/queues/queue/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__max_queue_len','__avg_queue_len','__transmit_pkts','__transmit_octets','__dropped_pkts',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_max_queue_len(self):
    """
    Getter method for max_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/max_queue_len (oc-yang:counter64)

    YANG Description: Maximum observed queue length
    """
    return self.__max_queue_len
      
  def _set_max_queue_len(self, v, load=False):
    """
    Setter method for max_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/max_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_len() directly.

    YANG Description: Maximum observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__max_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_len(self):
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_avg_queue_len(self):
    """
    Getter method for avg_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/avg_queue_len (oc-yang:counter64)

    YANG Description: Average observed queue length
    """
    return self.__avg_queue_len
      
  def _set_avg_queue_len(self, v, load=False):
    """
    Setter method for avg_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/avg_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_queue_len() directly.

    YANG Description: Average observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__avg_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_queue_len(self):
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_pkts(self):
    """
    Getter method for transmit_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_pkts (oc-yang:counter64)

    YANG Description: Number of packets transmitted by this queue
    """
    return self.__transmit_pkts
      
  def _set_transmit_pkts(self, v, load=False):
    """
    Setter method for transmit_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_pkts() directly.

    YANG Description: Number of packets transmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_pkts(self):
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_octets(self):
    """
    Getter method for transmit_octets, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_octets (oc-yang:counter64)

    YANG Description: Number of octets trasmitted by this queue
    """
    return self.__transmit_octets
      
  def _set_transmit_octets(self, v, load=False):
    """
    Setter method for transmit_octets, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_octets() directly.

    YANG Description: Number of octets trasmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_octets(self):
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_pkts(self):
    """
    Getter method for dropped_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/dropped_pkts (oc-yang:counter64)

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    return self.__dropped_pkts
      
  def _set_dropped_pkts(self, v, load=False):
    """
    Setter method for dropped_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/dropped_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_pkts() directly.

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_pkts(self):
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  max_queue_len = __builtin__.property(_get_max_queue_len)
  avg_queue_len = __builtin__.property(_get_avg_queue_len)
  transmit_pkts = __builtin__.property(_get_transmit_pkts)
  transmit_octets = __builtin__.property(_get_transmit_octets)
  dropped_pkts = __builtin__.property(_get_dropped_pkts)


  _pyangbind_elements = OrderedDict([('name', name), ('max_queue_len', max_queue_len), ('avg_queue_len', avg_queue_len), ('transmit_pkts', transmit_pkts), ('transmit_octets', transmit_octets), ('dropped_pkts', dropped_pkts), ])


class yc_queue_openconfig_qos__qos_interfaces_interface_output_queues_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/queues/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the queue associated with this
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/name (leafref)

    YANG Description: Reference to the name of the queue
instantiated on the interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the queue
instantiated on the interface.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config (container)

    YANG Description: Configuration data for the queue associated with the
interface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for the queue associated with the
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state (container)

    YANG Description: Operational state data for the queue associated with the
interface
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for the queue associated with the
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ])


class yc_queues_openconfig_qos__qos_interfaces_interface_output_queues(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/queues. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue',)

  _yang_name = 'queues'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/interfaces/interface/output/queues/queue (list)

    YANG Description: Top-level container for the queue associated with this
interface
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/interfaces/interface/output/queues/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Top-level container for the queue associated with this
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_queue_openconfig_qos__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)


  _pyangbind_elements = OrderedDict([('queue', queue), ])


class yc_config_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/scheduler-policy/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config/name (leafref)

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/scheduler-policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state/name (leafref)

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  name = __builtin__.property(_get_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers', u'scheduler', u'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class yc_scheduler_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__state',)

  _yang_name = 'scheduler'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers', u'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the sequence ID for the scheduler.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID for the scheduler.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state parameters relating to the scheduler
policy.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the scheduler
policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  state = __builtin__.property(_get_state)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('state', state), ])


class yc_schedulers_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Schedulers within the applied scheduler-policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler',)

  _yang_name = 'schedulers'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers']

  def _get_scheduler(self):
    """
    Getter method for scheduler, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler (list)

    YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
    """
    return self.__scheduler
      
  def _set_scheduler(self, v, load=False):
    """
    Setter method for scheduler, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler() directly.

    YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)""",
        })

    self.__scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler(self):
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)

  scheduler = __builtin__.property(_get_scheduler)


  _pyangbind_elements = OrderedDict([('scheduler', scheduler), ])


class yc_scheduler_policy_openconfig_qos__qos_interfaces_interface_output_scheduler_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output/scheduler-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Scheduler policy associated with the interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__schedulers',)

  _yang_name = 'scheduler-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config (container)

    YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state (container)

    YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_schedulers(self):
    """
    Getter method for schedulers, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers (container)

    YANG Description: Schedulers within the applied scheduler-policy.
    """
    return self.__schedulers
      
  def _set_schedulers(self, v, load=False):
    """
    Setter method for schedulers, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedulers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedulers() directly.

    YANG Description: Schedulers within the applied scheduler-policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_schedulers_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedulers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_schedulers_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__schedulers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedulers(self):
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  schedulers = __builtin__.property(_get_schedulers, _set_schedulers)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('schedulers', schedulers), ])


class yc_output_openconfig_qos__qos_interfaces_interface_output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data related to the egress
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_ref','__queues','__scheduler_policy',)

  _yang_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler_policy = YANGDynClass(base=yc_scheduler_policy_openconfig_qos__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output']

  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/output/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/output/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/interfaces/interface/output/queues (container)

    YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/interfaces/interface/output/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_queues_openconfig_qos__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_queues_openconfig_qos__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policy(self):
    """
    Getter method for scheduler_policy, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy (container)

    YANG Description: Scheduler policy associated with the interface.
    """
    return self.__scheduler_policy
      
  def _set_scheduler_policy(self, v, load=False):
    """
    Setter method for scheduler_policy, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policy() directly.

    YANG Description: Scheduler policy associated with the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_scheduler_policy_openconfig_qos__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_scheduler_policy_openconfig_qos__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policy(self):
    self.__scheduler_policy = YANGDynClass(base=yc_scheduler_policy_openconfig_qos__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interface_ref = __builtin__.property(_get_interface_ref, _set_interface_ref)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policy = __builtin__.property(_get_scheduler_policy, _set_scheduler_policy)


  _pyangbind_elements = OrderedDict([('interface_ref', interface_ref), ('queues', queues), ('scheduler_policy', scheduler_policy), ])


class yc_interface_openconfig_qos__qos_interfaces_interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of interfaces referenced by QoS entities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__config','__state','__interface_ref','__output',)

  _yang_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output = YANGDynClass(base=yc_output_openconfig_qos__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/interface_id (leafref)

    YANG Description: Reference to the interface-id list key
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/interface_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Reference to the interface-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/config (container)

    YANG Description: Configuration data 
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/state (container)

    YANG Description: Operational state data 
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/interfaces/interface/output (container)

    YANG Description: Top-level container for QoS data related to the egress
interface
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/interfaces/interface/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for QoS data related to the egress
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_output_openconfig_qos__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_output_openconfig_qos__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=yc_output_openconfig_qos__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  interface_ref = __builtin__.property(_get_interface_ref, _set_interface_ref)
  output = __builtin__.property(_get_output, _set_output)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('config', config), ('state', state), ('interface_ref', interface_ref), ('output', output), ])


class yc_interfaces_openconfig_qos__qos_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of interface references
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface',)

  _yang_name = 'interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface (list)

    YANG Description: List of interfaces referenced by QoS entities.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: List of interfaces referenced by QoS entities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_id",yc_interface_openconfig_qos__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)


  _pyangbind_elements = OrderedDict([('interface', interface), ])


class yc_config_openconfig_qos__qos_queues_queue_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__drop_profile',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__drop_profile = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/config/name (string)

    YANG Description: User-defined name of the queue
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/queues/queue/config/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/queues/queue/config/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)


  def _get_drop_profile(self):
    """
    Getter method for drop_profile, mapped from YANG variable /qos/queues/queue/config/drop_profile (leafref)

    YANG Description: References the drop profile for this queue
    """
    return self.__drop_profile
      
  def _set_drop_profile(self, v, load=False):
    """
    Setter method for drop_profile, mapped from YANG variable /qos/queues/queue/config/drop_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profile() directly.

    YANG Description: References the drop profile for this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__drop_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profile(self):
    self.__drop_profile = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_type = __builtin__.property(_get_queue_type, _set_queue_type)
  drop_profile = __builtin__.property(_get_drop_profile, _set_drop_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('drop_profile', drop_profile), ])


class yc_state_openconfig_qos__qos_queues_queue_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__max_queue_len','__avg_queue_len','__transmit_pkts','__transmit_octets','__dropped_pkts',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/state/name (string)

    YANG Description: User-defined name of the queue
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/queues/queue/state/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/queues/queue/state/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_max_queue_len(self):
    """
    Getter method for max_queue_len, mapped from YANG variable /qos/queues/queue/state/max_queue_len (oc-yang:counter64)

    YANG Description: Maximum observed queue length
    """
    return self.__max_queue_len
      
  def _set_max_queue_len(self, v, load=False):
    """
    Setter method for max_queue_len, mapped from YANG variable /qos/queues/queue/state/max_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_len() directly.

    YANG Description: Maximum observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__max_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_len(self):
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_avg_queue_len(self):
    """
    Getter method for avg_queue_len, mapped from YANG variable /qos/queues/queue/state/avg_queue_len (oc-yang:counter64)

    YANG Description: Average observed queue length
    """
    return self.__avg_queue_len
      
  def _set_avg_queue_len(self, v, load=False):
    """
    Setter method for avg_queue_len, mapped from YANG variable /qos/queues/queue/state/avg_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_queue_len() directly.

    YANG Description: Average observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__avg_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_queue_len(self):
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_pkts(self):
    """
    Getter method for transmit_pkts, mapped from YANG variable /qos/queues/queue/state/transmit_pkts (oc-yang:counter64)

    YANG Description: Number of packets transmitted by this queue
    """
    return self.__transmit_pkts
      
  def _set_transmit_pkts(self, v, load=False):
    """
    Setter method for transmit_pkts, mapped from YANG variable /qos/queues/queue/state/transmit_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_pkts() directly.

    YANG Description: Number of packets transmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_pkts(self):
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_octets(self):
    """
    Getter method for transmit_octets, mapped from YANG variable /qos/queues/queue/state/transmit_octets (oc-yang:counter64)

    YANG Description: Number of octets trasmitted by this queue
    """
    return self.__transmit_octets
      
  def _set_transmit_octets(self, v, load=False):
    """
    Setter method for transmit_octets, mapped from YANG variable /qos/queues/queue/state/transmit_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_octets() directly.

    YANG Description: Number of octets trasmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_octets(self):
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_pkts(self):
    """
    Getter method for dropped_pkts, mapped from YANG variable /qos/queues/queue/state/dropped_pkts (oc-yang:counter64)

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    return self.__dropped_pkts
      
  def _set_dropped_pkts(self, v, load=False):
    """
    Setter method for dropped_pkts, mapped from YANG variable /qos/queues/queue/state/dropped_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_pkts() directly.

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_pkts(self):
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  queue_type = __builtin__.property(_get_queue_type)
  max_queue_len = __builtin__.property(_get_max_queue_len)
  avg_queue_len = __builtin__.property(_get_avg_queue_len)
  transmit_pkts = __builtin__.property(_get_transmit_pkts)
  transmit_octets = __builtin__.property(_get_transmit_octets)
  dropped_pkts = __builtin__.property(_get_dropped_pkts)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('max_queue_len', max_queue_len), ('avg_queue_len', avg_queue_len), ('transmit_pkts', transmit_pkts), ('transmit_octets', transmit_octets), ('dropped_pkts', dropped_pkts), ])


class yc_config_openconfig_qos__qos_queues_queue_red_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/red/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red', u'config']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/red/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/red/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/red/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/red/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/red/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/red/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_state_openconfig_qos__qos_queues_queue_red_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/red/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__random_dropped_pkts','__random_dropped_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red', u'state']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/red/state/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/red/state/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/red/state/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/red/state/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_random_dropped_pkts(self):
    """
    Getter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_pkts (uint32)

    YANG Description: The number of random drop packets.
    """
    return self.__random_dropped_pkts
      
  def _set_random_dropped_pkts(self, v, load=False):
    """
    Setter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_pkts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_pkts() directly.

    YANG Description: The number of random drop packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_pkts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)""",
        })

    self.__random_dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_pkts(self):
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)


  def _get_random_dropped_octets(self):
    """
    Getter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_octets (uint64)

    YANG Description: The number of random drop bytes.
    """
    return self.__random_dropped_octets
      
  def _set_random_dropped_octets(self, v, load=False):
    """
    Setter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_octets (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_octets() directly.

    YANG Description: The number of random drop bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_octets must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__random_dropped_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_octets(self):
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)

  minth = __builtin__.property(_get_minth)
  maxth = __builtin__.property(_get_maxth)
  random_dropped_pkts = __builtin__.property(_get_random_dropped_pkts)
  random_dropped_octets = __builtin__.property(_get_random_dropped_octets)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('random_dropped_pkts', random_dropped_pkts), ('random_dropped_octets', random_dropped_octets), ])


class yc_red_openconfig_qos__qos_queues_queue_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to RED-managed
queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/red/config (container)

    YANG Description: Configuration data for RED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/red/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/red/state (container)

    YANG Description: Operational state data for RED queues
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/red/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for WRED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/name (string)

    YANG Description: Descriptive name and key for the class
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Descriptive name and key for the class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/id (identityref)

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/id (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  id = __builtin__.property(_get_id, _set_id)
  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_state_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for WRED
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob','__random_dropped_pkts','__random_dropped_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class', u'state']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)


  def _get_random_dropped_pkts(self):
    """
    Getter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_pkts (uint32)

    YANG Description: The number of random drop packets.
    """
    return self.__random_dropped_pkts
      
  def _set_random_dropped_pkts(self, v, load=False):
    """
    Setter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_pkts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_pkts() directly.

    YANG Description: The number of random drop packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_pkts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)""",
        })

    self.__random_dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_pkts(self):
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)


  def _get_random_dropped_octets(self):
    """
    Getter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_octets (uint64)

    YANG Description: The number of random drop bytes.
    """
    return self.__random_dropped_octets
      
  def _set_random_dropped_octets(self, v, load=False):
    """
    Setter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_octets (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_octets() directly.

    YANG Description: The number of random drop bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_octets must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__random_dropped_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_octets(self):
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)

  minth = __builtin__.property(_get_minth)
  maxth = __builtin__.property(_get_maxth)
  maxprob = __builtin__.property(_get_maxprob)
  random_dropped_pkts = __builtin__.property(_get_random_dropped_pkts)
  random_dropped_octets = __builtin__.property(_get_random_dropped_octets)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ('random_dropped_pkts', random_dropped_pkts), ('random_dropped_octets', random_dropped_octets), ])


class yc_traffic_class_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of classes
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state',)

  _yang_name = 'traffic-class'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/name (leafref)

    YANG Description: Reference to the class name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the class name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config (container)

    YANG Description: Configuration data for WRED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for WRED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state (container)

    YANG Description: Operational state data for WRED
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for WRED
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ])


class yc_traffic_classes_openconfig_qos__qos_queues_queue_wred_traffic_classes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/wred/traffic-classes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of classes for Weighted RED QoS queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class',)

  _yang_name = 'traffic-classes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes']

  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class (list)

    YANG Description: List of classes
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: List of classes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)


  _pyangbind_elements = OrderedDict([('traffic_class', traffic_class), ])


class yc_wred_openconfig_qos__qos_queues_queue_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for WRED data
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_classes',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred']

  def _get_traffic_classes(self):
    """
    Getter method for traffic_classes, mapped from YANG variable /qos/queues/queue/wred/traffic_classes (container)

    YANG Description: A list of classes for Weighted RED QoS queues
    """
    return self.__traffic_classes
      
  def _set_traffic_classes(self, v, load=False):
    """
    Setter method for traffic_classes, mapped from YANG variable /qos/queues/queue/wred/traffic_classes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_classes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_classes() directly.

    YANG Description: A list of classes for Weighted RED QoS queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_traffic_classes_openconfig_qos__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_classes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_traffic_classes_openconfig_qos__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__traffic_classes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_classes(self):
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  traffic_classes = __builtin__.property(_get_traffic_classes, _set_traffic_classes)


  _pyangbind_elements = OrderedDict([('traffic_classes', traffic_classes), ])


class yc_queue_openconfig_qos__qos_queues_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__red','__wred',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__red = YANGDynClass(base=yc_red_openconfig_qos__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/name (leafref)

    YANG Description: Reference to the queue name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/config (container)

    YANG Description: Configuration data for queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/state (container)

    YANG Description: Operational state data for queues
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /qos/queues/queue/red (container)

    YANG Description: Top-level container for data related to RED-managed
queues
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /qos/queues/queue/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Top-level container for data related to RED-managed
queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_openconfig_qos__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_openconfig_qos__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_openconfig_qos__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /qos/queues/queue/wred (container)

    YANG Description: Top-level container for WRED data
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /qos/queues/queue/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Top-level container for WRED data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_openconfig_qos__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_openconfig_qos__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  red = __builtin__.property(_get_red, _set_red)
  wred = __builtin__.property(_get_wred, _set_wred)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('red', red), ('wred', wred), ])


class yc_queues_openconfig_qos__qos_queues(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/queues. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue',)

  _yang_name = 'queues'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/queues/queue (list)

    YANG Description: List of defined queues
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/queues/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: List of defined queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_queue_openconfig_qos__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)


  _pyangbind_elements = OrderedDict([('queue', queue), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__root_scheduler',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__root_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/name (string)

    YANG Description: Name for the scheduler policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_root_scheduler(self):
    """
    Getter method for root_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/root_scheduler (leafref)

    YANG Description: This is the root scheduler in a Hierarchical QoS model
and helps in identifying which scheduler in a scheduler
policy is associated with an interface.
    """
    return self.__root_scheduler
      
  def _set_root_scheduler(self, v, load=False):
    """
    Setter method for root_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/root_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_root_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_root_scheduler() directly.

    YANG Description: This is the root scheduler in a Hierarchical QoS model
and helps in identifying which scheduler in a scheduler
policy is associated with an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """root_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__root_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_root_scheduler(self):
    self.__root_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  root_scheduler = __builtin__.property(_get_root_scheduler, _set_root_scheduler)


  _pyangbind_elements = OrderedDict([('name', name), ('root_scheduler', root_scheduler), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to a scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state/name (string)

    YANG Description: Name for the scheduler policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

  name = __builtin__.property(_get_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority','__name','__level',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'config']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/name (string)

    YANG Description: Name for this scheduler

Note: it would probably make more sense to have this as the
      key rather than the sequeunce number as it allows a
      more flexible way to name and index the schedulers.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for this scheduler

Note: it would probably make more sense to have this as the
      key rather than the sequeunce number as it allows a
      more flexible way to name and index the schedulers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/level (uint8)

    YANG Description: The level of the scheduler with the root node scheduler starting
at level 0 and then the siblings being greater than parent.
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: The level of the scheduler with the root node scheduler starting
at level 0 and then the siblings being greater than parent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  type = __builtin__.property(_get_type, _set_type)
  priority = __builtin__.property(_get_priority, _set_priority)
  name = __builtin__.property(_get_name, _set_name)
  level = __builtin__.property(_get_level, _set_level)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ('name', name), ('level', level), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler input sources
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__input_type','__queue','__weight','__priority','__input_scheduler',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__input_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input', u'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/id (string)

    YANG Description: User-defined identifier for the scheduler input
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: User-defined identifier for the scheduler input
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_input_type(self):
    """
    Getter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_type (enumeration)

    YANG Description: Describes the type of input source for the scheduler
    """
    return self.__input_type
      
  def _set_input_type(self, v, load=False):
    """
    Setter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_type() directly.

    YANG Description: Describes the type of input source for the scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__input_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_type(self):
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/queue (leafref)

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/queue (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/weight (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/weight (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/priority (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/priority (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_input_scheduler(self):
    """
    Getter method for input_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_scheduler (leafref)

    YANG Description: When the scheduler input type is scheduler, this leaf
provides a reference to the upstream scheduler policy.

Note: the scheduler list should really use a 'name' string
      as the key instead of a sequence number.

Note 2: The OpenConfig HQoS model has got the parent
      child concept backwards in regards to the schedulers
      and input/output.  In other words, the 'parent' scheduler
      should be the scheduler closest to the interface and as
      such should be on the 'output' configuration of the
      scheduler.  While the 'child' schedulers should be closest
      to the 'queues' and as such on the 'input' configuration
      of the scheduler.

      To avoid confusion we're using the name 'input-scheduler'
      here and deleted the 'child-scheduler' leaf in
      the output container
    """
    return self.__input_scheduler
      
  def _set_input_scheduler(self, v, load=False):
    """
    Setter method for input_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_scheduler() directly.

    YANG Description: When the scheduler input type is scheduler, this leaf
provides a reference to the upstream scheduler policy.

Note: the scheduler list should really use a 'name' string
      as the key instead of a sequence number.

Note 2: The OpenConfig HQoS model has got the parent
      child concept backwards in regards to the schedulers
      and input/output.  In other words, the 'parent' scheduler
      should be the scheduler closest to the interface and as
      such should be on the 'output' configuration of the
      scheduler.  While the 'child' schedulers should be closest
      to the 'queues' and as such on the 'input' configuration
      of the scheduler.

      To avoid confusion we're using the name 'input-scheduler'
      here and deleted the 'child-scheduler' leaf in
      the output container
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__input_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_scheduler(self):
    self.__input_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  input_type = __builtin__.property(_get_input_type, _set_input_type)
  queue = __builtin__.property(_get_queue, _set_queue)
  weight = __builtin__.property(_get_weight, _set_weight)
  priority = __builtin__.property(_get_priority, _set_priority)
  input_scheduler = __builtin__.property(_get_input_scheduler, _set_input_scheduler)


  _pyangbind_elements = OrderedDict([('id', id), ('input_type', input_type), ('queue', queue), ('weight', weight), ('priority', priority), ('input_scheduler', input_scheduler), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for scheduler input sources
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__input_type','__queue','__weight',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input', u'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/id (string)

    YANG Description: User-defined identifier for the scheduler input
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: User-defined identifier for the scheduler input
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_input_type(self):
    """
    Getter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/input_type (enumeration)

    YANG Description: Describes the type of input source for the scheduler
    """
    return self.__input_type
      
  def _set_input_type(self, v, load=False):
    """
    Setter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/input_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_type() directly.

    YANG Description: Describes the type of input source for the scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__input_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_type(self):
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/queue (leafref)

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/queue (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/weight (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/weight (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

  id = __builtin__.property(_get_id)
  input_type = __builtin__.property(_get_input_type)
  queue = __builtin__.property(_get_queue)
  weight = __builtin__.property(_get_weight)


  _pyangbind_elements = OrderedDict([('id', id), ('input_type', input_type), ('queue', queue), ('weight', weight), ])


class yc_input_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of input sources for the scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__config','__state',)

  _yang_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/id (leafref)

    YANG Description: Reference to list key
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Reference to list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config (container)

    YANG Description: Configuration data for scheduler input sources
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for scheduler input sources
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state (container)

    YANG Description: Operational state data for scheduler input sources
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for scheduler input sources
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('id', id), ('config', config), ('state', state), ])


class yc_inputs_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container 
  """
  __slots__ = ('_path_helper', '_extmethods', '__input',)

  _yang_name = 'inputs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__input = YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs']

  def _get_input(self):
    """
    Getter method for input, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input (list)

    YANG Description: List of input sources for the scheduler.
    """
    return self.__input
      
  def _set_input(self, v, load=False):
    """
    Setter method for input, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input() directly.

    YANG Description: List of input sources for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_input_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__input = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input(self):
    self.__input = YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  input = __builtin__.property(_get_input, _set_input)


  _pyangbind_elements = OrderedDict([('input', input), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__output_fwd_group',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output', u'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('output_fwd_group', output_fwd_group), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__child_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output', u'state']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  output_type = __builtin__.property(_get_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class yc_output_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for scheduler output data
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config (container)

    YANG Description: Configuration data for scheduler output
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for scheduler output
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state (container)

    YANG Description: Operational state data for scheduler output
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for scheduler output
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'state']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  cir = __builtin__.property(_get_cir)
  cir_pct = __builtin__.property(_get_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining)
  bc = __builtin__.property(_get_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'conform-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config (container)

    YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state (container)

    YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'exceed-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config (container)

    YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state (container)

    YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_one_rate_two_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action',)

  _yang_name = 'one-rate-two-color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config (container)

    YANG Description: Configuration data for 1 rate, 2 color shapers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 1 rate, 2 color shapers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state (container)

    YANG Description: Operational state data for 1 rate, 2 color shapers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 1 rate, 2 color shapers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action (container)

    YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action (container)

    YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'state']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)

  cir = __builtin__.property(_get_cir)
  cir_pct = __builtin__.property(_get_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining)
  pir = __builtin__.property(_get_pir)
  pir_pct = __builtin__.property(_get_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining)
  bc = __builtin__.property(_get_bc)
  be = __builtin__.property(_get_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for the conform action of a
2r3c policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'conform-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config (container)

    YANG Description: Configuration parameters for the conform action of a
2r3c policer.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters for the conform action of a
2r3c policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state (container)

    YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'exceed-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config (container)

    YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state (container)

    YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the action
applied to violating packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the action
applied to violating packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_violate_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'violate-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config (container)

    YANG Description: Configuration parameters relating to the action
applied to violating packets.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the action
applied to violating packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state (container)

    YANG Description: Operational state parameters relating to the action
applied to violating packets.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the action
applied to violating packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_two_rate_three_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=yc_violate_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_violate_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_violate_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=yc_violate_action_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


class yc_scheduler_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__inputs = YANGDynClass(base=yc_inputs_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=yc_two_rate_three_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=yc_one_rate_two_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=yc_output_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_inputs_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_inputs_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=yc_inputs_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_output_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_output_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=yc_output_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_one_rate_two_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_one_rate_two_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=yc_one_rate_two_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_two_rate_three_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_two_rate_three_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=yc_two_rate_three_color_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


class yc_schedulers_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy/schedulers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Schedulers within the scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler',)

  _yang_name = 'schedulers'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers']

  def _get_scheduler(self):
    """
    Getter method for scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler (list)

    YANG Description: List of defined QoS traffic schedulers.
    """
    return self.__scheduler
      
  def _set_scheduler(self, v, load=False):
    """
    Setter method for scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler() directly.

    YANG Description: List of defined QoS traffic schedulers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler(self):
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  scheduler = __builtin__.property(_get_scheduler, _set_scheduler)


  _pyangbind_elements = OrderedDict([('scheduler', scheduler), ])


class yc_scheduler_policy_openconfig_qos__qos_scheduler_policies_scheduler_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies/scheduler-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__schedulers',)

  _yang_name = 'scheduler-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/name (leafref)

    YANG Description: Reference to the name of the scheduler policy
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the scheduler policy
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config (container)

    YANG Description: Configuration parameters relating to a scheduler policy.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to a scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state (container)

    YANG Description: Operational state parameters relating to a scheduler policy.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to a scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_schedulers(self):
    """
    Getter method for schedulers, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers (container)

    YANG Description: Schedulers within the scheduler policy.
    """
    return self.__schedulers
      
  def _set_schedulers(self, v, load=False):
    """
    Setter method for schedulers, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedulers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedulers() directly.

    YANG Description: Schedulers within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_schedulers_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedulers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_schedulers_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__schedulers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedulers(self):
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  schedulers = __builtin__.property(_get_schedulers, _set_schedulers)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('schedulers', schedulers), ])


class yc_scheduler_policies_openconfig_qos__qos_scheduler_policies(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/scheduler-policies. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of configured scheduler policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler_policy',)

  _yang_name = 'scheduler-policies'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler_policy = YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies']

  def _get_scheduler_policy(self):
    """
    Getter method for scheduler_policy, mapped from YANG variable /qos/scheduler_policies/scheduler_policy (list)

    YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
    """
    return self.__scheduler_policy
      
  def _set_scheduler_policy(self, v, load=False):
    """
    Setter method for scheduler_policy, mapped from YANG variable /qos/scheduler_policies/scheduler_policy (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policy() directly.

    YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_scheduler_policy_openconfig_qos__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policy must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__scheduler_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policy(self):
    self.__scheduler_policy = YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  scheduler_policy = __builtin__.property(_get_scheduler_policy, _set_scheduler_policy)


  _pyangbind_elements = OrderedDict([('scheduler_policy', scheduler_policy), ])


class yc_config_openconfig_qos__qos_drop_profiles_drop_profile_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the drop profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__max_queue_depth_packets',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/config/name (string)

    YANG Description: Name of the drop profile
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the drop profile
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/drop_profiles/drop_profile/config/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/drop_profiles/drop_profile/config/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/drop_profiles/drop_profile/config/max_queue_depth_packets (uint32)

    YANG Description: The maximum depth of the queue in packets.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/drop_profiles/drop_profile/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: The maximum depth of the queue in packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_type = __builtin__.property(_get_queue_type, _set_queue_type)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('max_queue_depth_packets', max_queue_depth_packets), ])


class yc_config_openconfig_qos__qos_drop_profiles_drop_profile_red_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/red/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'red', u'config']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_red_openconfig_qos__qos_drop_profiles_drop_profile_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to RED-managed queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__config',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'red']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config (container)

    YANG Description: Configuration data for RED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = OrderedDict([('config', config), ])


class yc_config_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes/traffic-class/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for WRED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes', u'traffic-class', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/name (string)

    YANG Description: Descriptive name and key for the class
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Descriptive name and key for the class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/id (identityref)

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/id (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  id = __builtin__.property(_get_id, _set_id)
  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_traffic_class_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes/traffic-class. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of classes
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config',)

  _yang_name = 'traffic-class'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes', u'traffic-class']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/name (leafref)

    YANG Description: Reference to the class name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the class name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config (container)

    YANG Description: Configuration data for WRED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for WRED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ])


class yc_traffic_classes_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of Weighted RED class confgurations for QoS queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class',)

  _yang_name = 'traffic-classes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes']

  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class (list)

    YANG Description: List of classes
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: List of classes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)


  _pyangbind_elements = OrderedDict([('traffic_class', traffic_class), ])


class yc_wred_openconfig_qos__qos_drop_profiles_drop_profile_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to Weighted RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_classes',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred']

  def _get_traffic_classes(self):
    """
    Getter method for traffic_classes, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes (container)

    YANG Description: A list of Weighted RED class confgurations for QoS queues
    """
    return self.__traffic_classes
      
  def _set_traffic_classes(self, v, load=False):
    """
    Setter method for traffic_classes, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_classes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_classes() directly.

    YANG Description: A list of Weighted RED class confgurations for QoS queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_traffic_classes_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_classes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_traffic_classes_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__traffic_classes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_classes(self):
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  traffic_classes = __builtin__.property(_get_traffic_classes, _set_traffic_classes)


  _pyangbind_elements = OrderedDict([('traffic_classes', traffic_classes), ])


class yc_drop_profile_openconfig_qos__qos_drop_profiles_drop_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles/drop-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__red','__wred',)

  _yang_name = 'drop-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__red = YANGDynClass(base=yc_red_openconfig_qos__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/name (leafref)

    YANG Description: Refernce to the name of the drop profile
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Refernce to the name of the drop profile
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/config (container)

    YANG Description: Configuration parameters relating to the drop profile.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the drop profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /qos/drop_profiles/drop_profile/red (container)

    YANG Description: Top-level container for data related to RED-managed queues
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /qos/drop_profiles/drop_profile/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Top-level container for data related to RED-managed queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_openconfig_qos__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_openconfig_qos__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_openconfig_qos__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /qos/drop_profiles/drop_profile/wred (container)

    YANG Description: Top-level container for data related to Weighted RED queues
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /qos/drop_profiles/drop_profile/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Top-level container for data related to Weighted RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_openconfig_qos__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_openconfig_qos__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  red = __builtin__.property(_get_red, _set_red)
  wred = __builtin__.property(_get_wred, _set_wred)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('red', red), ('wred', wred), ])


class yc_drop_profiles_openconfig_qos__qos_drop_profiles(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos/drop-profiles. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of configured drop profiles.
  """
  __slots__ = ('_path_helper', '_extmethods', '__drop_profile',)

  _yang_name = 'drop-profiles'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__drop_profile = YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles']

  def _get_drop_profile(self):
    """
    Getter method for drop_profile, mapped from YANG variable /qos/drop_profiles/drop_profile (list)

    YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
    """
    return self.__drop_profile
      
  def _set_drop_profile(self, v, load=False):
    """
    Setter method for drop_profile, mapped from YANG variable /qos/drop_profiles/drop_profile (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profile() directly.

    YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_drop_profile_openconfig_qos__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profile must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__drop_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profile(self):
    self.__drop_profile = YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  drop_profile = __builtin__.property(_get_drop_profile, _set_drop_profile)


  _pyangbind_elements = OrderedDict([('drop_profile', drop_profile), ])


class yc_qos_openconfig_qos__qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__queues','__scheduler_policies','__drop_profiles',)

  _yang_name = 'qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_qos__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=yc_scheduler_policies_openconfig_qos__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__drop_profiles = YANGDynClass(base=yc_drop_profiles_openconfig_qos__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interfaces_openconfig_qos__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interfaces_openconfig_qos__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_qos__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_queues_openconfig_qos__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_queues_openconfig_qos__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_scheduler_policies_openconfig_qos__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_scheduler_policies_openconfig_qos__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=yc_scheduler_policies_openconfig_qos__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_drop_profiles(self):
    """
    Getter method for drop_profiles, mapped from YANG variable /qos/drop_profiles (container)

    YANG Description: Enclosing container for the list of configured drop profiles.
    """
    return self.__drop_profiles
      
  def _set_drop_profiles(self, v, load=False):
    """
    Setter method for drop_profiles, mapped from YANG variable /qos/drop_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profiles() directly.

    YANG Description: Enclosing container for the list of configured drop profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_drop_profiles_openconfig_qos__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_drop_profiles_openconfig_qos__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__drop_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profiles(self):
    self.__drop_profiles = YANGDynClass(base=yc_drop_profiles_openconfig_qos__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  drop_profiles = __builtin__.property(_get_drop_profiles, _set_drop_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('queues', queues), ('scheduler_policies', scheduler_policies), ('drop_profiles', drop_profiles), ])


class openconfig_qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos - based on the path /openconfig-qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This module defines configuration and operational state data
related to network quality-of-service.
  """
  __slots__ = ('_path_helper', '_extmethods', '__qos',)

  _yang_name = 'openconfig-qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__qos = YANGDynClass(base=yc_qos_openconfig_qos__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_qos(self):
    """
    Getter method for qos, mapped from YANG variable /qos (container)

    YANG Description: Top-level container for QoS data
    """
    return self.__qos
      
  def _set_qos(self, v, load=False):
    """
    Setter method for qos, mapped from YANG variable /qos (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_qos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_qos() directly.

    YANG Description: Top-level container for QoS data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_qos_openconfig_qos__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """qos must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_qos_openconfig_qos__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__qos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_qos(self):
    self.__qos = YANGDynClass(base=yc_qos_openconfig_qos__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  qos = __builtin__.property(_get_qos, _set_qos)


  _pyangbind_elements = OrderedDict([('qos', qos), ])


class yc_config_openconfig_qos_interfaces__qos_interfaces_interface_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'config']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/config/interface_id (string)

    YANG Description: Identifier for the interface.
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/config/interface_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Identifier for the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ])


class yc_state_openconfig_qos_interfaces__qos_interfaces_interface_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/state/interface_id (string)

    YANG Description: Identifier for the interface.
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/state/interface_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Identifier for the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ])


class yc_config_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/interface-ref/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configured reference to interface / subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref', u'config']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_state_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/interface-ref/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for interface-ref
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref', u'state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  interface = __builtin__.property(_get_interface)
  subinterface = __builtin__.property(_get_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/interface-ref. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Reference to an interface or subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'interface-ref'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/interface_ref/config (container)

    YANG Description: Configured reference to interface / subinterface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/interface_ref/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configured reference to interface / subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/interface_ref/state (container)

    YANG Description: Operational state for interface-ref
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/interface_ref/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for interface-ref
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/interface-ref/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configured reference to interface / subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref', u'config']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/interface-ref/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for interface-ref
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref', u'state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  interface = __builtin__.property(_get_interface)
  subinterface = __builtin__.property(_get_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/interface-ref. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Reference to an interface or subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'interface-ref'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config (container)

    YANG Description: Configured reference to interface / subinterface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configured reference to interface / subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state (container)

    YANG Description: Operational state for interface-ref
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for interface-ref
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/queues/queue/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__max_queue_len','__avg_queue_len','__transmit_pkts','__transmit_octets','__dropped_pkts',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_max_queue_len(self):
    """
    Getter method for max_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/max_queue_len (oc-yang:counter64)

    YANG Description: Maximum observed queue length
    """
    return self.__max_queue_len
      
  def _set_max_queue_len(self, v, load=False):
    """
    Setter method for max_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/max_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_len() directly.

    YANG Description: Maximum observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__max_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_len(self):
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_avg_queue_len(self):
    """
    Getter method for avg_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/avg_queue_len (oc-yang:counter64)

    YANG Description: Average observed queue length
    """
    return self.__avg_queue_len
      
  def _set_avg_queue_len(self, v, load=False):
    """
    Setter method for avg_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/avg_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_queue_len() directly.

    YANG Description: Average observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__avg_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_queue_len(self):
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_pkts(self):
    """
    Getter method for transmit_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_pkts (oc-yang:counter64)

    YANG Description: Number of packets transmitted by this queue
    """
    return self.__transmit_pkts
      
  def _set_transmit_pkts(self, v, load=False):
    """
    Setter method for transmit_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_pkts() directly.

    YANG Description: Number of packets transmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_pkts(self):
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_octets(self):
    """
    Getter method for transmit_octets, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_octets (oc-yang:counter64)

    YANG Description: Number of octets trasmitted by this queue
    """
    return self.__transmit_octets
      
  def _set_transmit_octets(self, v, load=False):
    """
    Setter method for transmit_octets, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_octets() directly.

    YANG Description: Number of octets trasmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_octets(self):
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_pkts(self):
    """
    Getter method for dropped_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/dropped_pkts (oc-yang:counter64)

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    return self.__dropped_pkts
      
  def _set_dropped_pkts(self, v, load=False):
    """
    Setter method for dropped_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/dropped_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_pkts() directly.

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_pkts(self):
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  max_queue_len = __builtin__.property(_get_max_queue_len)
  avg_queue_len = __builtin__.property(_get_avg_queue_len)
  transmit_pkts = __builtin__.property(_get_transmit_pkts)
  transmit_octets = __builtin__.property(_get_transmit_octets)
  dropped_pkts = __builtin__.property(_get_dropped_pkts)


  _pyangbind_elements = OrderedDict([('name', name), ('max_queue_len', max_queue_len), ('avg_queue_len', avg_queue_len), ('transmit_pkts', transmit_pkts), ('transmit_octets', transmit_octets), ('dropped_pkts', dropped_pkts), ])


class yc_queue_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/queues/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the queue associated with this
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/name (leafref)

    YANG Description: Reference to the name of the queue
instantiated on the interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the queue
instantiated on the interface.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config (container)

    YANG Description: Configuration data for the queue associated with the
interface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for the queue associated with the
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state (container)

    YANG Description: Operational state data for the queue associated with the
interface
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for the queue associated with the
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ])


class yc_queues_openconfig_qos_interfaces__qos_interfaces_interface_output_queues(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/queues. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue',)

  _yang_name = 'queues'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/interfaces/interface/output/queues/queue (list)

    YANG Description: Top-level container for the queue associated with this
interface
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/interfaces/interface/output/queues/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Top-level container for the queue associated with this
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)


  _pyangbind_elements = OrderedDict([('queue', queue), ])


class yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/scheduler-policy/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config/name (leafref)

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/scheduler-policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state/name (leafref)

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  name = __builtin__.property(_get_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers', u'scheduler', u'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class yc_scheduler_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__state',)

  _yang_name = 'scheduler'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers', u'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the sequence ID for the scheduler.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID for the scheduler.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state parameters relating to the scheduler
policy.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the scheduler
policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  state = __builtin__.property(_get_state)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('state', state), ])


class yc_schedulers_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Schedulers within the applied scheduler-policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler',)

  _yang_name = 'schedulers'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers']

  def _get_scheduler(self):
    """
    Getter method for scheduler, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler (list)

    YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
    """
    return self.__scheduler
      
  def _set_scheduler(self, v, load=False):
    """
    Setter method for scheduler, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler() directly.

    YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)""",
        })

    self.__scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler(self):
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)

  scheduler = __builtin__.property(_get_scheduler)


  _pyangbind_elements = OrderedDict([('scheduler', scheduler), ])


class yc_scheduler_policy_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output/scheduler-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Scheduler policy associated with the interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__schedulers',)

  _yang_name = 'scheduler-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config (container)

    YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state (container)

    YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_schedulers(self):
    """
    Getter method for schedulers, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers (container)

    YANG Description: Schedulers within the applied scheduler-policy.
    """
    return self.__schedulers
      
  def _set_schedulers(self, v, load=False):
    """
    Setter method for schedulers, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedulers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedulers() directly.

    YANG Description: Schedulers within the applied scheduler-policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_schedulers_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedulers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_schedulers_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__schedulers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedulers(self):
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  schedulers = __builtin__.property(_get_schedulers, _set_schedulers)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('schedulers', schedulers), ])


class yc_output_openconfig_qos_interfaces__qos_interfaces_interface_output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data related to the egress
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_ref','__queues','__scheduler_policy',)

  _yang_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler_policy = YANGDynClass(base=yc_scheduler_policy_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_interfaces__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output']

  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/output/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/output/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/interfaces/interface/output/queues (container)

    YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/interfaces/interface/output/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_queues_openconfig_qos_interfaces__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_queues_openconfig_qos_interfaces__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_interfaces__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policy(self):
    """
    Getter method for scheduler_policy, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy (container)

    YANG Description: Scheduler policy associated with the interface.
    """
    return self.__scheduler_policy
      
  def _set_scheduler_policy(self, v, load=False):
    """
    Setter method for scheduler_policy, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policy() directly.

    YANG Description: Scheduler policy associated with the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_scheduler_policy_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_scheduler_policy_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policy(self):
    self.__scheduler_policy = YANGDynClass(base=yc_scheduler_policy_openconfig_qos_interfaces__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interface_ref = __builtin__.property(_get_interface_ref, _set_interface_ref)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policy = __builtin__.property(_get_scheduler_policy, _set_scheduler_policy)


  _pyangbind_elements = OrderedDict([('interface_ref', interface_ref), ('queues', queues), ('scheduler_policy', scheduler_policy), ])


class yc_interface_openconfig_qos_interfaces__qos_interfaces_interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of interfaces referenced by QoS entities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__config','__state','__interface_ref','__output',)

  _yang_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_interfaces__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/interface_id (leafref)

    YANG Description: Reference to the interface-id list key
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/interface_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Reference to the interface-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/config (container)

    YANG Description: Configuration data 
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/state (container)

    YANG Description: Operational state data 
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_interfaces__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/interfaces/interface/output (container)

    YANG Description: Top-level container for QoS data related to the egress
interface
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/interfaces/interface/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for QoS data related to the egress
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_output_openconfig_qos_interfaces__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_output_openconfig_qos_interfaces__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_interfaces__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  interface_ref = __builtin__.property(_get_interface_ref, _set_interface_ref)
  output = __builtin__.property(_get_output, _set_output)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('config', config), ('state', state), ('interface_ref', interface_ref), ('output', output), ])


class yc_interfaces_openconfig_qos_interfaces__qos_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of interface references
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface',)

  _yang_name = 'interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos_interfaces__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface (list)

    YANG Description: List of interfaces referenced by QoS entities.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: List of interfaces referenced by QoS entities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_id",yc_interface_openconfig_qos_interfaces__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos_interfaces__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos_interfaces__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)


  _pyangbind_elements = OrderedDict([('interface', interface), ])


class yc_config_openconfig_qos_interfaces__qos_queues_queue_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__drop_profile',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__drop_profile = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/config/name (string)

    YANG Description: User-defined name of the queue
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/queues/queue/config/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/queues/queue/config/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)


  def _get_drop_profile(self):
    """
    Getter method for drop_profile, mapped from YANG variable /qos/queues/queue/config/drop_profile (leafref)

    YANG Description: References the drop profile for this queue
    """
    return self.__drop_profile
      
  def _set_drop_profile(self, v, load=False):
    """
    Setter method for drop_profile, mapped from YANG variable /qos/queues/queue/config/drop_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profile() directly.

    YANG Description: References the drop profile for this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__drop_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profile(self):
    self.__drop_profile = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_type = __builtin__.property(_get_queue_type, _set_queue_type)
  drop_profile = __builtin__.property(_get_drop_profile, _set_drop_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('drop_profile', drop_profile), ])


class yc_state_openconfig_qos_interfaces__qos_queues_queue_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__max_queue_len','__avg_queue_len','__transmit_pkts','__transmit_octets','__dropped_pkts',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/state/name (string)

    YANG Description: User-defined name of the queue
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/queues/queue/state/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/queues/queue/state/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_max_queue_len(self):
    """
    Getter method for max_queue_len, mapped from YANG variable /qos/queues/queue/state/max_queue_len (oc-yang:counter64)

    YANG Description: Maximum observed queue length
    """
    return self.__max_queue_len
      
  def _set_max_queue_len(self, v, load=False):
    """
    Setter method for max_queue_len, mapped from YANG variable /qos/queues/queue/state/max_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_len() directly.

    YANG Description: Maximum observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__max_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_len(self):
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_avg_queue_len(self):
    """
    Getter method for avg_queue_len, mapped from YANG variable /qos/queues/queue/state/avg_queue_len (oc-yang:counter64)

    YANG Description: Average observed queue length
    """
    return self.__avg_queue_len
      
  def _set_avg_queue_len(self, v, load=False):
    """
    Setter method for avg_queue_len, mapped from YANG variable /qos/queues/queue/state/avg_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_queue_len() directly.

    YANG Description: Average observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__avg_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_queue_len(self):
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_pkts(self):
    """
    Getter method for transmit_pkts, mapped from YANG variable /qos/queues/queue/state/transmit_pkts (oc-yang:counter64)

    YANG Description: Number of packets transmitted by this queue
    """
    return self.__transmit_pkts
      
  def _set_transmit_pkts(self, v, load=False):
    """
    Setter method for transmit_pkts, mapped from YANG variable /qos/queues/queue/state/transmit_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_pkts() directly.

    YANG Description: Number of packets transmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_pkts(self):
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_octets(self):
    """
    Getter method for transmit_octets, mapped from YANG variable /qos/queues/queue/state/transmit_octets (oc-yang:counter64)

    YANG Description: Number of octets trasmitted by this queue
    """
    return self.__transmit_octets
      
  def _set_transmit_octets(self, v, load=False):
    """
    Setter method for transmit_octets, mapped from YANG variable /qos/queues/queue/state/transmit_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_octets() directly.

    YANG Description: Number of octets trasmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_octets(self):
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_pkts(self):
    """
    Getter method for dropped_pkts, mapped from YANG variable /qos/queues/queue/state/dropped_pkts (oc-yang:counter64)

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    return self.__dropped_pkts
      
  def _set_dropped_pkts(self, v, load=False):
    """
    Setter method for dropped_pkts, mapped from YANG variable /qos/queues/queue/state/dropped_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_pkts() directly.

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_pkts(self):
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  queue_type = __builtin__.property(_get_queue_type)
  max_queue_len = __builtin__.property(_get_max_queue_len)
  avg_queue_len = __builtin__.property(_get_avg_queue_len)
  transmit_pkts = __builtin__.property(_get_transmit_pkts)
  transmit_octets = __builtin__.property(_get_transmit_octets)
  dropped_pkts = __builtin__.property(_get_dropped_pkts)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('max_queue_len', max_queue_len), ('avg_queue_len', avg_queue_len), ('transmit_pkts', transmit_pkts), ('transmit_octets', transmit_octets), ('dropped_pkts', dropped_pkts), ])


class yc_config_openconfig_qos_interfaces__qos_queues_queue_red_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/red/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red', u'config']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/red/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/red/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/red/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/red/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/red/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/red/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_state_openconfig_qos_interfaces__qos_queues_queue_red_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/red/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__random_dropped_pkts','__random_dropped_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red', u'state']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/red/state/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/red/state/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/red/state/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/red/state/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_random_dropped_pkts(self):
    """
    Getter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_pkts (uint32)

    YANG Description: The number of random drop packets.
    """
    return self.__random_dropped_pkts
      
  def _set_random_dropped_pkts(self, v, load=False):
    """
    Setter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_pkts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_pkts() directly.

    YANG Description: The number of random drop packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_pkts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)""",
        })

    self.__random_dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_pkts(self):
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)


  def _get_random_dropped_octets(self):
    """
    Getter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_octets (uint64)

    YANG Description: The number of random drop bytes.
    """
    return self.__random_dropped_octets
      
  def _set_random_dropped_octets(self, v, load=False):
    """
    Setter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_octets (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_octets() directly.

    YANG Description: The number of random drop bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_octets must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__random_dropped_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_octets(self):
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)

  minth = __builtin__.property(_get_minth)
  maxth = __builtin__.property(_get_maxth)
  random_dropped_pkts = __builtin__.property(_get_random_dropped_pkts)
  random_dropped_octets = __builtin__.property(_get_random_dropped_octets)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('random_dropped_pkts', random_dropped_pkts), ('random_dropped_octets', random_dropped_octets), ])


class yc_red_openconfig_qos_interfaces__qos_queues_queue_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to RED-managed
queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/red/config (container)

    YANG Description: Configuration data for RED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/red/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/red/state (container)

    YANG Description: Operational state data for RED queues
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/red/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for WRED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/name (string)

    YANG Description: Descriptive name and key for the class
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Descriptive name and key for the class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/id (identityref)

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/id (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  id = __builtin__.property(_get_id, _set_id)
  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_state_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for WRED
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob','__random_dropped_pkts','__random_dropped_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class', u'state']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)


  def _get_random_dropped_pkts(self):
    """
    Getter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_pkts (uint32)

    YANG Description: The number of random drop packets.
    """
    return self.__random_dropped_pkts
      
  def _set_random_dropped_pkts(self, v, load=False):
    """
    Setter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_pkts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_pkts() directly.

    YANG Description: The number of random drop packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_pkts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)""",
        })

    self.__random_dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_pkts(self):
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)


  def _get_random_dropped_octets(self):
    """
    Getter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_octets (uint64)

    YANG Description: The number of random drop bytes.
    """
    return self.__random_dropped_octets
      
  def _set_random_dropped_octets(self, v, load=False):
    """
    Setter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_octets (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_octets() directly.

    YANG Description: The number of random drop bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_octets must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__random_dropped_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_octets(self):
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)

  minth = __builtin__.property(_get_minth)
  maxth = __builtin__.property(_get_maxth)
  maxprob = __builtin__.property(_get_maxprob)
  random_dropped_pkts = __builtin__.property(_get_random_dropped_pkts)
  random_dropped_octets = __builtin__.property(_get_random_dropped_octets)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ('random_dropped_pkts', random_dropped_pkts), ('random_dropped_octets', random_dropped_octets), ])


class yc_traffic_class_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of classes
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state',)

  _yang_name = 'traffic-class'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/name (leafref)

    YANG Description: Reference to the class name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the class name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config (container)

    YANG Description: Configuration data for WRED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for WRED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state (container)

    YANG Description: Operational state data for WRED
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for WRED
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ])


class yc_traffic_classes_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/wred/traffic-classes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of classes for Weighted RED QoS queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class',)

  _yang_name = 'traffic-classes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes']

  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class (list)

    YANG Description: List of classes
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: List of classes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)


  _pyangbind_elements = OrderedDict([('traffic_class', traffic_class), ])


class yc_wred_openconfig_qos_interfaces__qos_queues_queue_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for WRED data
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_classes',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred']

  def _get_traffic_classes(self):
    """
    Getter method for traffic_classes, mapped from YANG variable /qos/queues/queue/wred/traffic_classes (container)

    YANG Description: A list of classes for Weighted RED QoS queues
    """
    return self.__traffic_classes
      
  def _set_traffic_classes(self, v, load=False):
    """
    Setter method for traffic_classes, mapped from YANG variable /qos/queues/queue/wred/traffic_classes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_classes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_classes() directly.

    YANG Description: A list of classes for Weighted RED QoS queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_traffic_classes_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_classes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_traffic_classes_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__traffic_classes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_classes(self):
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_interfaces__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  traffic_classes = __builtin__.property(_get_traffic_classes, _set_traffic_classes)


  _pyangbind_elements = OrderedDict([('traffic_classes', traffic_classes), ])


class yc_queue_openconfig_qos_interfaces__qos_queues_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__red','__wred',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_interfaces__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_interfaces__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/name (leafref)

    YANG Description: Reference to the queue name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/config (container)

    YANG Description: Configuration data for queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/state (container)

    YANG Description: Operational state data for queues
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /qos/queues/queue/red (container)

    YANG Description: Top-level container for data related to RED-managed
queues
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /qos/queues/queue/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Top-level container for data related to RED-managed
queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_openconfig_qos_interfaces__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_openconfig_qos_interfaces__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_interfaces__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /qos/queues/queue/wred (container)

    YANG Description: Top-level container for WRED data
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /qos/queues/queue/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Top-level container for WRED data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_openconfig_qos_interfaces__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_openconfig_qos_interfaces__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_interfaces__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  red = __builtin__.property(_get_red, _set_red)
  wred = __builtin__.property(_get_wred, _set_wred)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('red', red), ('wred', wred), ])


class yc_queues_openconfig_qos_interfaces__qos_queues(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/queues. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue',)

  _yang_name = 'queues'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/queues/queue (list)

    YANG Description: List of defined queues
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/queues/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: List of defined queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_interfaces__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)


  _pyangbind_elements = OrderedDict([('queue', queue), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__root_scheduler',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__root_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/name (string)

    YANG Description: Name for the scheduler policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_root_scheduler(self):
    """
    Getter method for root_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/root_scheduler (leafref)

    YANG Description: This is the root scheduler in a Hierarchical QoS model
and helps in identifying which scheduler in a scheduler
policy is associated with an interface.
    """
    return self.__root_scheduler
      
  def _set_root_scheduler(self, v, load=False):
    """
    Setter method for root_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/root_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_root_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_root_scheduler() directly.

    YANG Description: This is the root scheduler in a Hierarchical QoS model
and helps in identifying which scheduler in a scheduler
policy is associated with an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """root_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__root_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_root_scheduler(self):
    self.__root_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  root_scheduler = __builtin__.property(_get_root_scheduler, _set_root_scheduler)


  _pyangbind_elements = OrderedDict([('name', name), ('root_scheduler', root_scheduler), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to a scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state/name (string)

    YANG Description: Name for the scheduler policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

  name = __builtin__.property(_get_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority','__name','__level',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'config']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/name (string)

    YANG Description: Name for this scheduler

Note: it would probably make more sense to have this as the
      key rather than the sequeunce number as it allows a
      more flexible way to name and index the schedulers.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for this scheduler

Note: it would probably make more sense to have this as the
      key rather than the sequeunce number as it allows a
      more flexible way to name and index the schedulers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/level (uint8)

    YANG Description: The level of the scheduler with the root node scheduler starting
at level 0 and then the siblings being greater than parent.
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: The level of the scheduler with the root node scheduler starting
at level 0 and then the siblings being greater than parent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  type = __builtin__.property(_get_type, _set_type)
  priority = __builtin__.property(_get_priority, _set_priority)
  name = __builtin__.property(_get_name, _set_name)
  level = __builtin__.property(_get_level, _set_level)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ('name', name), ('level', level), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler input sources
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__input_type','__queue','__weight','__priority','__input_scheduler',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__input_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input', u'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/id (string)

    YANG Description: User-defined identifier for the scheduler input
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: User-defined identifier for the scheduler input
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_input_type(self):
    """
    Getter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_type (enumeration)

    YANG Description: Describes the type of input source for the scheduler
    """
    return self.__input_type
      
  def _set_input_type(self, v, load=False):
    """
    Setter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_type() directly.

    YANG Description: Describes the type of input source for the scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__input_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_type(self):
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/queue (leafref)

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/queue (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/weight (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/weight (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/priority (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/priority (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_input_scheduler(self):
    """
    Getter method for input_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_scheduler (leafref)

    YANG Description: When the scheduler input type is scheduler, this leaf
provides a reference to the upstream scheduler policy.

Note: the scheduler list should really use a 'name' string
      as the key instead of a sequence number.

Note 2: The OpenConfig HQoS model has got the parent
      child concept backwards in regards to the schedulers
      and input/output.  In other words, the 'parent' scheduler
      should be the scheduler closest to the interface and as
      such should be on the 'output' configuration of the
      scheduler.  While the 'child' schedulers should be closest
      to the 'queues' and as such on the 'input' configuration
      of the scheduler.

      To avoid confusion we're using the name 'input-scheduler'
      here and deleted the 'child-scheduler' leaf in
      the output container
    """
    return self.__input_scheduler
      
  def _set_input_scheduler(self, v, load=False):
    """
    Setter method for input_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_scheduler() directly.

    YANG Description: When the scheduler input type is scheduler, this leaf
provides a reference to the upstream scheduler policy.

Note: the scheduler list should really use a 'name' string
      as the key instead of a sequence number.

Note 2: The OpenConfig HQoS model has got the parent
      child concept backwards in regards to the schedulers
      and input/output.  In other words, the 'parent' scheduler
      should be the scheduler closest to the interface and as
      such should be on the 'output' configuration of the
      scheduler.  While the 'child' schedulers should be closest
      to the 'queues' and as such on the 'input' configuration
      of the scheduler.

      To avoid confusion we're using the name 'input-scheduler'
      here and deleted the 'child-scheduler' leaf in
      the output container
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__input_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_scheduler(self):
    self.__input_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  input_type = __builtin__.property(_get_input_type, _set_input_type)
  queue = __builtin__.property(_get_queue, _set_queue)
  weight = __builtin__.property(_get_weight, _set_weight)
  priority = __builtin__.property(_get_priority, _set_priority)
  input_scheduler = __builtin__.property(_get_input_scheduler, _set_input_scheduler)


  _pyangbind_elements = OrderedDict([('id', id), ('input_type', input_type), ('queue', queue), ('weight', weight), ('priority', priority), ('input_scheduler', input_scheduler), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for scheduler input sources
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__input_type','__queue','__weight',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input', u'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/id (string)

    YANG Description: User-defined identifier for the scheduler input
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: User-defined identifier for the scheduler input
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_input_type(self):
    """
    Getter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/input_type (enumeration)

    YANG Description: Describes the type of input source for the scheduler
    """
    return self.__input_type
      
  def _set_input_type(self, v, load=False):
    """
    Setter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/input_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_type() directly.

    YANG Description: Describes the type of input source for the scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__input_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_type(self):
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/queue (leafref)

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/queue (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/weight (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/weight (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

  id = __builtin__.property(_get_id)
  input_type = __builtin__.property(_get_input_type)
  queue = __builtin__.property(_get_queue)
  weight = __builtin__.property(_get_weight)


  _pyangbind_elements = OrderedDict([('id', id), ('input_type', input_type), ('queue', queue), ('weight', weight), ])


class yc_input_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of input sources for the scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__config','__state',)

  _yang_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/id (leafref)

    YANG Description: Reference to list key
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Reference to list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config (container)

    YANG Description: Configuration data for scheduler input sources
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for scheduler input sources
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state (container)

    YANG Description: Operational state data for scheduler input sources
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for scheduler input sources
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('id', id), ('config', config), ('state', state), ])


class yc_inputs_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container 
  """
  __slots__ = ('_path_helper', '_extmethods', '__input',)

  _yang_name = 'inputs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__input = YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs']

  def _get_input(self):
    """
    Getter method for input, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input (list)

    YANG Description: List of input sources for the scheduler.
    """
    return self.__input
      
  def _set_input(self, v, load=False):
    """
    Setter method for input, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input() directly.

    YANG Description: List of input sources for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_input_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__input = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input(self):
    self.__input = YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  input = __builtin__.property(_get_input, _set_input)


  _pyangbind_elements = OrderedDict([('input', input), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__output_fwd_group',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output', u'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('output_fwd_group', output_fwd_group), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__child_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output', u'state']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  output_type = __builtin__.property(_get_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class yc_output_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for scheduler output data
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config (container)

    YANG Description: Configuration data for scheduler output
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for scheduler output
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state (container)

    YANG Description: Operational state data for scheduler output
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for scheduler output
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'state']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  cir = __builtin__.property(_get_cir)
  cir_pct = __builtin__.property(_get_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining)
  bc = __builtin__.property(_get_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'conform-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config (container)

    YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state (container)

    YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'exceed-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config (container)

    YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state (container)

    YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_one_rate_two_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action',)

  _yang_name = 'one-rate-two-color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config (container)

    YANG Description: Configuration data for 1 rate, 2 color shapers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 1 rate, 2 color shapers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state (container)

    YANG Description: Operational state data for 1 rate, 2 color shapers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 1 rate, 2 color shapers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action (container)

    YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action (container)

    YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'state']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)

  cir = __builtin__.property(_get_cir)
  cir_pct = __builtin__.property(_get_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining)
  pir = __builtin__.property(_get_pir)
  pir_pct = __builtin__.property(_get_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining)
  bc = __builtin__.property(_get_bc)
  be = __builtin__.property(_get_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for the conform action of a
2r3c policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'conform-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config (container)

    YANG Description: Configuration parameters for the conform action of a
2r3c policer.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters for the conform action of a
2r3c policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state (container)

    YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'exceed-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config (container)

    YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state (container)

    YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the action
applied to violating packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the action
applied to violating packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_violate_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'violate-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config (container)

    YANG Description: Configuration parameters relating to the action
applied to violating packets.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the action
applied to violating packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state (container)

    YANG Description: Operational state parameters relating to the action
applied to violating packets.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the action
applied to violating packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_two_rate_three_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=yc_violate_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_violate_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_violate_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=yc_violate_action_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


class yc_scheduler_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__inputs = YANGDynClass(base=yc_inputs_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=yc_two_rate_three_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=yc_one_rate_two_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_inputs_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_inputs_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=yc_inputs_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_output_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_output_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_one_rate_two_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_one_rate_two_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=yc_one_rate_two_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_two_rate_three_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_two_rate_three_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=yc_two_rate_three_color_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


class yc_schedulers_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy/schedulers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Schedulers within the scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler',)

  _yang_name = 'schedulers'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers']

  def _get_scheduler(self):
    """
    Getter method for scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler (list)

    YANG Description: List of defined QoS traffic schedulers.
    """
    return self.__scheduler
      
  def _set_scheduler(self, v, load=False):
    """
    Setter method for scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler() directly.

    YANG Description: List of defined QoS traffic schedulers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler(self):
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  scheduler = __builtin__.property(_get_scheduler, _set_scheduler)


  _pyangbind_elements = OrderedDict([('scheduler', scheduler), ])


class yc_scheduler_policy_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies/scheduler-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__schedulers',)

  _yang_name = 'scheduler-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/name (leafref)

    YANG Description: Reference to the name of the scheduler policy
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the scheduler policy
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config (container)

    YANG Description: Configuration parameters relating to a scheduler policy.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to a scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state (container)

    YANG Description: Operational state parameters relating to a scheduler policy.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to a scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_schedulers(self):
    """
    Getter method for schedulers, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers (container)

    YANG Description: Schedulers within the scheduler policy.
    """
    return self.__schedulers
      
  def _set_schedulers(self, v, load=False):
    """
    Setter method for schedulers, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedulers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedulers() directly.

    YANG Description: Schedulers within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_schedulers_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedulers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_schedulers_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__schedulers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedulers(self):
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  schedulers = __builtin__.property(_get_schedulers, _set_schedulers)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('schedulers', schedulers), ])


class yc_scheduler_policies_openconfig_qos_interfaces__qos_scheduler_policies(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/scheduler-policies. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of configured scheduler policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler_policy',)

  _yang_name = 'scheduler-policies'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler_policy = YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies']

  def _get_scheduler_policy(self):
    """
    Getter method for scheduler_policy, mapped from YANG variable /qos/scheduler_policies/scheduler_policy (list)

    YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
    """
    return self.__scheduler_policy
      
  def _set_scheduler_policy(self, v, load=False):
    """
    Setter method for scheduler_policy, mapped from YANG variable /qos/scheduler_policies/scheduler_policy (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policy() directly.

    YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_scheduler_policy_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policy must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__scheduler_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policy(self):
    self.__scheduler_policy = YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos_interfaces__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  scheduler_policy = __builtin__.property(_get_scheduler_policy, _set_scheduler_policy)


  _pyangbind_elements = OrderedDict([('scheduler_policy', scheduler_policy), ])


class yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the drop profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__max_queue_depth_packets',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/config/name (string)

    YANG Description: Name of the drop profile
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the drop profile
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/drop_profiles/drop_profile/config/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/drop_profiles/drop_profile/config/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/drop_profiles/drop_profile/config/max_queue_depth_packets (uint32)

    YANG Description: The maximum depth of the queue in packets.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/drop_profiles/drop_profile/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: The maximum depth of the queue in packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_type = __builtin__.property(_get_queue_type, _set_queue_type)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('max_queue_depth_packets', max_queue_depth_packets), ])


class yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/red/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'red', u'config']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_red_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to RED-managed queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__config',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'red']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config (container)

    YANG Description: Configuration data for RED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = OrderedDict([('config', config), ])


class yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes/traffic-class/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for WRED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes', u'traffic-class', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/name (string)

    YANG Description: Descriptive name and key for the class
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Descriptive name and key for the class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/id (identityref)

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/id (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  id = __builtin__.property(_get_id, _set_id)
  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_traffic_class_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes/traffic-class. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of classes
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config',)

  _yang_name = 'traffic-class'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes', u'traffic-class']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/name (leafref)

    YANG Description: Reference to the class name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the class name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config (container)

    YANG Description: Configuration data for WRED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for WRED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ])


class yc_traffic_classes_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of Weighted RED class confgurations for QoS queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class',)

  _yang_name = 'traffic-classes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes']

  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class (list)

    YANG Description: List of classes
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: List of classes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)


  _pyangbind_elements = OrderedDict([('traffic_class', traffic_class), ])


class yc_wred_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to Weighted RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_classes',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred']

  def _get_traffic_classes(self):
    """
    Getter method for traffic_classes, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes (container)

    YANG Description: A list of Weighted RED class confgurations for QoS queues
    """
    return self.__traffic_classes
      
  def _set_traffic_classes(self, v, load=False):
    """
    Setter method for traffic_classes, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_classes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_classes() directly.

    YANG Description: A list of Weighted RED class confgurations for QoS queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_traffic_classes_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_classes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_traffic_classes_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__traffic_classes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_classes(self):
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  traffic_classes = __builtin__.property(_get_traffic_classes, _set_traffic_classes)


  _pyangbind_elements = OrderedDict([('traffic_classes', traffic_classes), ])


class yc_drop_profile_openconfig_qos_interfaces__qos_drop_profiles_drop_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles/drop-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__red','__wred',)

  _yang_name = 'drop-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/name (leafref)

    YANG Description: Refernce to the name of the drop profile
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Refernce to the name of the drop profile
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/config (container)

    YANG Description: Configuration parameters relating to the drop profile.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the drop profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /qos/drop_profiles/drop_profile/red (container)

    YANG Description: Top-level container for data related to RED-managed queues
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /qos/drop_profiles/drop_profile/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Top-level container for data related to RED-managed queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /qos/drop_profiles/drop_profile/wred (container)

    YANG Description: Top-level container for data related to Weighted RED queues
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /qos/drop_profiles/drop_profile/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Top-level container for data related to Weighted RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_interfaces__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  red = __builtin__.property(_get_red, _set_red)
  wred = __builtin__.property(_get_wred, _set_wred)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('red', red), ('wred', wred), ])


class yc_drop_profiles_openconfig_qos_interfaces__qos_drop_profiles(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos/drop-profiles. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of configured drop profiles.
  """
  __slots__ = ('_path_helper', '_extmethods', '__drop_profile',)

  _yang_name = 'drop-profiles'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__drop_profile = YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos_interfaces__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles']

  def _get_drop_profile(self):
    """
    Getter method for drop_profile, mapped from YANG variable /qos/drop_profiles/drop_profile (list)

    YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
    """
    return self.__drop_profile
      
  def _set_drop_profile(self, v, load=False):
    """
    Setter method for drop_profile, mapped from YANG variable /qos/drop_profiles/drop_profile (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profile() directly.

    YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_drop_profile_openconfig_qos_interfaces__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profile must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos_interfaces__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__drop_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profile(self):
    self.__drop_profile = YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos_interfaces__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  drop_profile = __builtin__.property(_get_drop_profile, _set_drop_profile)


  _pyangbind_elements = OrderedDict([('drop_profile', drop_profile), ])


class yc_qos_openconfig_qos_interfaces__qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__queues','__scheduler_policies','__drop_profiles',)

  _yang_name = 'qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_qos_interfaces__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_interfaces__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=yc_scheduler_policies_openconfig_qos_interfaces__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__drop_profiles = YANGDynClass(base=yc_drop_profiles_openconfig_qos_interfaces__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interfaces_openconfig_qos_interfaces__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interfaces_openconfig_qos_interfaces__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_qos_interfaces__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_queues_openconfig_qos_interfaces__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_queues_openconfig_qos_interfaces__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_interfaces__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_scheduler_policies_openconfig_qos_interfaces__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_scheduler_policies_openconfig_qos_interfaces__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=yc_scheduler_policies_openconfig_qos_interfaces__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_drop_profiles(self):
    """
    Getter method for drop_profiles, mapped from YANG variable /qos/drop_profiles (container)

    YANG Description: Enclosing container for the list of configured drop profiles.
    """
    return self.__drop_profiles
      
  def _set_drop_profiles(self, v, load=False):
    """
    Setter method for drop_profiles, mapped from YANG variable /qos/drop_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profiles() directly.

    YANG Description: Enclosing container for the list of configured drop profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_drop_profiles_openconfig_qos_interfaces__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_drop_profiles_openconfig_qos_interfaces__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__drop_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profiles(self):
    self.__drop_profiles = YANGDynClass(base=yc_drop_profiles_openconfig_qos_interfaces__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  drop_profiles = __builtin__.property(_get_drop_profiles, _set_drop_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('queues', queues), ('scheduler_policies', scheduler_policies), ('drop_profiles', drop_profiles), ])


class openconfig_qos_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /openconfig-qos-interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This submodule defines data related to quality-of-service
configuration and operational state associated with
interfaces.
  """
  __slots__ = ('_path_helper', '_extmethods', '__qos',)

  _yang_name = 'openconfig-qos-interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__qos = YANGDynClass(base=yc_qos_openconfig_qos_interfaces__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_qos(self):
    """
    Getter method for qos, mapped from YANG variable /qos (container)

    YANG Description: Top-level container for QoS data
    """
    return self.__qos
      
  def _set_qos(self, v, load=False):
    """
    Setter method for qos, mapped from YANG variable /qos (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_qos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_qos() directly.

    YANG Description: Top-level container for QoS data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_qos_openconfig_qos_interfaces__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """qos must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_qos_openconfig_qos_interfaces__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__qos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_qos(self):
    self.__qos = YANGDynClass(base=yc_qos_openconfig_qos_interfaces__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  qos = __builtin__.property(_get_qos, _set_qos)


  _pyangbind_elements = OrderedDict([('qos', qos), ])


class yc_config_openconfig_qos_elements__qos_interfaces_interface_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'config']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/config/interface_id (string)

    YANG Description: Identifier for the interface.
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/config/interface_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Identifier for the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ])


class yc_state_openconfig_qos_elements__qos_interfaces_interface_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'state']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/state/interface_id (string)

    YANG Description: Identifier for the interface.
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/state/interface_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Identifier for the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

  interface_id = __builtin__.property(_get_interface_id)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ])


class yc_config_openconfig_qos_elements__qos_interfaces_interface_interface_ref_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/interface-ref/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configured reference to interface / subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref', u'config']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_state_openconfig_qos_elements__qos_interfaces_interface_interface_ref_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/interface-ref/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for interface-ref
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref', u'state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/interface_ref/state/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  interface = __builtin__.property(_get_interface)
  subinterface = __builtin__.property(_get_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_interface_ref(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/interface-ref. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Reference to an interface or subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'interface-ref'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'interface-ref']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/interface_ref/config (container)

    YANG Description: Configured reference to interface / subinterface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/interface_ref/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configured reference to interface / subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/interface_ref/state (container)

    YANG Description: Operational state for interface-ref
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/interface_ref/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for interface-ref
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/interface-ref/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configured reference to interface / subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref', u'config']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)
  subinterface = __builtin__.property(_get_subinterface, _set_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_state_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/interface-ref/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state for interface-ref
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface','__subinterface',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref', u'state']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/interface (leafref)

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Reference to a base interface.  If a reference to a
subinterface is required, this leaf must be specified
to indicate the base interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_subinterface(self):
    """
    Getter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/subinterface (leafref)

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    return self.__subinterface
      
  def _set_subinterface(self, v, load=False):
    """
    Setter method for subinterface, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state/subinterface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subinterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subinterface() directly.

    YANG Description: Reference to a subinterface -- this requires the base
interface to be specified using the interface leaf in
this container.  If only a reference to a base interface
is requuired, this leaf should not be set.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subinterface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__subinterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subinterface(self):
    self.__subinterface = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="subinterface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  interface = __builtin__.property(_get_interface)
  subinterface = __builtin__.property(_get_subinterface)


  _pyangbind_elements = OrderedDict([('interface', interface), ('subinterface', subinterface), ])


class yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/interface-ref. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Reference to an interface or subinterface
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'interface-ref'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'interface-ref']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config (container)

    YANG Description: Configured reference to interface / subinterface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configured reference to interface / subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state (container)

    YANG Description: Operational state for interface-ref
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/interface_ref/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state for interface-ref
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/queues/queue/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for the queue associated with the
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__max_queue_len','__avg_queue_len','__transmit_pkts','__transmit_octets','__dropped_pkts',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/name (string)

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue associated with this interface.
A queue may be explicitly configured, or implicitly created
by the system based on default queues that are instantiated
by a hardware component, or are assumed to be default on
the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_max_queue_len(self):
    """
    Getter method for max_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/max_queue_len (oc-yang:counter64)

    YANG Description: Maximum observed queue length
    """
    return self.__max_queue_len
      
  def _set_max_queue_len(self, v, load=False):
    """
    Setter method for max_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/max_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_len() directly.

    YANG Description: Maximum observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__max_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_len(self):
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_avg_queue_len(self):
    """
    Getter method for avg_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/avg_queue_len (oc-yang:counter64)

    YANG Description: Average observed queue length
    """
    return self.__avg_queue_len
      
  def _set_avg_queue_len(self, v, load=False):
    """
    Setter method for avg_queue_len, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/avg_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_queue_len() directly.

    YANG Description: Average observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__avg_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_queue_len(self):
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_pkts(self):
    """
    Getter method for transmit_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_pkts (oc-yang:counter64)

    YANG Description: Number of packets transmitted by this queue
    """
    return self.__transmit_pkts
      
  def _set_transmit_pkts(self, v, load=False):
    """
    Setter method for transmit_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_pkts() directly.

    YANG Description: Number of packets transmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_pkts(self):
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_octets(self):
    """
    Getter method for transmit_octets, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_octets (oc-yang:counter64)

    YANG Description: Number of octets trasmitted by this queue
    """
    return self.__transmit_octets
      
  def _set_transmit_octets(self, v, load=False):
    """
    Setter method for transmit_octets, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/transmit_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_octets() directly.

    YANG Description: Number of octets trasmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_octets(self):
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_pkts(self):
    """
    Getter method for dropped_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/dropped_pkts (oc-yang:counter64)

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    return self.__dropped_pkts
      
  def _set_dropped_pkts(self, v, load=False):
    """
    Setter method for dropped_pkts, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state/dropped_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_pkts() directly.

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_pkts(self):
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  max_queue_len = __builtin__.property(_get_max_queue_len)
  avg_queue_len = __builtin__.property(_get_avg_queue_len)
  transmit_pkts = __builtin__.property(_get_transmit_pkts)
  transmit_octets = __builtin__.property(_get_transmit_octets)
  dropped_pkts = __builtin__.property(_get_dropped_pkts)


  _pyangbind_elements = OrderedDict([('name', name), ('max_queue_len', max_queue_len), ('avg_queue_len', avg_queue_len), ('transmit_pkts', transmit_pkts), ('transmit_octets', transmit_octets), ('dropped_pkts', dropped_pkts), ])


class yc_queue_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/queues/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for the queue associated with this
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues', u'queue']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/name (leafref)

    YANG Description: Reference to the name of the queue
instantiated on the interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the queue
instantiated on the interface.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config (container)

    YANG Description: Configuration data for the queue associated with the
interface
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for the queue associated with the
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state (container)

    YANG Description: Operational state data for the queue associated with the
interface
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/queues/queue/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for the queue associated with the
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ])


class yc_queues_openconfig_qos_elements__qos_interfaces_interface_output_queues(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/queues. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue',)

  _yang_name = 'queues'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'queues']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/interfaces/interface/output/queues/queue (list)

    YANG Description: Top-level container for the queue associated with this
interface
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/interfaces/interface/output/queues/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Top-level container for the queue associated with this
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_interfaces_interface_output_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)


  _pyangbind_elements = OrderedDict([('queue', queue), ])


class yc_config_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/scheduler-policy/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config/name (leafref)

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/scheduler-policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state/name (leafref)

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The scheduler policy to be applied to traffic on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  name = __builtin__.property(_get_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the scheduler
policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__conforming_pkts','__conforming_octets','__exceeding_pkts','__exceeding_octets','__violating_pkts','__violating_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers', u'scheduler', u'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/sequence (leafref)

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID of the scheduler within
the current scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_conforming_pkts(self):
    """
    Getter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    return self.__conforming_pkts
      
  def _set_conforming_pkts(self, v, load=False):
    """
    Setter method for conforming_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_pkts() directly.

    YANG Description: The number of packets that were considered conforming by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_pkts(self):
    self.__conforming_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_conforming_octets(self):
    """
    Getter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    return self.__conforming_octets
      
  def _set_conforming_octets(self, v, load=False):
    """
    Setter method for conforming_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/conforming_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conforming_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conforming_octets() directly.

    YANG Description: The number of octets in packets that were considered
conforming by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conforming_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__conforming_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conforming_octets(self):
    self.__conforming_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="conforming-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_pkts(self):
    """
    Getter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    return self.__exceeding_pkts
      
  def _set_exceeding_pkts(self, v, load=False):
    """
    Setter method for exceeding_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_pkts() directly.

    YANG Description: The number of packets that were considered exceeding by
the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_pkts(self):
    self.__exceeding_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_exceeding_octets(self):
    """
    Getter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    return self.__exceeding_octets
      
  def _set_exceeding_octets(self, v, load=False):
    """
    Setter method for exceeding_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/exceeding_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceeding_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceeding_octets() directly.

    YANG Description: The number of octets in packets that were considered
exceeding by the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceeding_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__exceeding_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceeding_octets(self):
    self.__exceeding_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="exceeding-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_pkts(self):
    """
    Getter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    return self.__violating_pkts
      
  def _set_violating_pkts(self, v, load=False):
    """
    Setter method for violating_pkts, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_pkts() directly.

    YANG Description: The number of packets that were considered violating by
the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_pkts(self):
    self.__violating_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)


  def _get_violating_octets(self):
    """
    Getter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    return self.__violating_octets
      
  def _set_violating_octets(self, v, load=False):
    """
    Setter method for violating_octets, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state/violating_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violating_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violating_octets() directly.

    YANG Description: The number of octets in packets that were considered
violating by the policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violating_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__violating_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violating_octets(self):
    self.__violating_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="violating-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-yang:counter64', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  conforming_pkts = __builtin__.property(_get_conforming_pkts)
  conforming_octets = __builtin__.property(_get_conforming_octets)
  exceeding_pkts = __builtin__.property(_get_exceeding_pkts)
  exceeding_octets = __builtin__.property(_get_exceeding_octets)
  violating_pkts = __builtin__.property(_get_violating_pkts)
  violating_octets = __builtin__.property(_get_violating_octets)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('conforming_pkts', conforming_pkts), ('conforming_octets', conforming_octets), ('exceeding_pkts', exceeding_pkts), ('exceeding_octets', exceeding_octets), ('violating_pkts', violating_pkts), ('violating_octets', violating_octets), ])


class yc_scheduler_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__state',)

  _yang_name = 'scheduler'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers', u'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the sequence ID for the scheduler.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the sequence ID for the scheduler.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state parameters relating to the scheduler
policy.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the scheduler
policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  state = __builtin__.property(_get_state)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('state', state), ])


class yc_schedulers_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/scheduler-policy/schedulers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Schedulers within the applied scheduler-policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler',)

  _yang_name = 'schedulers'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy', u'schedulers']

  def _get_scheduler(self):
    """
    Getter method for scheduler, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler (list)

    YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
    """
    return self.__scheduler
      
  def _set_scheduler(self, v, load=False):
    """
    Setter method for scheduler, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers/scheduler (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler() directly.

    YANG Description: List of the schedulers that are part of the scheduler-policy
specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)""",
        })

    self.__scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler(self):
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=False)

  scheduler = __builtin__.property(_get_scheduler)


  _pyangbind_elements = OrderedDict([('scheduler', scheduler), ])


class yc_scheduler_policy_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output/scheduler-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Scheduler policy associated with the interface.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__schedulers',)

  _yang_name = 'scheduler-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output', u'scheduler-policy']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config (container)

    YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to a scheduler policy on
an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state (container)

    YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to a scheduler policy
on an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_schedulers(self):
    """
    Getter method for schedulers, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers (container)

    YANG Description: Schedulers within the applied scheduler-policy.
    """
    return self.__schedulers
      
  def _set_schedulers(self, v, load=False):
    """
    Setter method for schedulers, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy/schedulers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedulers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedulers() directly.

    YANG Description: Schedulers within the applied scheduler-policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_schedulers_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedulers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_schedulers_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__schedulers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedulers(self):
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  schedulers = __builtin__.property(_get_schedulers, _set_schedulers)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('schedulers', schedulers), ])


class yc_output_openconfig_qos_elements__qos_interfaces_interface_output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data related to the egress
interface
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_ref','__queues','__scheduler_policy',)

  _yang_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler_policy = YANGDynClass(base=yc_scheduler_policy_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_elements__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface', u'output']

  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/output/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/output/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_output_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/interfaces/interface/output/queues (container)

    YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/interfaces/interface/output/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Surrounding container for a list of queues that are
instantiated on an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_queues_openconfig_qos_elements__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_queues_openconfig_qos_elements__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_elements__qos_interfaces_interface_output_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policy(self):
    """
    Getter method for scheduler_policy, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy (container)

    YANG Description: Scheduler policy associated with the interface.
    """
    return self.__scheduler_policy
      
  def _set_scheduler_policy(self, v, load=False):
    """
    Setter method for scheduler_policy, mapped from YANG variable /qos/interfaces/interface/output/scheduler_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policy() directly.

    YANG Description: Scheduler policy associated with the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_scheduler_policy_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_scheduler_policy_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policy(self):
    self.__scheduler_policy = YANGDynClass(base=yc_scheduler_policy_openconfig_qos_elements__qos_interfaces_interface_output_scheduler_policy, is_container='container', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interface_ref = __builtin__.property(_get_interface_ref, _set_interface_ref)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policy = __builtin__.property(_get_scheduler_policy, _set_scheduler_policy)


  _pyangbind_elements = OrderedDict([('interface_ref', interface_ref), ('queues', queues), ('scheduler_policy', scheduler_policy), ])


class yc_interface_openconfig_qos_elements__qos_interfaces_interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of interfaces referenced by QoS entities.
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface_id','__config','__state','__interface_ref','__output',)

  _yang_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_elements__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces', u'interface']

  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /qos/interfaces/interface/interface_id (leafref)

    YANG Description: Reference to the interface-id list key
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /qos/interfaces/interface/interface_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Reference to the interface-id list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="interface-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/interfaces/interface/config (container)

    YANG Description: Configuration data 
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/interfaces/interface/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_interfaces_interface_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/interfaces/interface/state (container)

    YANG Description: Operational state data 
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/interfaces/interface/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_interfaces_interface_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_interface_ref(self):
    """
    Getter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/interface_ref (container)

    YANG Description: Reference to an interface or subinterface
    """
    return self.__interface_ref
      
  def _set_interface_ref(self, v, load=False):
    """
    Setter method for interface_ref, mapped from YANG variable /qos/interfaces/interface/interface_ref (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ref() directly.

    YANG Description: Reference to an interface or subinterface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ref must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interface_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ref(self):
    self.__interface_ref = YANGDynClass(base=yc_interface_ref_openconfig_qos_elements__qos_interfaces_interface_interface_ref, is_container='container', yang_name="interface-ref", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/interfaces/interface/output (container)

    YANG Description: Top-level container for QoS data related to the egress
interface
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/interfaces/interface/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for QoS data related to the egress
interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_output_openconfig_qos_elements__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_output_openconfig_qos_elements__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_elements__qos_interfaces_interface_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  interface_ref = __builtin__.property(_get_interface_ref, _set_interface_ref)
  output = __builtin__.property(_get_output, _set_output)


  _pyangbind_elements = OrderedDict([('interface_id', interface_id), ('config', config), ('state', state), ('interface_ref', interface_ref), ('output', output), ])


class yc_interfaces_openconfig_qos_elements__qos_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of interface references
  """
  __slots__ = ('_path_helper', '_extmethods', '__interface',)

  _yang_name = 'interfaces'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interface = YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos_elements__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'interfaces']

  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /qos/interfaces/interface (list)

    YANG Description: List of interfaces referenced by QoS entities.
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /qos/interfaces/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: List of interfaces referenced by QoS entities.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_id",yc_interface_openconfig_qos_elements__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos_elements__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("interface_id",yc_interface_openconfig_qos_elements__qos_interfaces_interface, yang_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-id', extensions=None), is_container='list', yang_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  interface = __builtin__.property(_get_interface, _set_interface)


  _pyangbind_elements = OrderedDict([('interface', interface), ])


class yc_config_openconfig_qos_elements__qos_queues_queue_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__drop_profile',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    self.__drop_profile = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/config/name (string)

    YANG Description: User-defined name of the queue
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/queues/queue/config/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/queues/queue/config/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)


  def _get_drop_profile(self):
    """
    Getter method for drop_profile, mapped from YANG variable /qos/queues/queue/config/drop_profile (leafref)

    YANG Description: References the drop profile for this queue
    """
    return self.__drop_profile
      
  def _set_drop_profile(self, v, load=False):
    """
    Setter method for drop_profile, mapped from YANG variable /qos/queues/queue/config/drop_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profile() directly.

    YANG Description: References the drop profile for this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__drop_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profile(self):
    self.__drop_profile = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_type = __builtin__.property(_get_queue_type, _set_queue_type)
  drop_profile = __builtin__.property(_get_drop_profile, _set_drop_profile)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('drop_profile', drop_profile), ])


class yc_state_openconfig_qos_elements__qos_queues_queue_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__max_queue_len','__avg_queue_len','__transmit_pkts','__transmit_octets','__dropped_pkts',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/state/name (string)

    YANG Description: User-defined name of the queue
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: User-defined name of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/queues/queue/state/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/queues/queue/state/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_max_queue_len(self):
    """
    Getter method for max_queue_len, mapped from YANG variable /qos/queues/queue/state/max_queue_len (oc-yang:counter64)

    YANG Description: Maximum observed queue length
    """
    return self.__max_queue_len
      
  def _set_max_queue_len(self, v, load=False):
    """
    Setter method for max_queue_len, mapped from YANG variable /qos/queues/queue/state/max_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_len() directly.

    YANG Description: Maximum observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__max_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_len(self):
    self.__max_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="max-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_avg_queue_len(self):
    """
    Getter method for avg_queue_len, mapped from YANG variable /qos/queues/queue/state/avg_queue_len (oc-yang:counter64)

    YANG Description: Average observed queue length
    """
    return self.__avg_queue_len
      
  def _set_avg_queue_len(self, v, load=False):
    """
    Setter method for avg_queue_len, mapped from YANG variable /qos/queues/queue/state/avg_queue_len (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_queue_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_queue_len() directly.

    YANG Description: Average observed queue length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_queue_len must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__avg_queue_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_queue_len(self):
    self.__avg_queue_len = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="avg-queue-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_pkts(self):
    """
    Getter method for transmit_pkts, mapped from YANG variable /qos/queues/queue/state/transmit_pkts (oc-yang:counter64)

    YANG Description: Number of packets transmitted by this queue
    """
    return self.__transmit_pkts
      
  def _set_transmit_pkts(self, v, load=False):
    """
    Setter method for transmit_pkts, mapped from YANG variable /qos/queues/queue/state/transmit_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_pkts() directly.

    YANG Description: Number of packets transmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_pkts(self):
    self.__transmit_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_transmit_octets(self):
    """
    Getter method for transmit_octets, mapped from YANG variable /qos/queues/queue/state/transmit_octets (oc-yang:counter64)

    YANG Description: Number of octets trasmitted by this queue
    """
    return self.__transmit_octets
      
  def _set_transmit_octets(self, v, load=False):
    """
    Setter method for transmit_octets, mapped from YANG variable /qos/queues/queue/state/transmit_octets (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_octets() directly.

    YANG Description: Number of octets trasmitted by this queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_octets must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__transmit_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_octets(self):
    self.__transmit_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)


  def _get_dropped_pkts(self):
    """
    Getter method for dropped_pkts, mapped from YANG variable /qos/queues/queue/state/dropped_pkts (oc-yang:counter64)

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    return self.__dropped_pkts
      
  def _set_dropped_pkts(self, v, load=False):
    """
    Setter method for dropped_pkts, mapped from YANG variable /qos/queues/queue/state/dropped_pkts (oc-yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dropped_pkts() directly.

    YANG Description: Number of packets dropped by the queue due to overrun
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dropped_pkts must be of a type compatible with oc-yang:counter64""",
          'defined-type': "oc-yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)""",
        })

    self.__dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dropped_pkts(self):
    self.__dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-yang:counter64', is_config=False)

  name = __builtin__.property(_get_name)
  queue_type = __builtin__.property(_get_queue_type)
  max_queue_len = __builtin__.property(_get_max_queue_len)
  avg_queue_len = __builtin__.property(_get_avg_queue_len)
  transmit_pkts = __builtin__.property(_get_transmit_pkts)
  transmit_octets = __builtin__.property(_get_transmit_octets)
  dropped_pkts = __builtin__.property(_get_dropped_pkts)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('max_queue_len', max_queue_len), ('avg_queue_len', avg_queue_len), ('transmit_pkts', transmit_pkts), ('transmit_octets', transmit_octets), ('dropped_pkts', dropped_pkts), ])


class yc_config_openconfig_qos_elements__qos_queues_queue_red_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/red/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red', u'config']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/red/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/red/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/red/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/red/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/red/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/red/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_state_openconfig_qos_elements__qos_queues_queue_red_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/red/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__random_dropped_pkts','__random_dropped_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red', u'state']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/red/state/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/red/state/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/red/state/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/red/state/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_random_dropped_pkts(self):
    """
    Getter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_pkts (uint32)

    YANG Description: The number of random drop packets.
    """
    return self.__random_dropped_pkts
      
  def _set_random_dropped_pkts(self, v, load=False):
    """
    Setter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_pkts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_pkts() directly.

    YANG Description: The number of random drop packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_pkts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)""",
        })

    self.__random_dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_pkts(self):
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)


  def _get_random_dropped_octets(self):
    """
    Getter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_octets (uint64)

    YANG Description: The number of random drop bytes.
    """
    return self.__random_dropped_octets
      
  def _set_random_dropped_octets(self, v, load=False):
    """
    Setter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/red/state/random_dropped_octets (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_octets() directly.

    YANG Description: The number of random drop bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_octets must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__random_dropped_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_octets(self):
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)

  minth = __builtin__.property(_get_minth)
  maxth = __builtin__.property(_get_maxth)
  random_dropped_pkts = __builtin__.property(_get_random_dropped_pkts)
  random_dropped_octets = __builtin__.property(_get_random_dropped_octets)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('random_dropped_pkts', random_dropped_pkts), ('random_dropped_octets', random_dropped_octets), ])


class yc_red_openconfig_qos_elements__qos_queues_queue_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to RED-managed
queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'red']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/red/config (container)

    YANG Description: Configuration data for RED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/red/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/red/state (container)

    YANG Description: Operational state data for RED queues
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/red/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_red_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for WRED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/name (string)

    YANG Description: Descriptive name and key for the class
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Descriptive name and key for the class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/id (identityref)

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/id (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  id = __builtin__.property(_get_id, _set_id)
  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_state_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for WRED
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob','__random_dropped_pkts','__random_dropped_octets',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class', u'state']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=False)


  def _get_random_dropped_pkts(self):
    """
    Getter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_pkts (uint32)

    YANG Description: The number of random drop packets.
    """
    return self.__random_dropped_pkts
      
  def _set_random_dropped_pkts(self, v, load=False):
    """
    Setter method for random_dropped_pkts, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_pkts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_pkts() directly.

    YANG Description: The number of random drop packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_pkts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)""",
        })

    self.__random_dropped_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_pkts(self):
    self.__random_dropped_pkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="random-dropped-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=False)


  def _get_random_dropped_octets(self):
    """
    Getter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_octets (uint64)

    YANG Description: The number of random drop bytes.
    """
    return self.__random_dropped_octets
      
  def _set_random_dropped_octets(self, v, load=False):
    """
    Setter method for random_dropped_octets, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state/random_dropped_octets (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_dropped_octets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_dropped_octets() directly.

    YANG Description: The number of random drop bytes.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_dropped_octets must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)""",
        })

    self.__random_dropped_octets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_dropped_octets(self):
    self.__random_dropped_octets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="random-dropped-octets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=False)

  minth = __builtin__.property(_get_minth)
  maxth = __builtin__.property(_get_maxth)
  maxprob = __builtin__.property(_get_maxprob)
  random_dropped_pkts = __builtin__.property(_get_random_dropped_pkts)
  random_dropped_octets = __builtin__.property(_get_random_dropped_octets)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ('random_dropped_pkts', random_dropped_pkts), ('random_dropped_octets', random_dropped_octets), ])


class yc_traffic_class_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/wred/traffic-classes/traffic-class. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of classes
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state',)

  _yang_name = 'traffic-class'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes', u'traffic-class']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/name (leafref)

    YANG Description: Reference to the class name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the class name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config (container)

    YANG Description: Configuration data for WRED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for WRED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state (container)

    YANG Description: Operational state data for WRED
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for WRED
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ])


class yc_traffic_classes_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/wred/traffic-classes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of classes for Weighted RED QoS queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class',)

  _yang_name = 'traffic-classes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred', u'traffic-classes']

  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class (list)

    YANG Description: List of classes
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /qos/queues/queue/wred/traffic_classes/traffic_class (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: List of classes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)


  _pyangbind_elements = OrderedDict([('traffic_class', traffic_class), ])


class yc_wred_openconfig_qos_elements__qos_queues_queue_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for WRED data
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_classes',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue', u'wred']

  def _get_traffic_classes(self):
    """
    Getter method for traffic_classes, mapped from YANG variable /qos/queues/queue/wred/traffic_classes (container)

    YANG Description: A list of classes for Weighted RED QoS queues
    """
    return self.__traffic_classes
      
  def _set_traffic_classes(self, v, load=False):
    """
    Setter method for traffic_classes, mapped from YANG variable /qos/queues/queue/wred/traffic_classes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_classes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_classes() directly.

    YANG Description: A list of classes for Weighted RED QoS queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_traffic_classes_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_classes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_traffic_classes_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__traffic_classes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_classes(self):
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_elements__qos_queues_queue_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  traffic_classes = __builtin__.property(_get_traffic_classes, _set_traffic_classes)


  _pyangbind_elements = OrderedDict([('traffic_classes', traffic_classes), ])


class yc_queue_openconfig_qos_elements__qos_queues_queue(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues/queue. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__red','__wred',)

  _yang_name = 'queue'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_elements__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_elements__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues', u'queue']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/queues/queue/name (leafref)

    YANG Description: Reference to the queue name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/queues/queue/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the queue name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/queues/queue/config (container)

    YANG Description: Configuration data for queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/queues/queue/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_queues_queue_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/queues/queue/state (container)

    YANG Description: Operational state data for queues
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/queues/queue/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_queues_queue_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /qos/queues/queue/red (container)

    YANG Description: Top-level container for data related to RED-managed
queues
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /qos/queues/queue/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Top-level container for data related to RED-managed
queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_openconfig_qos_elements__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_openconfig_qos_elements__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_elements__qos_queues_queue_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /qos/queues/queue/wred (container)

    YANG Description: Top-level container for WRED data
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /qos/queues/queue/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Top-level container for WRED data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_openconfig_qos_elements__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_openconfig_qos_elements__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_elements__qos_queues_queue_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  red = __builtin__.property(_get_red, _set_red)
  wred = __builtin__.property(_get_wred, _set_wred)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('red', red), ('wred', wred), ])


class yc_queues_openconfig_qos_elements__qos_queues(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/queues. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__queue',)

  _yang_name = 'queues'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'queues']

  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/queues/queue (list)

    YANG Description: List of defined queues
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/queues/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: List of defined queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("name",yc_queue_openconfig_qos_elements__qos_queues_queue, yang_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  queue = __builtin__.property(_get_queue, _set_queue)


  _pyangbind_elements = OrderedDict([('queue', queue), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to a scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__root_scheduler',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__root_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/name (string)

    YANG Description: Name for the scheduler policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_root_scheduler(self):
    """
    Getter method for root_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/root_scheduler (leafref)

    YANG Description: This is the root scheduler in a Hierarchical QoS model
and helps in identifying which scheduler in a scheduler
policy is associated with an interface.
    """
    return self.__root_scheduler
      
  def _set_root_scheduler(self, v, load=False):
    """
    Setter method for root_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config/root_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_root_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_root_scheduler() directly.

    YANG Description: This is the root scheduler in a Hierarchical QoS model
and helps in identifying which scheduler in a scheduler
policy is associated with an interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """root_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__root_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_root_scheduler(self):
    self.__root_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="root-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  root_scheduler = __builtin__.property(_get_root_scheduler, _set_root_scheduler)


  _pyangbind_elements = OrderedDict([('name', name), ('root_scheduler', root_scheduler), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to a scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state/name (string)

    YANG Description: Name for the scheduler policy.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)

  name = __builtin__.property(_get_name)


  _pyangbind_elements = OrderedDict([('name', name), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority','__name','__level',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'config']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/name (string)

    YANG Description: Name for this scheduler

Note: it would probably make more sense to have this as the
      key rather than the sequeunce number as it allows a
      more flexible way to name and index the schedulers.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name for this scheduler

Note: it would probably make more sense to have this as the
      key rather than the sequeunce number as it allows a
      more flexible way to name and index the schedulers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/level (uint8)

    YANG Description: The level of the scheduler with the root node scheduler starting
at level 0 and then the siblings being greater than parent.
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config/level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: The level of the scheduler with the root node scheduler starting
at level 0 and then the siblings being greater than parent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint8', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  type = __builtin__.property(_get_type, _set_type)
  priority = __builtin__.property(_get_priority, _set_priority)
  name = __builtin__.property(_get_name, _set_name)
  level = __builtin__.property(_get_level, _set_level)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ('name', name), ('level', level), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for QoS schedulers
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__type','__priority',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'state']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/sequence (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Sequence number for the scheduler within the scheduler
policy. Schedulers are processed from lowest sequence
to highest.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Sets the type of scheduler, i.e. the scheduling algorithm
used to serve inputs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:TWO_RATE_THREE_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:ONE_RATE_TWO_COLOR': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='identityref', is_config=False)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state/priority (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: Priority of the scheduler within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'STRICT': {}},), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)

  sequence = __builtin__.property(_get_sequence)
  type = __builtin__.property(_get_type)
  priority = __builtin__.property(_get_priority)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('type', type), ('priority', priority), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler input sources
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__input_type','__queue','__weight','__priority','__input_scheduler',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__input_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input', u'config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/id (string)

    YANG Description: User-defined identifier for the scheduler input
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: User-defined identifier for the scheduler input
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=True)


  def _get_input_type(self):
    """
    Getter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_type (enumeration)

    YANG Description: Describes the type of input source for the scheduler
    """
    return self.__input_type
      
  def _set_input_type(self, v, load=False):
    """
    Setter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_type() directly.

    YANG Description: Describes the type of input source for the scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__input_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_type(self):
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/queue (leafref)

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/queue (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/weight (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/weight (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/priority (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/priority (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_input_scheduler(self):
    """
    Getter method for input_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_scheduler (leafref)

    YANG Description: When the scheduler input type is scheduler, this leaf
provides a reference to the upstream scheduler policy.

Note: the scheduler list should really use a 'name' string
      as the key instead of a sequence number.

Note 2: The OpenConfig HQoS model has got the parent
      child concept backwards in regards to the schedulers
      and input/output.  In other words, the 'parent' scheduler
      should be the scheduler closest to the interface and as
      such should be on the 'output' configuration of the
      scheduler.  While the 'child' schedulers should be closest
      to the 'queues' and as such on the 'input' configuration
      of the scheduler.

      To avoid confusion we're using the name 'input-scheduler'
      here and deleted the 'child-scheduler' leaf in
      the output container
    """
    return self.__input_scheduler
      
  def _set_input_scheduler(self, v, load=False):
    """
    Setter method for input_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config/input_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_scheduler() directly.

    YANG Description: When the scheduler input type is scheduler, this leaf
provides a reference to the upstream scheduler policy.

Note: the scheduler list should really use a 'name' string
      as the key instead of a sequence number.

Note 2: The OpenConfig HQoS model has got the parent
      child concept backwards in regards to the schedulers
      and input/output.  In other words, the 'parent' scheduler
      should be the scheduler closest to the interface and as
      such should be on the 'output' configuration of the
      scheduler.  While the 'child' schedulers should be closest
      to the 'queues' and as such on the 'input' configuration
      of the scheduler.

      To avoid confusion we're using the name 'input-scheduler'
      here and deleted the 'child-scheduler' leaf in
      the output container
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__input_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_scheduler(self):
    self.__input_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="input-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  input_type = __builtin__.property(_get_input_type, _set_input_type)
  queue = __builtin__.property(_get_queue, _set_queue)
  weight = __builtin__.property(_get_weight, _set_weight)
  priority = __builtin__.property(_get_priority, _set_priority)
  input_scheduler = __builtin__.property(_get_input_scheduler, _set_input_scheduler)


  _pyangbind_elements = OrderedDict([('id', id), ('input_type', input_type), ('queue', queue), ('weight', weight), ('priority', priority), ('input_scheduler', input_scheduler), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for scheduler input sources
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__input_type','__queue','__weight',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input', u'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/id (string)

    YANG Description: User-defined identifier for the scheduler input
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: User-defined identifier for the scheduler input
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='string', is_config=False)


  def _get_input_type(self):
    """
    Getter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/input_type (enumeration)

    YANG Description: Describes the type of input source for the scheduler
    """
    return self.__input_type
      
  def _set_input_type(self, v, load=False):
    """
    Setter method for input_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/input_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input_type() directly.

    YANG Description: Describes the type of input source for the scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__input_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input_type(self):
    self.__input_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'QUEUE': {}, u'IN_PROFILE': {}, u'OUT_PROFILE': {}},), is_leaf=True, yang_name="input-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/queue (leafref)

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/queue (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: Reference to a queue that is an input source for the
scheduler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/weight (uint64)

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state/weight (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: For priority schedulers, this indicates the priority of
the corresponding input.  Higher values indicate higher
priority.  For weighted round-robin schedulers, this leaf
indicates the weight of the corresponding input.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

  id = __builtin__.property(_get_id)
  input_type = __builtin__.property(_get_input_type)
  queue = __builtin__.property(_get_queue)
  weight = __builtin__.property(_get_weight)


  _pyangbind_elements = OrderedDict([('id', id), ('input_type', input_type), ('queue', queue), ('weight', weight), ])


class yc_input_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of input sources for the scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__config','__state',)

  _yang_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs', u'input']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/id (leafref)

    YANG Description: Reference to list key
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Reference to list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config (container)

    YANG Description: Configuration data for scheduler input sources
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for scheduler input sources
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state (container)

    YANG Description: Operational state data for scheduler input sources
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for scheduler input sources
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('id', id), ('config', config), ('state', state), ])


class yc_inputs_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container 
  """
  __slots__ = ('_path_helper', '_extmethods', '__input',)

  _yang_name = 'inputs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__input = YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'inputs']

  def _get_input(self):
    """
    Getter method for input, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input (list)

    YANG Description: List of input sources for the scheduler.
    """
    return self.__input
      
  def _set_input(self, v, load=False):
    """
    Setter method for input, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs/input (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_input is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_input() directly.

    YANG Description: List of input sources for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_input_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """input must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__input = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_input(self):
    self.__input = YANGDynClass(base=YANGListType("id",yc_input_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs_input, yang_name="input", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  input = __builtin__.property(_get_input, _set_input)


  _pyangbind_elements = OrderedDict([('input', input), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__output_fwd_group',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output', u'config']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=True)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

  output_type = __builtin__.property(_get_output_type, _set_output_type)
  output_fwd_group = __builtin__.property(_get_output_fwd_group, _set_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('output_fwd_group', output_fwd_group), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for scheduler output
  """
  __slots__ = ('_path_helper', '_extmethods', '__output_type','__child_scheduler','__output_fwd_group',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    self.__child_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output', u'state']

  def _get_output_type(self):
    """
    Getter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_type (enumeration)

    YANG Description: Describes the type of output sink for the scheduler.
    """
    return self.__output_type
      
  def _set_output_type(self, v, load=False):
    """
    Setter method for output_type, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_type() directly.

    YANG Description: Describes the type of output sink for the scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_type must be of a type compatible with enumeration""",
          'defined-type': "openconfig-qos:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)""",
        })

    self.__output_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_type(self):
    self.__output_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERFACE': {}, u'FWD_GROUP': {}, u'SCHEDULER': {}},), is_leaf=True, yang_name="output-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='enumeration', is_config=False)


  def _get_child_scheduler(self):
    """
    Getter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/child_scheduler (leafref)

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    return self.__child_scheduler
      
  def _set_child_scheduler(self, v, load=False):
    """
    Setter method for child_scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/child_scheduler (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_child_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_child_scheduler() directly.

    YANG Description: When the scheduler output type is a child scheduler,
this leaf provides a reference to the downstream
scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """child_scheduler must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__child_scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_child_scheduler(self):
    self.__child_scheduler = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="child-scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)


  def _get_output_fwd_group(self):
    """
    Getter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_fwd_group (leafref)

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    return self.__output_fwd_group
      
  def _set_output_fwd_group(self, v, load=False):
    """
    Setter method for output_fwd_group, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state/output_fwd_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output_fwd_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output_fwd_group() directly.

    YANG Description: When the scheduler output type is a forwarding group,
this leaf provides a reference to the forwarding group.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output_fwd_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)""",
        })

    self.__output_fwd_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output_fwd_group(self):
    self.__output_fwd_group = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="output-fwd-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=False)

  output_type = __builtin__.property(_get_output_type)
  child_scheduler = __builtin__.property(_get_child_scheduler)
  output_fwd_group = __builtin__.property(_get_output_fwd_group)


  _pyangbind_elements = OrderedDict([('output_type', output_type), ('child_scheduler', child_scheduler), ('output_fwd_group', output_fwd_group), ])


class yc_output_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for scheduler output data
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'output']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config (container)

    YANG Description: Configuration data for scheduler output
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for scheduler output
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state (container)

    YANG Description: Operational state data for scheduler output
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for scheduler output
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=True)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior, _set_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes, _set_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent, _set_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for 1 rate, 2 color shapers
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__bc','__queuing_behavior','__max_queue_depth_bytes','__max_queue_depth_packets','__max_queue_depth_percent',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'state']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir (uint64)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler.  This value represents the rate at which
tokens are added to the bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the total bandwidth allocated to the
context in which the scheduler is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the single-rate token
bucket scheduler. This value represents the rate at which
tokens are added to the bucket. It is expressed as a
percentage of the unallocated bandwidth available in the
context in which the scheduled is referenced.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/bc (uint32)

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the single-rate token bucket
scheduler.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_queuing_behavior(self):
    """
    Getter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/queuing_behavior (oc-qos-types:queue-behavior)

    YANG Description: The type of scheduler that is being configured.
    """
    return self.__queuing_behavior
      
  def _set_queuing_behavior(self, v, load=False):
    """
    Setter method for queuing_behavior, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/queuing_behavior (oc-qos-types:queue-behavior)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_behavior is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_behavior() directly.

    YANG Description: The type of scheduler that is being configured.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_behavior must be of a type compatible with oc-qos-types:queue-behavior""",
          'defined-type': "oc-qos-types:queue-behavior",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)""",
        })

    self.__queuing_behavior = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_behavior(self):
    self.__queuing_behavior = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'SHAPE': {}, u'POLICE': {}},), is_leaf=True, yang_name="queuing-behavior", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-qos-types:queue-behavior', is_config=False)


  def _get_max_queue_depth_bytes(self):
    """
    Getter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_bytes (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    return self.__max_queue_depth_bytes
      
  def _set_max_queue_depth_bytes(self, v, load=False):
    """
    Setter method for max_queue_depth_bytes, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_bytes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_bytes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_bytes() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in bytes is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_bytes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__max_queue_depth_bytes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_bytes(self):
    self.__max_queue_depth_bytes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-bytes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_packets (uint32)

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: When the scheduler is specified to be a shaper - the
maximum depth of the queue in packets is the value
specified by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_max_queue_depth_percent(self):
    """
    Getter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_percent (oc-types:percentage)

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    return self.__max_queue_depth_percent
      
  def _set_max_queue_depth_percent(self, v, load=False):
    """
    Setter method for max_queue_depth_percent, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state/max_queue_depth_percent (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_percent() directly.

    YANG Description: The queue depth specified as a percentage of the total
available buffer that is avaialble.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_percent must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__max_queue_depth_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_percent(self):
    self.__max_queue_depth_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="max-queue-depth-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)

  cir = __builtin__.property(_get_cir)
  cir_pct = __builtin__.property(_get_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining)
  bc = __builtin__.property(_get_bc)
  queuing_behavior = __builtin__.property(_get_queuing_behavior)
  max_queue_depth_bytes = __builtin__.property(_get_max_queue_depth_bytes)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets)
  max_queue_depth_percent = __builtin__.property(_get_max_queue_depth_percent)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('bc', bc), ('queuing_behavior', queuing_behavior), ('max_queue_depth_bytes', max_queue_depth_bytes), ('max_queue_depth_packets', max_queue_depth_packets), ('max_queue_depth_percent', max_queue_depth_percent), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'conform-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'conform-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config (container)

    YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to conforming packets for the
1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state (container)

    YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to conforming packets
for the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'exceed-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color', u'exceed-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config (container)

    YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to exceeding packets for
the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state (container)

    YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to exceeding
packets for the 1r2c scheduler.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_one_rate_two_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action',)

  _yang_name = 'one-rate-two-color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'one-rate-two-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config (container)

    YANG Description: Configuration data for 1 rate, 2 color shapers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 1 rate, 2 color shapers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state (container)

    YANG Description: Operational state data for 1 rate, 2 color shapers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 1 rate, 2 color shapers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action (container)

    YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to packets that are scheduled within the
CIR of the one-rate, two-colour scheduler. Packets that receive
a token from the in-CIR bucket are said to be conforming and
have all of the specified actions applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action (container)

    YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to packets that are scheduled above the CIR
of the one-rate, two-colour shaper. Packets that do not receive a
token from the in-CIR bucket are said to be exceeding, and have
all of the specified actions applied.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'config']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=True)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=True)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cir_pct = __builtin__.property(_get_cir_pct, _set_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining, _set_cir_pct_remaining)
  pir = __builtin__.property(_get_pir, _set_pir)
  pir_pct = __builtin__.property(_get_pir_pct, _set_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining, _set_pir_pct_remaining)
  bc = __builtin__.property(_get_bc, _set_bc)
  be = __builtin__.property(_get_be, _set_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data for 2 rate, 3 color policers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__cir','__cir_pct','__cir_pct_remaining','__pir','__pir_pct','__pir_pct_remaining','__bc','__be',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'state']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir (uint64)

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer.  This value represents the rate at which
tokens are added to the primary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_cir_pct(self):
    """
    Getter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    return self.__cir_pct
      
  def _set_cir_pct(self, v, load=False):
    """
    Setter method for cir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct() directly.

    YANG Description: Committed information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the primary bucket. It is expressed as a
percentage of the total bandwidth available within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct(self):
    self.__cir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_cir_pct_remaining(self):
    """
    Getter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct_remaining (oc-types:percentage)

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__cir_pct_remaining
      
  def _set_cir_pct_remaining(self, v, load=False):
    """
    Setter method for cir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/cir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_pct_remaining() directly.

    YANG Description: Committed information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the primary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__cir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_pct_remaining(self):
    self.__cir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="cir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_pir(self):
    """
    Getter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir (uint64)

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    return self.__pir
      
  def _set_pir(self, v, load=False):
    """
    Setter method for pir, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer.  This value represents the rate at which tokens
are added to the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)""",
        })

    self.__pir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir(self):
    self.__pir = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint64', is_config=False)


  def _get_pir_pct(self):
    """
    Getter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    return self.__pir_pct
      
  def _set_pir_pct(self, v, load=False):
    """
    Setter method for pir_pct, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct() directly.

    YANG Description: Peak information rate for the dual-rate token bucket
policer. This value represents the rate at which tokens
are added to the secondary bucket. The value is expressed
as a percentage of the total bandwidth available in the
context in which the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__pir_pct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct(self):
    self.__pir_pct = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_pir_pct_remaining(self):
    """
    Getter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct_remaining (oc-types:percentage)

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    return self.__pir_pct_remaining
      
  def _set_pir_pct_remaining(self, v, load=False):
    """
    Setter method for pir_pct_remaining, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/pir_pct_remaining (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pir_pct_remaining is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pir_pct_remaining() directly.

    YANG Description: Peak information rate for the dual-rate token
bucket policer. This value represents the rate at which
tokens are added to the secondary bucket. It is expressed
as a percentage of the remaining bandwidth within the
context the scheduler is instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pir_pct_remaining must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)""",
        })

    self.__pir_pct_remaining = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pir_pct_remaining(self):
    self.__pir_pct_remaining = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="pir-pct-remaining", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='oc-types:percentage', is_config=False)


  def _get_bc(self):
    """
    Getter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/bc (uint32)

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    return self.__bc
      
  def _set_bc(self, v, load=False):
    """
    Setter method for bc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/bc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bc() directly.

    YANG Description: Committed burst size for the dual-rate token bucket
policer.  This value represents the depth of the token
bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__bc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bc(self):
    self.__bc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)


  def _get_be(self):
    """
    Getter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/be (uint32)

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    return self.__be
      
  def _set_be(self, v, load=False):
    """
    Setter method for be, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state/be (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_be is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_be() directly.

    YANG Description: Excess burst size for the dual-rate token bucket policer.
This value represents the depth of the secondary bucket.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """be must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)""",
        })

    self.__be = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_be(self):
    self.__be = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="be", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint32', is_config=False)

  cir = __builtin__.property(_get_cir)
  cir_pct = __builtin__.property(_get_cir_pct)
  cir_pct_remaining = __builtin__.property(_get_cir_pct_remaining)
  pir = __builtin__.property(_get_pir)
  pir_pct = __builtin__.property(_get_pir_pct)
  pir_pct_remaining = __builtin__.property(_get_pir_pct_remaining)
  bc = __builtin__.property(_get_bc)
  be = __builtin__.property(_get_be)


  _pyangbind_elements = OrderedDict([('cir', cir), ('cir_pct', cir_pct), ('cir_pct_remaining', cir_pct_remaining), ('pir', pir), ('pir_pct', pir_pct), ('pir_pct_remaining', pir_pct_remaining), ('bc', bc), ('be', be), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters for the conform action of a
2r3c policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ])


class yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'conform-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'conform-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config (container)

    YANG Description: Configuration parameters for the conform action of a
2r3c policer.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters for the conform action of a
2r3c policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state (container)

    YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the conform
action of a 2r3c policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'exceed-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'exceed-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config (container)

    YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the action
applied to exceeding packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state (container)

    YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the action
applied to exceeding packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the action
applied to violating packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action', u'config']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=True)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=True)

  set_dscp = __builtin__.property(_get_set_dscp, _set_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p, _set_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc, _set_set_mpls_tc)
  drop = __builtin__.property(_get_drop, _set_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to the action
applied to violating packets.
  """
  __slots__ = ('_path_helper', '_extmethods', '__set_dscp','__set_dot1p','__set_mpls_tc','__drop',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action', u'state']

  def _get_set_dscp(self):
    """
    Getter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dscp (uint8)

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    return self.__set_dscp
      
  def _set_set_dscp(self, v, load=False):
    """
    Setter method for set_dscp, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dscp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dscp() directly.

    YANG Description: Sets the 6-bit DSCP (differentiated services code point)
value in the IP packet header.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dscp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dscp(self):
    self.__set_dscp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_dot1p(self):
    """
    Getter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dot1p (uint8)

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    return self.__set_dot1p
      
  def _set_set_dot1p(self, v, load=False):
    """
    Setter method for set_dot1p, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_dot1p (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_dot1p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_dot1p() directly.

    YANG Description: Sets the 3-bit class-of-service value in the
Ethernet packet header for 802.1Q VLAN-tagged packets,
also known as PCP (priority code point).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_dot1p must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_dot1p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_dot1p(self):
    self.__set_dot1p = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-dot1p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_set_mpls_tc(self):
    """
    Getter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_mpls_tc (uint8)

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    return self.__set_mpls_tc
      
  def _set_set_mpls_tc(self, v, load=False):
    """
    Setter method for set_mpls_tc, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/set_mpls_tc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_mpls_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_mpls_tc() directly.

    YANG Description: Sets the 3-bit traffic class value (also referred to as EXP
or CoS) in MPLS packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_mpls_tc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)""",
        })

    self.__set_mpls_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_mpls_tc(self):
    self.__set_mpls_tc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="set-mpls-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='uint8', is_config=False)


  def _get_drop(self):
    """
    Getter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/drop (boolean)

    YANG Description: If set to true, packets within this context are dropped.
    """
    return self.__drop
      
  def _set_drop(self, v, load=False):
    """
    Setter method for drop, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state/drop (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop() directly.

    YANG Description: If set to true, packets within this context are dropped.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)""",
        })

    self.__drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop(self):
    self.__drop = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='boolean', is_config=False)

  set_dscp = __builtin__.property(_get_set_dscp)
  set_dot1p = __builtin__.property(_get_set_dot1p)
  set_mpls_tc = __builtin__.property(_get_set_mpls_tc)
  drop = __builtin__.property(_get_drop)


  _pyangbind_elements = OrderedDict([('set_dscp', set_dscp), ('set_dot1p', set_dot1p), ('set_mpls_tc', set_mpls_tc), ('drop', drop), ])


class yc_violate_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state',)

  _yang_name = 'violate-action'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color', u'violate-action']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config (container)

    YANG Description: Configuration parameters relating to the action
applied to violating packets.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the action
applied to violating packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state (container)

    YANG Description: Operational state parameters relating to the action
applied to violating packets.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to the action
applied to violating packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ])


class yc_two_rate_three_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data for a 2 rate, 3 color policer.
  """
  __slots__ = ('_path_helper', '_extmethods', '__config','__state','__conform_action','__exceed_action','__violate_action',)

  _yang_name = 'two-rate-three-color'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__violate_action = YANGDynClass(base=yc_violate_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler', u'two-rate-three-color']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for 2 rate, 3 color policers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_conform_action(self):
    """
    Getter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    return self.__conform_action
      
  def _set_conform_action(self, v, load=False):
    """
    Setter method for conform_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/conform_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the CIR of the policer. All packets that receive
a token from this bucket have all actions specified
applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_action(self):
    self.__conform_action = YANGDynClass(base=yc_conform_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_conform_action, is_container='container', yang_name="conform-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_exceed_action(self):
    """
    Getter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    return self.__exceed_action
      
  def _set_exceed_action(self, v, load=False):
    """
    Setter method for exceed_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/exceed_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
within the PIR of the policer. Packets that receive a
token from within the PIR allocation have all the
specified actions applied to them
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_action(self):
    self.__exceed_action = YANGDynClass(base=yc_exceed_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_exceed_action, is_container='container', yang_name="exceed-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_violate_action(self):
    """
    Getter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    return self.__violate_action
      
  def _set_violate_action(self, v, load=False):
    """
    Setter method for violate_action, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color/violate_action (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violate_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violate_action() directly.

    YANG Description: Action to be applied to the packets that are scheduled
above the PIR of the policer. Packets that do not receive
a token from either bucket have all specified actions
applied to them.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_violate_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violate_action must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_violate_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__violate_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violate_action(self):
    self.__violate_action = YANGDynClass(base=yc_violate_action_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color_violate_action, is_container='container', yang_name="violate-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  conform_action = __builtin__.property(_get_conform_action, _set_conform_action)
  exceed_action = __builtin__.property(_get_exceed_action, _set_exceed_action)
  violate_action = __builtin__.property(_get_violate_action, _set_violate_action)


  _pyangbind_elements = OrderedDict([('config', config), ('state', state), ('conform_action', conform_action), ('exceed_action', exceed_action), ('violate_action', violate_action), ])


class yc_scheduler_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers/scheduler. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of defined QoS traffic schedulers.
  """
  __slots__ = ('_path_helper', '_extmethods', '__sequence','__config','__state','__inputs','__output','__one_rate_two_color','__two_rate_three_color',)

  _yang_name = 'scheduler'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__inputs = YANGDynClass(base=yc_inputs_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__two_rate_three_color = YANGDynClass(base=yc_two_rate_three_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__one_rate_two_color = YANGDynClass(base=yc_one_rate_two_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers', u'scheduler']

  def _get_sequence(self):
    """
    Getter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)

    YANG Description: Reference to the list key
    """
    return self.__sequence
      
  def _set_sequence(self, v, load=False):
    """
    Setter method for sequence, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/sequence (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence() directly.

    YANG Description: Reference to the list key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__sequence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence(self):
    self.__sequence = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="sequence", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)

    YANG Description: Configuration data for QoS schedulers
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)

    YANG Description: Operational state data for QoS schedulers
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state data for QoS schedulers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_inputs(self):
    """
    Getter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)

    YANG Description: Enclosing container 
    """
    return self.__inputs
      
  def _set_inputs(self, v, load=False):
    """
    Setter method for inputs, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/inputs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inputs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inputs() directly.

    YANG Description: Enclosing container 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_inputs_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inputs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_inputs_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__inputs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inputs(self):
    self.__inputs = YANGDynClass(base=yc_inputs_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_inputs, is_container='container', yang_name="inputs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_output(self):
    """
    Getter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)

    YANG Description: Top-level container for scheduler output data
    """
    return self.__output
      
  def _set_output(self, v, load=False):
    """
    Setter method for output, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/output (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_output is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_output() directly.

    YANG Description: Top-level container for scheduler output data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_output_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """output must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_output_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__output = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_output(self):
    self.__output = YANGDynClass(base=yc_output_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_output, is_container='container', yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_one_rate_two_color(self):
    """
    Getter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    return self.__one_rate_two_color
      
  def _set_one_rate_two_color(self, v, load=False):
    """
    Setter method for one_rate_two_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/one_rate_two_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_one_rate_two_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_one_rate_two_color() directly.

    YANG Description: Top-level container for data related to a 1 rate, 2 color
shaper.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_one_rate_two_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """one_rate_two_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_one_rate_two_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__one_rate_two_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_one_rate_two_color(self):
    self.__one_rate_two_color = YANGDynClass(base=yc_one_rate_two_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_one_rate_two_color, is_container='container', yang_name="one-rate-two-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_two_rate_three_color(self):
    """
    Getter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    return self.__two_rate_three_color
      
  def _set_two_rate_three_color(self, v, load=False):
    """
    Setter method for two_rate_three_color, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler/two_rate_three_color (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_two_rate_three_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_two_rate_three_color() directly.

    YANG Description: Top-level container for data for a 2 rate, 3 color policer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_two_rate_three_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """two_rate_three_color must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_two_rate_three_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__two_rate_three_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_two_rate_three_color(self):
    self.__two_rate_three_color = YANGDynClass(base=yc_two_rate_three_color_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler_two_rate_three_color, is_container='container', yang_name="two-rate-three-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  sequence = __builtin__.property(_get_sequence, _set_sequence)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  inputs = __builtin__.property(_get_inputs, _set_inputs)
  output = __builtin__.property(_get_output, _set_output)
  one_rate_two_color = __builtin__.property(_get_one_rate_two_color, _set_one_rate_two_color)
  two_rate_three_color = __builtin__.property(_get_two_rate_three_color, _set_two_rate_three_color)


  _pyangbind_elements = OrderedDict([('sequence', sequence), ('config', config), ('state', state), ('inputs', inputs), ('output', output), ('one_rate_two_color', one_rate_two_color), ('two_rate_three_color', two_rate_three_color), ])


class yc_schedulers_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy/schedulers. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Schedulers within the scheduler policy.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler',)

  _yang_name = 'schedulers'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy', u'schedulers']

  def _get_scheduler(self):
    """
    Getter method for scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler (list)

    YANG Description: List of defined QoS traffic schedulers.
    """
    return self.__scheduler
      
  def _set_scheduler(self, v, load=False):
    """
    Setter method for scheduler, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers/scheduler (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler() directly.

    YANG Description: List of defined QoS traffic schedulers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__scheduler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler(self):
    self.__scheduler = YANGDynClass(base=YANGListType("sequence",yc_scheduler_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers_scheduler, yang_name="scheduler", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence', extensions=None), is_container='list', yang_name="scheduler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  scheduler = __builtin__.property(_get_scheduler, _set_scheduler)


  _pyangbind_elements = OrderedDict([('scheduler', scheduler), ])


class yc_scheduler_policy_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies/scheduler-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__state','__schedulers',)

  _yang_name = 'scheduler-policy'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies', u'scheduler-policy']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/name (leafref)

    YANG Description: Reference to the name of the scheduler policy
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the name of the scheduler policy
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config (container)

    YANG Description: Configuration parameters relating to a scheduler policy.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to a scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state (container)

    YANG Description: Operational state parameters relating to a scheduler policy.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters relating to a scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=yc_state_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_schedulers(self):
    """
    Getter method for schedulers, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers (container)

    YANG Description: Schedulers within the scheduler policy.
    """
    return self.__schedulers
      
  def _set_schedulers(self, v, load=False):
    """
    Setter method for schedulers, mapped from YANG variable /qos/scheduler_policies/scheduler_policy/schedulers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedulers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedulers() directly.

    YANG Description: Schedulers within the scheduler policy.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_schedulers_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedulers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_schedulers_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__schedulers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedulers(self):
    self.__schedulers = YANGDynClass(base=yc_schedulers_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy_schedulers, is_container='container', yang_name="schedulers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state, _set_state)
  schedulers = __builtin__.property(_get_schedulers, _set_schedulers)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('state', state), ('schedulers', schedulers), ])


class yc_scheduler_policies_openconfig_qos_elements__qos_scheduler_policies(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/scheduler-policies. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of configured scheduler policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__scheduler_policy',)

  _yang_name = 'scheduler-policies'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__scheduler_policy = YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'scheduler-policies']

  def _get_scheduler_policy(self):
    """
    Getter method for scheduler_policy, mapped from YANG variable /qos/scheduler_policies/scheduler_policy (list)

    YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
    """
    return self.__scheduler_policy
      
  def _set_scheduler_policy(self, v, load=False):
    """
    Setter method for scheduler_policy, mapped from YANG variable /qos/scheduler_policies/scheduler_policy (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policy() directly.

    YANG Description: List of scheduler policies. A scheduler policy is a set of schedulers
that are to be applied together. Each scheduler within a scheduler
policy takes an input, and outputs it according to a scheduling
discipline that is specified within it. The schedulers consume
resources according to the specification that is provided - which
may be absolute resource limits, or relative.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_scheduler_policy_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policy must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)""",
        })

    self.__scheduler_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policy(self):
    self.__scheduler_policy = YANGDynClass(base=YANGListType("name",yc_scheduler_policy_openconfig_qos_elements__qos_scheduler_policies_scheduler_policy, yang_name="scheduler-policy", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="scheduler-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='list', is_config=True)

  scheduler_policy = __builtin__.property(_get_scheduler_policy, _set_scheduler_policy)


  _pyangbind_elements = OrderedDict([('scheduler_policy', scheduler_policy), ])


class yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters relating to the drop profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__queue_type','__max_queue_depth_packets',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/config/name (string)

    YANG Description: Name of the drop profile
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the drop profile
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_queue_type(self):
    """
    Getter method for queue_type, mapped from YANG variable /qos/drop_profiles/drop_profile/config/queue_type (identityref)

    YANG Description: Sets the type of the queue
    """
    return self.__queue_type
      
  def _set_queue_type(self, v, load=False):
    """
    Setter method for queue_type, mapped from YANG variable /qos/drop_profiles/drop_profile/config/queue_type (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_type() directly.

    YANG Description: Sets the type of the queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_type must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__queue_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_type(self):
    self.__queue_type = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:DROP_TAIL': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'oc-qos-types:WRED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}, u'RED': {u'@namespace': u'http://openconfig.net/yang/qos-types', u'@module': u'openconfig-qos-types'}},), is_leaf=True, yang_name="queue-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_max_queue_depth_packets(self):
    """
    Getter method for max_queue_depth_packets, mapped from YANG variable /qos/drop_profiles/drop_profile/config/max_queue_depth_packets (uint32)

    YANG Description: The maximum depth of the queue in packets.
    """
    return self.__max_queue_depth_packets
      
  def _set_max_queue_depth_packets(self, v, load=False):
    """
    Setter method for max_queue_depth_packets, mapped from YANG variable /qos/drop_profiles/drop_profile/config/max_queue_depth_packets (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_queue_depth_packets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_queue_depth_packets() directly.

    YANG Description: The maximum depth of the queue in packets.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_queue_depth_packets must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)""",
        })

    self.__max_queue_depth_packets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_queue_depth_packets(self):
    self.__max_queue_depth_packets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-queue-depth-packets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint32', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  queue_type = __builtin__.property(_get_queue_type, _set_queue_type)
  max_queue_depth_packets = __builtin__.property(_get_max_queue_depth_packets, _set_max_queue_depth_packets)


  _pyangbind_elements = OrderedDict([('name', name), ('queue_type', queue_type), ('max_queue_depth_packets', max_queue_depth_packets), ])


class yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_red_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/red/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'red', u'config']

  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_red_openconfig_qos_elements__qos_drop_profiles_drop_profile_red(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/red. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to RED-managed queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__config',)

  _yang_name = 'red'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'red']

  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config (container)

    YANG Description: Configuration data for RED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/red/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_red_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = OrderedDict([('config', config), ])


class yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes/traffic-class/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration data for WRED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__id','__minth','__maxth','__maxprob',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes', u'traffic-class', u'config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/name (string)

    YANG Description: Descriptive name and key for the class
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Descriptive name and key for the class
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/id (identityref)

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/id (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: This is the WRED class id and will correlate to a
IP Precedence or DSCP name (i.e. CS0, CS1, AF11, EF,
etc).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with identityref""",
          'defined-type': "openconfig-qos-stratum:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={u'BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF12': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF13': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF31': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF32': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF33': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'CS2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'EF': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:BE': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'AF11': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF41': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF43': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF42': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP7': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP6': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP5': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP4': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP3': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP2': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP1': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:IPP0': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF23': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF22': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}, u'oc-qos-stm:AF21': {u'@namespace': u'http://opennetworking.org/yang/openconfig-qos-stratum', u'@module': u'openconfig-qos-stratum'}},), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='identityref', is_config=True)


  def _get_minth(self):
    """
    Getter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/minth (uint64)

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    return self.__minth
      
  def _set_minth(self, v, load=False):
    """
    Setter method for minth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/minth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minth() directly.

    YANG Description: The mininum threshold parameter for a RED-managed queue.
When the average queue length is less than minth, all
packets are admitted to the queue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__minth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minth(self):
    self.__minth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="minth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxth(self):
    """
    Getter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxth (uint64)

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    return self.__maxth
      
  def _set_maxth(self, v, load=False):
    """
    Setter method for maxth, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxth (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxth() directly.

    YANG Description: The maximum threshold parameter for a RED-managed queue.
When the average queue length exceeds the maxth value, all
packets are dropped (or marked if ECN is enabled).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxth must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)""",
        })

    self.__maxth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxth(self):
    self.__maxth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="maxth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='uint64', is_config=True)


  def _get_maxprob(self):
    """
    Getter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)

    YANG Description: The RED maximum probability percentage.
    """
    return self.__maxprob
      
  def _set_maxprob(self, v, load=False):
    """
    Setter method for maxprob, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config/maxprob (oc-types:percentage)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxprob is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxprob() directly.

    YANG Description: The RED maximum probability percentage.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxprob must be of a type compatible with oc-types:percentage""",
          'defined-type': "oc-types:percentage",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)""",
        })

    self.__maxprob = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxprob(self):
    self.__maxprob = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'0..100']}), is_leaf=True, yang_name="maxprob", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='oc-types:percentage', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  id = __builtin__.property(_get_id, _set_id)
  minth = __builtin__.property(_get_minth, _set_minth)
  maxth = __builtin__.property(_get_maxth, _set_maxth)
  maxprob = __builtin__.property(_get_maxprob, _set_maxprob)


  _pyangbind_elements = OrderedDict([('name', name), ('id', id), ('minth', minth), ('maxth', maxth), ('maxprob', maxprob), ])


class yc_traffic_class_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes/traffic-class. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of classes
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config',)

  _yang_name = 'traffic-class'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes', u'traffic-class']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/name (leafref)

    YANG Description: Reference to the class name list key.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Reference to the class name list key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config (container)

    YANG Description: Configuration data for WRED queues
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration data for WRED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ])


class yc_traffic_classes_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/wred/traffic-classes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of Weighted RED class confgurations for QoS queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_class',)

  _yang_name = 'traffic-classes'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred', u'traffic-classes']

  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class (list)

    YANG Description: List of classes
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes/traffic_class (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: List of classes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=YANGListType("name",yc_traffic_class_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes_traffic_class, yang_name="traffic-class", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)


  _pyangbind_elements = OrderedDict([('traffic_class', traffic_class), ])


class yc_wred_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile/wred. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for data related to Weighted RED queues
  """
  __slots__ = ('_path_helper', '_extmethods', '__traffic_classes',)

  _yang_name = 'wred'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile', u'wred']

  def _get_traffic_classes(self):
    """
    Getter method for traffic_classes, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes (container)

    YANG Description: A list of Weighted RED class confgurations for QoS queues
    """
    return self.__traffic_classes
      
  def _set_traffic_classes(self, v, load=False):
    """
    Setter method for traffic_classes, mapped from YANG variable /qos/drop_profiles/drop_profile/wred/traffic_classes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_classes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_classes() directly.

    YANG Description: A list of Weighted RED class confgurations for QoS queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_traffic_classes_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_classes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_traffic_classes_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__traffic_classes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_classes(self):
    self.__traffic_classes = YANGDynClass(base=yc_traffic_classes_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred_traffic_classes, is_container='container', yang_name="traffic-classes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  traffic_classes = __builtin__.property(_get_traffic_classes, _set_traffic_classes)


  _pyangbind_elements = OrderedDict([('traffic_classes', traffic_classes), ])


class yc_drop_profile_openconfig_qos_elements__qos_drop_profiles_drop_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles/drop-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__config','__red','__wred',)

  _yang_name = 'drop-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_elements__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles', u'drop-profile']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/name (leafref)

    YANG Description: Refernce to the name of the drop profile
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /qos/drop_profiles/drop_profile/name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Refernce to the name of the drop profile
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/config (container)

    YANG Description: Configuration parameters relating to the drop profile.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /qos/drop_profiles/drop_profile/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: Configuration parameters relating to the drop profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=yc_config_openconfig_qos_elements__qos_drop_profiles_drop_profile_config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_red(self):
    """
    Getter method for red, mapped from YANG variable /qos/drop_profiles/drop_profile/red (container)

    YANG Description: Top-level container for data related to RED-managed queues
    """
    return self.__red
      
  def _set_red(self, v, load=False):
    """
    Setter method for red, mapped from YANG variable /qos/drop_profiles/drop_profile/red (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_red is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_red() directly.

    YANG Description: Top-level container for data related to RED-managed queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_red_openconfig_qos_elements__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """red must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_red_openconfig_qos_elements__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__red = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_red(self):
    self.__red = YANGDynClass(base=yc_red_openconfig_qos_elements__qos_drop_profiles_drop_profile_red, is_container='container', yang_name="red", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)


  def _get_wred(self):
    """
    Getter method for wred, mapped from YANG variable /qos/drop_profiles/drop_profile/wred (container)

    YANG Description: Top-level container for data related to Weighted RED queues
    """
    return self.__wred
      
  def _set_wred(self, v, load=False):
    """
    Setter method for wred, mapped from YANG variable /qos/drop_profiles/drop_profile/wred (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wred() directly.

    YANG Description: Top-level container for data related to Weighted RED queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_wred_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wred must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_wred_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__wred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wred(self):
    self.__wred = YANGDynClass(base=yc_wred_openconfig_qos_elements__qos_drop_profiles_drop_profile_wred, is_container='container', yang_name="wred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  config = __builtin__.property(_get_config, _set_config)
  red = __builtin__.property(_get_red, _set_red)
  wred = __builtin__.property(_get_wred, _set_wred)


  _pyangbind_elements = OrderedDict([('name', name), ('config', config), ('red', red), ('wred', wred), ])


class yc_drop_profiles_openconfig_qos_elements__qos_drop_profiles(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos/drop-profiles. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of configured drop profiles.
  """
  __slots__ = ('_path_helper', '_extmethods', '__drop_profile',)

  _yang_name = 'drop-profiles'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__drop_profile = YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos_elements__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos', u'drop-profiles']

  def _get_drop_profile(self):
    """
    Getter method for drop_profile, mapped from YANG variable /qos/drop_profiles/drop_profile (list)

    YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
    """
    return self.__drop_profile
      
  def _set_drop_profile(self, v, load=False):
    """
    Setter method for drop_profile, mapped from YANG variable /qos/drop_profiles/drop_profile (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profile() directly.

    YANG Description: List of drop profiles. A drop profile only holds the configuration
information for the drop profile and is referenced from the
queue leaf node.  This allows for a smaller set of drop profiles
than queues to be configured which is normally the case in a
HQoS configuration for say a BNG use case.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_drop_profile_openconfig_qos_elements__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profile must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos_elements__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)""",
        })

    self.__drop_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profile(self):
    self.__drop_profile = YANGDynClass(base=YANGListType("name",yc_drop_profile_openconfig_qos_elements__qos_drop_profiles_drop_profile, yang_name="drop-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="drop-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='list', is_config=True)

  drop_profile = __builtin__.property(_get_drop_profile, _set_drop_profile)


  _pyangbind_elements = OrderedDict([('drop_profile', drop_profile), ])


class yc_qos_openconfig_qos_elements__qos(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /qos. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top-level container for QoS data
  """
  __slots__ = ('_path_helper', '_extmethods', '__interfaces','__queues','__scheduler_policies','__drop_profiles',)

  _yang_name = 'qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_qos_elements__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_elements__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__scheduler_policies = YANGDynClass(base=yc_scheduler_policies_openconfig_qos_elements__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    self.__drop_profiles = YANGDynClass(base=yc_drop_profiles_openconfig_qos_elements__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos']

  def _get_interfaces(self):
    """
    Getter method for interfaces, mapped from YANG variable /qos/interfaces (container)

    YANG Description: Enclosing container for the list of interface references
    """
    return self.__interfaces
      
  def _set_interfaces(self, v, load=False):
    """
    Setter method for interfaces, mapped from YANG variable /qos/interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces() directly.

    YANG Description: Enclosing container for the list of interface references
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_interfaces_openconfig_qos_elements__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_interfaces_openconfig_qos_elements__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces(self):
    self.__interfaces = YANGDynClass(base=yc_interfaces_openconfig_qos_elements__qos_interfaces, is_container='container', yang_name="interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_queues(self):
    """
    Getter method for queues, mapped from YANG variable /qos/queues (container)

    YANG Description: Enclosing container for the list of queues
    """
    return self.__queues
      
  def _set_queues(self, v, load=False):
    """
    Setter method for queues, mapped from YANG variable /qos/queues (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queues is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queues() directly.

    YANG Description: Enclosing container for the list of queues
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_queues_openconfig_qos_elements__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queues must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_queues_openconfig_qos_elements__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__queues = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queues(self):
    self.__queues = YANGDynClass(base=yc_queues_openconfig_qos_elements__qos_queues, is_container='container', yang_name="queues", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_scheduler_policies(self):
    """
    Getter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    return self.__scheduler_policies
      
  def _set_scheduler_policies(self, v, load=False):
    """
    Setter method for scheduler_policies, mapped from YANG variable /qos/scheduler_policies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scheduler_policies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scheduler_policies() directly.

    YANG Description: Enclosing container for the list of configured scheduler policies.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_scheduler_policies_openconfig_qos_elements__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scheduler_policies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_scheduler_policies_openconfig_qos_elements__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__scheduler_policies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scheduler_policies(self):
    self.__scheduler_policies = YANGDynClass(base=yc_scheduler_policies_openconfig_qos_elements__qos_scheduler_policies, is_container='container', yang_name="scheduler-policies", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)


  def _get_drop_profiles(self):
    """
    Getter method for drop_profiles, mapped from YANG variable /qos/drop_profiles (container)

    YANG Description: Enclosing container for the list of configured drop profiles.
    """
    return self.__drop_profiles
      
  def _set_drop_profiles(self, v, load=False):
    """
    Setter method for drop_profiles, mapped from YANG variable /qos/drop_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_profiles() directly.

    YANG Description: Enclosing container for the list of configured drop profiles.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_drop_profiles_openconfig_qos_elements__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_drop_profiles_openconfig_qos_elements__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)""",
        })

    self.__drop_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_profiles(self):
    self.__drop_profiles = YANGDynClass(base=yc_drop_profiles_openconfig_qos_elements__qos_drop_profiles, is_container='container', yang_name="drop-profiles", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://opennetworking.org/yang/openconfig-qos-stratum', defining_module='openconfig-qos-stratum', yang_type='container', is_config=True)

  interfaces = __builtin__.property(_get_interfaces, _set_interfaces)
  queues = __builtin__.property(_get_queues, _set_queues)
  scheduler_policies = __builtin__.property(_get_scheduler_policies, _set_scheduler_policies)
  drop_profiles = __builtin__.property(_get_drop_profiles, _set_drop_profiles)


  _pyangbind_elements = OrderedDict([('interfaces', interfaces), ('queues', queues), ('scheduler_policies', scheduler_policies), ('drop_profiles', drop_profiles), ])


class openconfig_qos_elements(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /openconfig-qos-elements. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This submodule defines configuration and operational state
data associated with QoS elements.  The primary elements of
the model include:

 classifiers: match packets with a specific characteristic

 forwarding groups: logical class of packets that receive
 common forwarding treatment

 queues:  collection of packets to be scheduled, including
 a queue management scheme

 schedulers: sequence of one more elements that schedule
 packets for transmission, including policer and shaper
 functions
  """
  __slots__ = ('_path_helper', '_extmethods', '__qos',)

  _yang_name = 'openconfig-qos-elements'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__qos = YANGDynClass(base=yc_qos_openconfig_qos_elements__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_qos(self):
    """
    Getter method for qos, mapped from YANG variable /qos (container)

    YANG Description: Top-level container for QoS data
    """
    return self.__qos
      
  def _set_qos(self, v, load=False):
    """
    Setter method for qos, mapped from YANG variable /qos (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_qos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_qos() directly.

    YANG Description: Top-level container for QoS data
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_qos_openconfig_qos_elements__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """qos must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_qos_openconfig_qos_elements__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)""",
        })

    self.__qos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_qos(self):
    self.__qos = YANGDynClass(base=yc_qos_openconfig_qos_elements__qos, is_container='container', yang_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/qos', defining_module='openconfig-qos', yang_type='container', is_config=True)

  qos = __builtin__.property(_get_qos, _set_qos)


  _pyangbind_elements = OrderedDict([('qos', qos), ])


class openconfig_qos_types(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-types - based on the path /openconfig-qos-types. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This module defines types and identities used in OpenConfig
models related to quality-of-service (QoS)
  """
  _pyangbind_elements = {}

  

class openconfig_qos_stratum(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-stratum - based on the path /openconfig-qos-stratum. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Model of augmentations and deviations to openconfig-qos
specifically for Stratum
  """
  _pyangbind_elements = {}

  

class openconfig_qos_interfaces(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-interfaces - based on the path /openconfig-qos-interfaces. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This submodule defines data related to quality-of-service
configuration and operational state associated with
interfaces.
  """
  _pyangbind_elements = {}

  

class openconfig_qos_elements(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-qos-elements - based on the path /openconfig-qos-elements. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This submodule defines configuration and operational state
data associated with QoS elements.  The primary elements of
the model include:

 classifiers: match packets with a specific characteristic

 forwarding groups: logical class of packets that receive
 common forwarding treatment

 queues:  collection of packets to be scheduled, including
 a queue management scheme

 schedulers: sequence of one more elements that schedule
 packets for transmission, including policer and shaper
 functions
  """
  _pyangbind_elements = {}

  

